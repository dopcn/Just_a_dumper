//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "PresoModeViewDelegate-Protocol.h"
#import "SHVideoPlayerControllerProtocol-Protocol.h"
#import "SHVideoPlayerDelegate-Protocol.h"
#import "SHVideoPlayerPlayProtocol-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class CustomProgressHUD, NSObject, NSRecursiveLock, NSString, NSTimer, SHPlayerCaptionBoard, SHPlayerLoadingView, SHPlayerVideoItem, SHVideoPlayer, SHVideoPlayerView, UITapGestureRecognizer, UIView;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, SHPlayerDataManager;

@interface SHVideoPlayerViewController : UIViewController <UIGestureRecognizerDelegate, SHVideoPlayerPlayProtocol, SHVideoPlayerDelegate, SHVideoPlayerControllerProtocol, PresoModeViewDelegate>
{
    long long _timerCount;
    SHPlayerLoadingView *_loadingView;
    CDUnknownBlockType _destroyCompletion;
    UIViewController *_container;
    UITapGestureRecognizer *_callPlayerOverlayGesture;
    UITapGestureRecognizer *_playerControlGesture;
    long long _pauseCount;
    _Bool _beingShowAd;
    _Bool _HDMIVideoActive;
    NSTimer *_viewTimer;
    unsigned long long _playbackState;
    long long _videoPlayerAsyncPresentTimerCount;
    NSObject<OS_dispatch_queue> *_switchScreenModeQueue;
    NSObject<OS_dispatch_semaphore> *_switchScreenModeSemaphore;
    _Bool _asynchronousPresentVideoPlayer;
    _Bool _isVideoPlayerBeingAsynchronousPresent;
    _Bool _synchPlaybackStateWithUserControlState;
    _Bool _supportDoubleClickGesture;
    _Bool _supportReplayMode;
    _Bool _supportAutoHiddenOverlay;
    _Bool _canDismissVideoPlayer;
    _Bool _transformingVideoPlayerView;
    _Bool _vrPlayerIsLocked;
    _Bool _isSwitchIngScreen;
    SHVideoPlayerView *_videoPlayerView;
    id <SHPlayerDataManager> _videoManager;
    SHVideoPlayer *_videoPlayer;
    UIView *_backgrounddView;
    UIView *_overlay;
    UIView *_containerView;
    double _switchViewModeAnimationDuration;
    long long _appearStatus;
    CustomProgressHUD *_asyncPresentPlayerLoadingView;
}

+ (void)releaseDefaultVideoPlayerViewController;
+ (id)getDefaultVideoPlayerViewController;
+ (id)defaultVideoPlayerViewController;
+ (void)exitPlayer;
+ (void)playerPause;
+ (void)playerPlay;
+ (id)defaultVideoPlayer;
+ (void)registerAudioRouteListener;
+ (_Bool)isBeingShowed;
+ (id)defaultVideoPlayerController;
@property(retain, nonatomic) CustomProgressHUD *asyncPresentPlayerLoadingView; // @synthesize asyncPresentPlayerLoadingView=_asyncPresentPlayerLoadingView;
@property(nonatomic) long long appearStatus; // @synthesize appearStatus=_appearStatus;
@property(nonatomic) _Bool isSwitchIngScreen; // @synthesize isSwitchIngScreen=_isSwitchIngScreen;
@property(nonatomic) _Bool vrPlayerIsLocked; // @synthesize vrPlayerIsLocked=_vrPlayerIsLocked;
@property(nonatomic) _Bool transformingVideoPlayerView; // @synthesize transformingVideoPlayerView=_transformingVideoPlayerView;
@property(nonatomic) _Bool beingShowAd; // @synthesize beingShowAd=_beingShowAd;
@property(readonly, nonatomic) long long pauseCount; // @synthesize pauseCount=_pauseCount;
@property(nonatomic) long long timerCount; // @synthesize timerCount=_timerCount;
@property(nonatomic) _Bool canDismissVideoPlayer; // @synthesize canDismissVideoPlayer=_canDismissVideoPlayer;
@property(nonatomic, getter=isSupportAutoHiddenOverlay) _Bool supportAutoHiddenOverlay; // @synthesize supportAutoHiddenOverlay=_supportAutoHiddenOverlay;
@property(nonatomic) _Bool supportReplayMode; // @synthesize supportReplayMode=_supportReplayMode;
@property(nonatomic, getter=isSupportDoubleClickGesture) _Bool supportDoubleClickGesture; // @synthesize supportDoubleClickGesture=_supportDoubleClickGesture;
@property(nonatomic) double switchViewModeAnimationDuration; // @synthesize switchViewModeAnimationDuration=_switchViewModeAnimationDuration;
@property(copy, nonatomic) CDUnknownBlockType destroyCompletion; // @synthesize destroyCompletion=_destroyCompletion;
@property(nonatomic) _Bool synchPlaybackStateWithUserControlState; // @synthesize synchPlaybackStateWithUserControlState=_synchPlaybackStateWithUserControlState;
@property(nonatomic) _Bool isVideoPlayerBeingAsynchronousPresent; // @synthesize isVideoPlayerBeingAsynchronousPresent=_isVideoPlayerBeingAsynchronousPresent;
@property(nonatomic) _Bool asynchronousPresentVideoPlayer; // @synthesize asynchronousPresentVideoPlayer=_asynchronousPresentVideoPlayer;
@property(retain, nonatomic) UIView *containerView; // @synthesize containerView=_containerView;
@property(retain, nonatomic) UIViewController *container; // @synthesize container=_container;
@property(retain, nonatomic) UIView *overlay; // @synthesize overlay=_overlay;
@property(retain, nonatomic) UIView *backgrounddView; // @synthesize backgrounddView=_backgrounddView;
@property(retain, nonatomic) SHVideoPlayer *videoPlayer; // @synthesize videoPlayer=_videoPlayer;
@property(retain, nonatomic) SHPlayerLoadingView *loadingView; // @synthesize loadingView=_loadingView;
@property(retain, nonatomic) id <SHPlayerDataManager> videoManager; // @synthesize videoManager=_videoManager;
- (void).cxx_destruct;
- (void)appDidBecomeActiveWillPlayNewVideo;
- (_Bool)videoPlayerShouldBlockVideoToPlay;
- (void)videoPlayerWouldBecomeActive:(_Bool)arg1;
- (void)applicationWillTerminal;
- (void)applicationDidEnterForground;
- (void)applicationWillEnterForground;
- (void)applicationDidEnterBackground;
- (void)applicationWillEnterBackground;
- (void)reachabilityChangedNotification:(id)arg1;
- (void)videoPlayerWillClosed:(_Bool)arg1;
- (_Bool)videoPlayerShouldAutoClose;
- (void)videoPlayerWillLoadOnlineVideo:(_Bool)arg1 isAutomatic:(_Bool)arg2;
- (_Bool)videoPlayerShouldAutoPlay;
- (void)videoPlayerHaveSwitchedLowerDefinitionVideo;
- (void)videoPlayerSwitchVideoDefinition:(long long)arg1;
- (void)playVideoWithNewDefinition;
- (void)playVideoWithManager:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)videoPlayerRecommendVideoWillLoad;
- (void)videoPlayerDidDestory;
- (void)videoPlayerWillDestory;
- (void)videoPlayerDidDoubleClick;
- (void)videoPlayerDidEnterInline;
- (void)videoPlayerWillEnterInline;
- (void)videoPlayerDidEnterFullscreen;
- (void)videoPlayerWillEnterFullscreen;
- (void)switchViewMode:(long long)arg1 gesture:(_Bool)arg2;
- (void)switchViewMode:(long long)arg1;
- (void)switchViewMode:(long long)arg1 completetion:(CDUnknownBlockType)arg2;
- (void)switchViewModeAnimation:(long long)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)detachPlayerState;
- (void)tick;
- (void)registerViewTimer;
- (void)updateVideoPlayerFrame:(struct CGRect)arg1;
- (void)showOverlayView:(_Bool)arg1 animate:(_Bool)arg2;
- (void)showOverlayView:(_Bool)arg1;
- (void)showOverlayView:(_Bool)arg1 animate:(_Bool)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)showOverlayView:(_Bool)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)videoPlayerDidShowOverlay:(_Bool)arg1;
- (void)videoPlayerWillShowOverlay:(_Bool)arg1;
- (void)callPlayerOverlayViaGesture_iPad:(_Bool)arg1;
- (void)callPlayerOverlayViaGesture:(_Bool)arg1;
- (_Bool)shouldAutomaticallyHideOverlay;
- (void)videoPlayerIsLoading:(_Bool)arg1 force:(_Bool)arg2;
- (void)videoPlayerIsLoading:(_Bool)arg1;
- (void)dismissLoadingView;
- (void)showLoadingView:(int)arg1 loadingTip:(id)arg2 activityIndicator:(_Bool)arg3;
- (void)showLoadingView:(int)arg1;
- (void)videoPlayerWaitingForReplay;
- (_Bool)videoPlayerWillOpenSafari;
- (void)videoPlayerOpenFailed;
- (void)videoPlayerWillAppear;
- (_Bool)videoPlayerPGCAutoPlay;
- (_Bool)videoPlayerNeedAutoPlayNext;
- (void)videoPlayerDidEnd;
- (void)videoPlayerDidPlay;
- (_Bool)videoPlayerWillPlay;
- (void)videoPlayerDidLoad;
- (_Bool)videoPlayerWillLoad;
- (void)videoPlayerWillAsyload;
- (void)layoutBackgroundView;
- (void)layoutOverlayView;
@property(readonly, retain, nonatomic) SHVideoPlayerView *videoPlayerView; // @synthesize videoPlayerView=_videoPlayerView;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidUnload;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (void)traitCollectionDidChange:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)dealloc;
@property(retain, nonatomic) SHPlayerCaptionBoard *captionBoard;
- (void)apdapterVideoCaptionVersion:(id)arg1;
- (void)adapterCaptionBardFrame;
- (void)removeCaptionBoard;
- (void)synchCaptionBoard;
- (void)switchVideoCaptionVersion:(long long)arg1;
- (void)showCaptionBoard;
- (_Bool)couldShowCaptionList;
@property(nonatomic) _Bool isSupportSwitchViewModeGesture;
- (void)rotationTouchAction:(id)arg1;
- (void)viewModeInlineAnimateion_iPad:(CDUnknownBlockType)arg1;
- (void)viewModeFullscreenAnimateion_iPad:(CDUnknownBlockType)arg1;
- (void)_switchViewMode:(long long)arg1 withCompletetion:(CDUnknownBlockType)arg2;
- (void)playerPlaybackControl:(id)arg1;
- (void)callPlayerOverlay:(id)arg1;
- (void)pinchTouchAction:(id)arg1;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)_removeGestureRecognizer;
- (void)_registerGestureRecognizer;
@property(nonatomic) _Bool shouldBlockPlayerTOPlay;
@property(nonatomic) _Bool isVideoPlayerWillPlay;
@property unsigned long long currentPlayerPlayState;
@property _Bool isBeingRecordPlaybackStatePause;
@property unsigned long long beforeResignPlaybackState;
@property long long recordPlaybackState;
- (_Bool)isLivePlay;
- (_Bool)isLocaPlay;
- (void)exitPlayerVideo;
- (void)playVideoWithOrder:(long long)arg1;
- (void)playerPlayVideo:(id)arg1;
- (_Bool)isVideoPlayerType:(long long)arg1;
- (void)seek:(double)arg1;
- (void)stop;
- (void)replay;
- (void)resume;
- (void)pause;
- (_Bool)play;
- (void)playerPauseWithCondition;
- (void)playerPlayByForce;
- (void)playerPlayWithCondition;
- (void)playerPause;
- (void)playerPlay;
@property long long recordLoadVideoDuraton;
@property _Bool haveAutoSwithcLowerDefintionVideo;
- (void)_mirroringVideoPlayerLoadingStatus;
- (void)_stopMirrorVideoPlayerLoadingStatus;
- (void)_beginMirrorVideoPlayerLoadingStatus;
- (void)videoPlayerIsAudioRouteActiveDidChange:(_Bool)arg1;
- (void)playerManagerVideoSeriesUpdateFinishedNotification:(id)arg1;
- (void)playerManagerPreloadVideoItemFinishedNotification:(id)arg1;
- (void)playerManagerVideoItemDefinitionFinishedNotificaiton:(id)arg1;
- (void)playerManagerVideoItemDataFinishedNotificaiton:(id)arg1;
- (void)playerSkipVideoTailNotificaiton:(id)arg1;
- (void)playerShowOverlayNotificaiton:(id)arg1;
- (void)applicationWillTerminateNotificaiton:(id)arg1;
- (void)applicationDidBecomeActiveNotificaiton:(id)arg1;
- (void)applicationWillEnterForegroundNotificaiton:(id)arg1;
- (void)applicationDidEnterBackgroundNotificaiton:(id)arg1;
- (void)applicationWillResignActionNotificaiton:(id)arg1;
- (void)_registerNotification;
@property(nonatomic) _Bool willPlayLocalToOnlineVideo;
@property(nonatomic) _Bool isLoadingRecommendVideo;
- (void)_videoPlayerWillCloseForced:(_Bool)arg1;
- (void)_failedToAutoPlayWithSourceID:(id)arg1;
- (void)_willPlayRecommendVideos;
- (void)_willPlayLocalToOnlineVideos;
- (void)_willPlaySeriesVideos;
- (void)_willPlayNormalVideos;
- (void)_videoPlayerTryToAutoPlay;
@property(retain, nonatomic) NSRecursiveLock *playerPlaybackStateLock;
- (void)updateVideoPlayerViewFrame;
- (void)playerDidLoadVideoFromRouterCache:(id)arg1 withDefinition:(long long)arg2;
- (void)playerHDMIPlayVideoActiveDidChange:(id)arg1;
- (void)playerAirPlayVideoActiveDidChange:(id)arg1;
- (void)playerReportCaton:(id)arg1 analysisInfo:(id)arg2;
- (void)playerResponseVideoService:(id)arg1 fileRequestInfo:(id)arg2;
- (void)playerPlaybackDidFailed:(id)arg1 error:(id)arg2;
- (_Bool)playerShouldRetryPlayVideo:(id)arg1 video:(id)arg2;
- (void)playerPlaybackError:(id)arg1 userInfo:(id)arg2;
- (void)playerPlaybackDidFinished:(id)arg1 reason:(long long)arg2 playbackTime:(double)arg3;
- (void)playerPlaybackStateDidChanged:(id)arg1;
- (void)playerLoadStateDidChanged:(id)arg1;
- (void)playerIsPreparedToPlay:(id)arg1;
- (void)playerDurationAvailable:(id)arg1;
- (void)_generateVideoPlayer:(id)arg1 withInitPlaybackTime:(double)arg2;
- (void)_destroy_PlayerDelegate;
- (void)_initialize_PlayerDelegate;
@property(nonatomic) _Bool isPlayerLoadingVideo;
@property(nonatomic) long long viewMode;
@property(nonatomic, getter=isSupportAirPlay) _Bool supportAirPlay;
@property(nonatomic, getter=isSupportHDMI) _Bool supportHDMI;
@property(nonatomic) _Bool isPlayerBeingBuffer;
@property(readonly, nonatomic) long long currentVideoDefinition;
@property(readonly, nonatomic) long long videoPlayerType;
@property(readonly, nonatomic) _Bool isAirPlayVideoActive;
@property(readonly, nonatomic) _Bool isHDMIVideoActive;
@property(readonly, nonatomic) _Bool isPlayerPreloadDidFinished;
@property(readonly, nonatomic) _Bool isPlayerStopped;
@property(readonly, nonatomic) _Bool isPlayerActiviting;
@property(readonly, nonatomic) unsigned long long playerScalingMode;
@property(readonly, nonatomic) unsigned long long currentPlayerLoadState;
@property(readonly, nonatomic) long long playerVideoDownloadSpeed;
@property(readonly, nonatomic) double playerInitialPlaybackTime;
@property(readonly, nonatomic) double playerVideoDuration;
@property(readonly, nonatomic) double currentPlayerPlaybackTime;
@property(readonly, nonatomic) SHPlayerVideoItem *currentPlayerVideoItem;
@property _Bool isVideoPlayerDestroying;
@property _Bool beingPresented;
@property _Bool willBePresented;
- (void)_playVideo:(id)arg1 withInitPlaybackTime:(double)arg2;
- (void)_playUncopyrightVideo;
- (void)_preparedPlayVideo;
- (void)destroyVideoPlayerWithCompletion:(CDUnknownBlockType)arg1;
- (void)dismissModalViewControllerAnimated:(_Bool)arg1;
- (void)dismissPlayerViewControllerWithCompletion:(CDUnknownBlockType)arg1;
- (void)presentVideoPlayerInViewController:(id)arg1;
- (void)presentVideoPlayerInViewController:(id)arg1 toView:(id)arg2;
- (void)clearCachedFiles:(id)arg1;
- (_Bool)willVideoPlayerBePresented;
- (_Bool)isVideoPlayerBeingPresented;
- (void)cleanPGCPayTipView;
@property(readonly, nonatomic) UIView *pgcPayTipView;
- (void)pgcAuthFinishedNotification:(id)arg1;
- (void)registerPGCAuthNotification;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

