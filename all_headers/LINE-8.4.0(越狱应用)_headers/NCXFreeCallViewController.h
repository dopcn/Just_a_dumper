//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "NCXViewController.h"

#import "NCXCallViewController-Protocol.h"
#import "NCXFacePlayDelegate-Protocol.h"
#import "NCXVoIPSessionDelegate-Protocol.h"

@class NCXMiniwindowAudioView, NCXMiniwindowView, NCXPIPController, NCXVoIPSession, NSString, NSTimer, UIViewController;
@protocol NCXFreeCallChildViewController><NCXFacePlayDelegate;

@interface NCXFreeCallViewController : NCXViewController <NCXVoIPSessionDelegate, NCXFacePlayDelegate, NCXCallViewController>
{
    NCXMiniwindowAudioView *mMiniwindowAudioView;
    NCXMiniwindowView *mMiniwindowView;
    NCXPIPController *mPIPController;
    NCXVoIPSession *mSession;
    long long mInitialCallType;
    UIViewController<NCXFreeCallChildViewController><NCXFacePlayDelegate> *mChildViewController;
    long long mCallDuration;
    NSTimer *mCallInfoTimer;
    _Bool mStatInfoEnabled;
    NSTimer *mStatInfoTimer;
    NSString *mReconnectionMessageText;
    double mReconnectionMessageTime;
    _Bool mStartingVideo;
    _Bool mStartingFacePlay;
    _Bool mFirstVideoStarting;
    _Bool mSessionReleasedAlready;
    _Bool mDisconnectingByVideo;
}

+ (id)viewControllerWithSession:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)facePlayWantsCaptureCompletedView:(id)arg1;
- (void)facePlayWantsDisplayShareView:(id)arg1;
- (void)facePlay:(id)arg1 wantsInterruptGameWithVictory:(_Bool)arg2;
- (void)facePlay:(id)arg1 didHandleTermCode:(long long)arg2;
- (void)facePlay:(id)arg1 willHandleTermCode:(long long)arg2;
- (void)facePlay:(id)arg1 didReceivePeerResult:(id)arg2;
- (void)facePlay:(id)arg1 didStopGameWithSessionID:(long long)arg2 gameID:(int)arg3;
- (void)facePlay:(id)arg1 didStartGameWithSessionID:(long long)arg2 gameID:(int)arg3;
- (_Bool)facePlay:(id)arg1 shouldWaitAsGuestWithGameID:(int)arg2 gameVersion:(long long)arg3 failure:(CDUnknownBlockType)arg4;
- (void)facePlay:(id)arg1 didChangeState:(long long)arg2 fromState:(long long)arg3;
- (void)VoIPSessionDidCreateFacePlay:(id)arg1 error:(id)arg2;
- (void)VoIPSessionDidReceiveStringData:(id)arg1 data:(id)arg2;
- (void)VoIPSessionDidChangeRegistrar:(id)arg1;
- (void)VoIPSessionServerConnectionUnstable:(id)arg1;
- (void)VoIPSessionMicrophoneMuteDidChange:(id)arg1;
- (void)VoIPSessionAudioOutputRouteDidChange:(id)arg1;
- (void)VoIPSessionDidChangeRemoteVideoState:(id)arg1;
- (void)VoIPSessionDidReceiveFirstRemoteVideoFrame:(id)arg1;
- (void)VoIPSessionDidStopVideo:(id)arg1 termCode:(int)arg2;
- (void)VoIPSessionWillStopVideo:(id)arg1 termCode:(int)arg2;
- (void)VoIPSessionDidStartVideo:(id)arg1;
- (void)VoIPSessionWillStartVideo:(id)arg1;
- (void)VoIPSessionDidDisconnect:(id)arg1;
- (void)VoIPSessionDidConnect:(id)arg1;
- (void)VoIPSessionErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)VoIPSessionStateDidChange:(id)arg1 state:(long long)arg2;
- (void)invalidateCallInfoTimer;
- (void)scheduleCallInfoTimer;
- (void)invalidateStatInfoTimer;
- (void)scheduleStatInfoTimer;
- (void)updateStatInfo:(id)arg1;
- (void)updateCallInfo:(id)arg1;
- (void)updateProfile;
- (void)switchControllerFacePlayToVideo;
- (void)dismissChildViewController;
- (void)attachChildView;
- (_Bool)presentFacePlayViewController:(id)arg1;
- (void)presentVideoViewController;
- (void)presentAudioViewController;
- (void)setupMiniwindowView;
- (_Bool)wantsIdleTimerDisabled;
- (_Bool)wantsProximityMonitoringEnabled;
- (id)viewControllerForScreenSleepSettings;
- (void)cleanup;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (long long)preferredStatusBarStyle;
- (id)childViewControllerForStatusBarStyle;
- (_Bool)prefersStatusBarHidden;
- (id)childViewControllerForStatusBarHidden;
- (void)dealloc;
- (void)setupWithSession:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

