//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "NMBaseManager.h"

#import "AMap3DViewDelegate-Protocol.h"
#import "NMGpsMonitorManagerDelegate-Protocol.h"
#import "NMMapCoveredProtocol-Protocol.h"
#import "NMNaviCruiseDelegate-Protocol.h"
#import "NMNaviCruiseService-Protocol.h"

@class NMMapStateMode, NMNaviCruiseBannerMode, NMNaviCruiseBottomMode, NMNaviCruiseCongestionInfo, NMNaviCruiseInfo, NMNaviCruiseTrafficFacilityInfo, NSMutableArray, NSString, UIAlertView;
@protocol NMNaviService;

@interface NMNaviCruiseManager : NMBaseManager <NMGpsMonitorManagerDelegate, AMap3DViewDelegate, NMMapCoveredProtocol, NMNaviCruiseService, NMNaviCruiseDelegate>
{
    _Bool _hasShowAlert;
    _Bool _ignoreAppearDisappear;
    _Bool _mapViewInit;
    _Bool _isNaviCruiseStart;
    _Bool _isUserZoomMap;
    _Bool _canResetMapLevelIfNeed;
    id <NMNaviService> _naviManager;
    NSMutableArray *_stackArray;
    long long _naviCruiseState;
    NMMapStateMode *_outSideMapState;
    NMNaviCruiseTrafficFacilityInfo *_trafficFacilityInfo;
    NMNaviCruiseCongestionInfo *_congestionInfo;
    NMNaviCruiseCongestionInfo *_trafficIncident;
    NMNaviCruiseInfo *_naviCruiseInfo;
    long long _gpsStatus;
    NMNaviCruiseBannerMode *_topBannerMode;
    NMNaviCruiseBottomMode *_bottomBannerMode;
    double _lastUserMapLevel;
    UIAlertView *_GPSAlertView;
    struct naviCruise_CarLocation _curCarLocation;
    struct naviCruise_CarLocation _targetCarLocation;
}

@property(retain, nonatomic) UIAlertView *GPSAlertView; // @synthesize GPSAlertView=_GPSAlertView;
@property(nonatomic) double lastUserMapLevel; // @synthesize lastUserMapLevel=_lastUserMapLevel;
@property(retain, nonatomic) NMNaviCruiseBottomMode *bottomBannerMode; // @synthesize bottomBannerMode=_bottomBannerMode;
@property(retain, nonatomic) NMNaviCruiseBannerMode *topBannerMode; // @synthesize topBannerMode=_topBannerMode;
@property(nonatomic) long long gpsStatus; // @synthesize gpsStatus=_gpsStatus;
@property(retain, nonatomic) NMNaviCruiseInfo *naviCruiseInfo; // @synthesize naviCruiseInfo=_naviCruiseInfo;
@property(retain, nonatomic) NMNaviCruiseCongestionInfo *trafficIncident; // @synthesize trafficIncident=_trafficIncident;
@property(retain, nonatomic) NMNaviCruiseCongestionInfo *congestionInfo; // @synthesize congestionInfo=_congestionInfo;
@property(retain, nonatomic) NMNaviCruiseTrafficFacilityInfo *trafficFacilityInfo; // @synthesize trafficFacilityInfo=_trafficFacilityInfo;
@property(retain, nonatomic) NMMapStateMode *outSideMapState; // @synthesize outSideMapState=_outSideMapState;
@property(nonatomic) _Bool canResetMapLevelIfNeed; // @synthesize canResetMapLevelIfNeed=_canResetMapLevelIfNeed;
@property(nonatomic) _Bool isUserZoomMap; // @synthesize isUserZoomMap=_isUserZoomMap;
@property(nonatomic) _Bool isNaviCruiseStart; // @synthesize isNaviCruiseStart=_isNaviCruiseStart;
@property(nonatomic) _Bool mapViewInit; // @synthesize mapViewInit=_mapViewInit;
@property(nonatomic) _Bool ignoreAppearDisappear; // @synthesize ignoreAppearDisappear=_ignoreAppearDisappear;
@property(nonatomic) _Bool hasShowAlert; // @synthesize hasShowAlert=_hasShowAlert;
@property(nonatomic) long long naviCruiseState; // @synthesize naviCruiseState=_naviCruiseState;
@property(nonatomic) struct naviCruise_CarLocation targetCarLocation; // @synthesize targetCarLocation=_targetCarLocation;
@property(nonatomic) struct naviCruise_CarLocation curCarLocation; // @synthesize curCarLocation=_curCarLocation;
@property(retain, nonatomic) NSMutableArray *stackArray; // @synthesize stackArray=_stackArray;
@property(retain, nonatomic) id <NMNaviService> naviManager; // @synthesize naviManager=_naviManager;
- (void).cxx_destruct;
- (_Bool)isMapCoveredByViews:(long long)arg1;
- (_Bool)isIgnoreAppearDisappear;
- (int)getGPSAuthorizationStatus;
- (_Bool)isOnBackground;
- (void)resumeCuriseNaviLayerFromBackGround;
- (void)applicationWillTerminate:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)showGPSAlertIfNeed;
- (void)lostGPS:(_Bool)arg1;
- (void)updateGpsLevel:(long long)arg1;
- (void)locationManager:(id)arg1 didUpdateHeading:(id)arg2;
- (int)roundSpeed:(float)arg1;
- (void)locationManager:(id)arg1 didUpdateToLocation:(id)arg2 fromLocation:(id)arg3;
- (void)locationManager:(id)arg1 didUpdateFrequentlyToLocation:(id)arg2 fromLocation:(id)arg3;
- (void)stopLocateMe;
- (void)locateMe;
- (void)resetMapLevelToUserSetIfNeed;
- (_Bool)shouldResetMapLevelForCameraDisplay;
- (void)updateNoNaviInfor:(id)arg1;
- (void)updateNoNaviCongestionInfo:(id)arg1;
- (void)updateTrafficInfo:(id)arg1;
- (void)updateTrafficInfoFromNotif;
- (void)playGreetSound;
- (void)recordbehaviorWhenBack;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)saveMapZoomLevel;
- (long long)currentStatus;
- (id)cruiseContainer;
- (void)mapViewZoomOrMoveFinish;
- (void)mapViewAnyTouchInvoked;
- (void)restorePreMapSetting;
- (void)initPreMapSetting;
- (void)changeNaviCruiseViewStatus:(long long)arg1;
- (int)suitableAnimation;
- (_Bool)forbiddenShowMainLayerFavor;
- (_Bool)forbiddenShowFavorLayer;
- (_Bool)forbiddenShowLocationShootingBtn;
- (_Bool)forbiddenMapTMC;
- (_Bool)forbiddenShowCompass;
- (_Bool)forbiddenShowGPSOverlay;
- (_Bool)forbiddenShowTrafficBtn;
- (_Bool)forbiddenShowMapFeedBackBtn;
- (_Bool)forbiddenShowMainLayer;
- (Class)managerViewContainerClass;
- (void)suspendRelatedViews;
- (void)clearAllOverLayer;
- (id)naviCruiseHelper;
- (id)naviCruiseViewController;
- (void)unRegisterNotification;
- (void)registerNotification;
- (void)closeDetectMode;
- (int)getCameraDetectMode;
- (void)enableDetectMode;
- (void)setTrafficConditionBroadcast;
- (void)unRegisterGPSMonitor;
- (void)registerGPSMonitor;
- (void)showFavorLayer;
- (void)hideFavorLayer;
- (void)clearRelatedData;
- (void)clearRelatedViews;
- (void)initRelatedData;
- (void)initRelatedViews;
- (void)dealloc;
- (void)initManagerWithOtherInfo:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

