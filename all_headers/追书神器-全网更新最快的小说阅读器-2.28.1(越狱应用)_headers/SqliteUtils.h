//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class FMDatabaseQueue;

@interface SqliteUtils : NSObject
{
    FMDatabaseQueue *_dbQueue;
}

+ (id)timestampMiSecondString;
+ (id)sharedInstance;
@property(readonly, nonatomic) FMDatabaseQueue *dbQueue; // @synthesize dbQueue=_dbQueue;
- (void).cxx_destruct;
- (void)removeBaseLogsWithLogIds:(id)arg1;
- (id)getAllBaseLogsWithLogType:(long long)arg1;
- (void)addBaseLogWithLogCacheModel:(id)arg1;
- (void)createBaseLogTable;
- (void)deleteEpubMark:(id)arg1;
- (void)deleteEpubMarksOfBookIds:(id)arg1;
- (void)deleteEpubMarksOfBookId:(id)arg1;
- (void)addOrUpdateEpubMark:(id)arg1;
- (id)epubMarksOfBookId:(id)arg1 ofChapterId:(id)arg2 markedRange:(struct _NSRange)arg3;
- (id)epubMarksOfBookId:(id)arg1 ofChapterId:(id)arg2;
- (id)epubMarkItemFromResult:(id)arg1;
- (id)allEpubMarksOfBookId:(id)arg1;
- (void)createEpubMarkTable;
- (void)createStatisticsTable;
- (id)todayPopWindowLog;
- (void)deleteInvalidPopWindowLogWithItem:(id)arg1;
- (void)updatePopWindowLogWithItem:(id)arg1;
- (void)createPopWindowLogTable;
- (_Bool)queryBookIsDownloaded:(id)arg1;
- (id)getFinishedDownloadBookChapterByBookID:(id)arg1;
- (id)queryDownloadChapterIDStringsByBookID:(id)arg1;
- (_Bool)checkIfDownloadFinishedWithBookId:(id)arg1;
- (id)getDownloadCountsByBookID:(id)arg1;
- (id)getPartIDNumbersOfDownloadPartsByBookID:(id)arg1;
- (_Bool)isPartFinishByBookID:(id)arg1 partID:(id)arg2;
- (id)getPagesFileNameByBookID:(id)arg1 partID:(id)arg2;
- (id)queryAllForDownloadingOrFailedPages;
- (id)batchQueuePagedownloadsByBookID:(id)arg1 partIDs:(id)arg2;
- (id)queryAllDownloadingPages;
- (_Bool)pageEndByBookID:(id)arg1 partID:(id)arg2 pageID:(id)arg3 stautus:(int)arg4 isPartFinish:(_Bool *)arg5 isPartFail:(_Bool *)arg6;
- (void)createComicPageDownloadTable;
- (id)queryDownloadPartsByBookID:(id)arg1 isAll:(_Bool)arg2 isFinish:(_Bool)arg3;
- (_Bool)isPartDownloadingOrDownloadedByBookID:(id)arg1 partID:(id)arg2;
- (id)queryDownloadPartsByBookID:(id)arg1 isFinish:(_Bool)arg2;
- (id)queryDownloadPartsByBookID:(id)arg1;
- (_Bool)checkHasDownloadingPartWithBookId:(id)arg1;
- (id)resumeDBTasksByBookID:(id)arg1 partIDs:(id)arg2;
- (_Bool)deleteDBTasksByBookID:(id)arg1 partIDs:(id)arg2;
- (_Bool)updateBatchPartStatusByBookID:(id)arg1 partIDs:(id)arg2 stautus:(int)arg3;
- (_Bool)updatePartStatusByBookID:(id)arg1 partID:(id)arg2 stautus:(int)arg3;
- (_Bool)onUrlsSuccessByBookID:(id)arg1 partID:(id)arg2 pages:(id)arg3;
- (_Bool)tryUpdatePartPageCountByBookID:(id)arg1 partId:(id)arg2 pageCount:(long long)arg3;
- (_Bool)tryUpdatePartUrlDownloadByBookID:(id)arg1 parts:(id)arg2;
- (void)createComicDownloadChapterTable;
- (id)queryDownloadingBookIds;
- (_Bool)deleteDownloadBookByBookID:(id)arg1;
- (_Bool)tryUpdateBookDownload:(id)arg1;
- (void)createComicDownloadBookTable;
- (void)deleteForumWithBlocks:(id)arg1;
- (void)updateSortedForumPlates:(id)arg1;
- (id)sortedForumPlates;
- (void)createForumPlatesTable;
- (void)resetAllUrlStatusLog;
- (void)updateUrlStatusWithUrlType:(id)arg1 switchOn:(_Bool)arg2;
- (_Bool)isUrlStatusOnWithUrlType:(id)arg1;
- (id)allTestUrlStatusLogs;
- (void)createTestUrlStatusTable;
- (void)clearShortageSearchHistoryItems;
- (void)addShortageSearchHistoryItem:(id)arg1;
- (id)allShortageSearchHistoryItems;
- (void)createShortageSearchHistoryTable;
- (void)clearMonthOnlySearchHistoryItems;
- (void)addMonthOnlySearchHistoryItem:(id)arg1;
- (id)allMonthOnlySearchHistoryItems;
- (void)createMonthOnlySearchHistoryTable;
- (void)clearNormalSearchHistoryItems;
- (void)addNormalSearchHistoryItem:(id)arg1;
- (id)allNormalSearchHistoryItems;
- (void)createNormalSearchHistoryTable;
- (void)updateHotRecommendItems:(id)arg1;
- (id)allHotRecommendItems;
- (void)createhotRecommendBookTable;
- (void)updateHotSearchItems:(id)arg1;
- (id)allHotSearchItems;
- (void)createHotSearchTable;
- (void)deleteLocalReadingHistoryLogWithBookIds:(id)arg1;
- (void)deleteAllLocalReadingHistory;
- (void)addLocalReadingHistoryLogs:(id)arg1;
- (id)allLocalReadingHistoryLogs;
- (void)createLocalReadingHistoryTable;
- (void)deleteServerReadingLogWithBookIds:(id)arg1;
- (void)addServerReadingLogs:(id)arg1;
- (id)anonymousServerReadingLogs;
- (id)serverReadingLogWithBookId:(id)arg1;
- (void)createServerReadingLogTable;
- (void)deleteFailedReadingLogWithBookIds:(id)arg1 ignoreUser:(_Bool)arg2;
- (void)addFailedUploadLogs:(id)arg1;
- (id)allFailedUploadLogs;
- (void)createFailedUploadReadingLogTable;
- (id)logsFromSql:(id)arg1;
- (id)allLogs;
- (void)deleteErrorLogWithIds:(id)arg1;
- (void)addErrorLog:(id)arg1;
- (void)createErrorLogTable;
- (void)deleteBooklistCollectLog:(id)arg1;
- (_Bool)isCollectedBooklist:(id)arg1;
- (void)insertBooklistCollectLog:(id)arg1;
- (void)clearVoiceHistory;
- (id)getAllVoiceHistory;
- (void)deleteVoiceHistoryByAlbumID:(long long)arg1;
- (void)insertVoiceHistoryItem:(id)arg1;
- (void)removeVoiceBook:(id)arg1;
- (void)resetAllAdStatusLog;
- (void)updateAdStatusWithResourceTag:(int)arg1 positionTag:(int)arg2 switchOn:(_Bool)arg3;
- (_Bool)isAdStatusOnWithResourceTag:(int)arg1 positionTag:(int)arg2;
- (id)allAdStatusLogs;
- (void)deleteMyLocalGameWithGameIds:(id)arg1;
- (void)updateMyLocalGameListWithItem:(id)arg1;
- (id)myLocalGameList;
- (id)getLocalRewardItem;
- (void)setLocalRewardItem:(id)arg1;
- (void)removeLocalNativeAdWithPlacement:(id)arg1;
- (id)getLocalNativeAd;
- (void)setLocalNativeAd:(id)arg1 withPlacement:(id)arg2;
- (void)createNativeAdLog;
- (void)deleteSplashWithItems:(id)arg1;
- (void)deleteAllSplashes;
- (void)updateSplashDisplayCountWithItem:(id)arg1;
- (void)updateSplashDataWithItems:(id)arg1;
- (id)getSplashItemWithId:(id)arg1;
- (id)getAllSplashes;
- (void)createSplashAdLog;
- (void)deleteRecommendBookByBookId:(id)arg1;
- (id)getRecommendBookLog;
- (void)addRecommendBookLogWithBookIds:(id)arg1;
- (id)getBookRenovateLog;
- (void)addBookRenovateLogWithBookIds:(id)arg1 status:(int)arg2;
- (void)updateReceiptLogWithTransactionId:(id)arg1 status:(long long)arg2;
- (id)unsentReceiptLogs;
- (id)allReceiptLogs;
- (void)insertReceiptLogWithUserId:(id)arg1 transactionId:(id)arg2 receipt:(id)arg3 productId:(id)arg4 status:(long long)arg5;
- (_Bool)bookResourceHasBeenUpdated:(id)arg1;
- (void)updateBookResourceTagWithBookIds:(id)arg1 hasUpdate:(_Bool)arg2;
- (void)insertForwardLikeLog:(id)arg1 withUid:(id)arg2;
- (_Bool)userForwardLogExist:(id)arg1 withUid:(id)arg2;
- (void)deleteFollowedLogWithUserId:(id)arg1;
- (_Bool)detectUserHasFollowedWithUserId:(id)arg1;
- (void)insertFollowedLogWithUserId:(id)arg1;
- (void)updateBookDownloadStatusWithBookId:(id)arg1 status:(id)arg2;
- (void)initializeBookDownloadStatus;
- (id)getBookDownloadStatus;
- (void)deleteFeedBookByBookIds:(id)arg1 withSyncLog:(_Bool)arg2;
- (void)addFeedBookWithBookItems:(id)arg1 withSyncLog:(_Bool)arg2;
- (void)updateFeedBookWithBookId:(id)arg1 withChapterCount:(long long)arg2 withFeededChapterCount:(long long)arg3;
- (id)getAllFeedBooks;
- (id)getAllFeedBookIds;
- (_Bool)bookHasFeeded:(id)arg1;
- (void)insertTopicLastReadTimeLog:(id)arg1;
- (void)insertUserLikeLog:(id)arg1 withUid:(id)arg2;
- (_Bool)userLikeLogExist:(id)arg1 withUid:(id)arg2;
- (void)insertTopicVoteLog:(id)arg1 votedNo:(long long)arg2 uid:(id)arg3;
- (long long)getTopicVoteLog:(id)arg1 uid:(id)arg2;
- (void)updateLastUsedResourceNameWithBookId:(id)arg1 resourceName:(id)arg2;
- (id)getLastUsedResourceNameWithBookId:(id)arg1;
- (id)getLastReadInfoFromMixReadingWithBookId:(id)arg1;
- (void)updateMixReadingLastRead:(id)arg1 chapterItem:(id)arg2 chapterNum:(id)arg3 pageNum:(id)arg4 optimizeSource:(id)arg5 optimizeSourceId:(id)arg6;
- (id)getLastReadInfoFromCpSourceReadingWithBookId:(id)arg1 resourceName:(id)arg2;
- (void)updateCpSourceReadingLastRead:(id)arg1 chapterName:(id)arg2 chapterLink:(id)arg3 chapterNum:(id)arg4 pageNum:(id)arg5 source:(id)arg6;
- (id)getOldOptimizeModeLastReadResourceId:(id)arg1;
- (id)getLastReadInfoFromOldOptimizeMode:(id)arg1 sourceId:(id)arg2;
- (_Bool)bookAllowPirateResource:(id)arg1;
- (_Bool)bookAllowPirateReading:(id)arg1;
- (void)deleteBookByBookId:(id)arg1 withSync:(_Bool)arg2;
- (void)updateBookSortType:(id)arg1;
- (_Bool)needOrderByVisit;
- (long long)getCompareResultWithFirstItem:(id)arg1 secondItem:(id)arg2;
- (id)booksFromResult:(id)arg1 needsSort:(_Bool)arg2;
- (id)getAllZhuiShuBooksFromBookshelf;
- (id)getAllBooksFromBookshelf;
- (id)getAllBookIdsFromBookshelfWithoutVoiceBook;
- (id)getAllBookIdsNotFeededNotSoundBook;
- (_Bool)bookHasAdded:(id)arg1;
- (unsigned long long)getBookTopicCountWithBookId:(id)arg1;
- (void)updateBookStatusWithBookItems:(id)arg1;
- (void)updateBookTopicCount:(unsigned long long)arg1 withBookId:(id)arg2;
- (void)updateBookVisitTimeWithBookId:(id)arg1;
- (void)updateBookRecordUpdateTimeWithBookId:(id)arg1 withUpdateTime:(id)arg2;
- (void)updateBookAuthorWithBookItem:(id)arg1;
- (void)updateBookStickStatusWithBookId:(id)arg1 stickStatus:(id)arg2;
- (void)updateBookshelf:(id)arg1 lastChapter:(id)arg2 bookId:(id)arg3 haveUpdate:(id)arg4;
- (id)bookItemWithBookId:(id)arg1;
- (_Bool)insertBookItem:(id)arg1 intoDataBase:(id)arg2;
- (void)insertBookByBookItems:(id)arg1;
- (void)insertBookByBookItem:(id)arg1 withSync:(_Bool)arg2;
- (_Bool)checkFieldExistWithTableName:(id)arg1 fieldName:(id)arg2 db:(id)arg3;
- (void)createTable;
- (id)dataFilePath;
- (id)init;

@end

