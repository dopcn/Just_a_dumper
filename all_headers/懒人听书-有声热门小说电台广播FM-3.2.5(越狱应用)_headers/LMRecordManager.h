//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "AVAudioPlayerDelegate-Protocol.h"
#import "LMRecordingDelegate-Protocol.h"

@class AVAudioPlayer, LMMp3Encoder, LMRecorder, NSString, NSTimer;

@interface LMRecordManager : NSObject <AVAudioPlayerDelegate, LMRecordingDelegate>
{
    struct OpaqueAudioQueue *_audioQueue;
    struct AudioQueueLevelMeterState *_levelMeterStates;
    int _channelCount;
    CDUnknownBlockType _meterActionBlock;
    CDUnknownBlockType _timingBlk;
    CDUnknownBlockType _playingBlk;
    double _refreshInterval;
    NSString *_audioFilePath;
    LMRecorder *_recorder;
    LMMp3Encoder *_mp3Encoder;
    NSTimer *_recordingTimer;
    NSTimer *_playingTimer;
    NSTimer *_meterRefreshtTimer;
    double _playingTime;
    double _duration;
    AVAudioPlayer *_recordPlayer;
}

+ (float)volumeForLevelMeterStates:(id)arg1;
+ (id)shareRecordManager;
@property(retain, nonatomic) AVAudioPlayer *recordPlayer; // @synthesize recordPlayer=_recordPlayer;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) double playingTime; // @synthesize playingTime=_playingTime;
@property(nonatomic) int channelCount; // @synthesize channelCount=_channelCount;
@property(retain, nonatomic) NSTimer *meterRefreshtTimer; // @synthesize meterRefreshtTimer=_meterRefreshtTimer;
@property(retain, nonatomic) NSTimer *playingTimer; // @synthesize playingTimer=_playingTimer;
@property(retain, nonatomic) NSTimer *recordingTimer; // @synthesize recordingTimer=_recordingTimer;
@property(retain, nonatomic) LMMp3Encoder *mp3Encoder; // @synthesize mp3Encoder=_mp3Encoder;
@property(retain, nonatomic) LMRecorder *recorder; // @synthesize recorder=_recorder;
@property(copy, nonatomic) NSString *audioFilePath; // @synthesize audioFilePath=_audioFilePath;
@property(nonatomic) double refreshInterval; // @synthesize refreshInterval=_refreshInterval;
@property(copy, nonatomic) CDUnknownBlockType playingBlk; // @synthesize playingBlk=_playingBlk;
@property(copy, nonatomic) CDUnknownBlockType timingBlk; // @synthesize timingBlk=_timingBlk;
@property(copy, nonatomic) CDUnknownBlockType meterActionBlock; // @synthesize meterActionBlock=_meterActionBlock;
- (void).cxx_destruct;
- (void)shareToThirdPartyWithObj:(id)arg1 andShareFlag:(long long)arg2;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (void)recordReceiveError:(id)arg1;
- (void)recordingReceiveData:(id)arg1 withRecorder:(id)arg2 inAQ:(struct OpaqueAudioQueue *)arg3 inStartTime:(const struct AudioTimeStamp *)arg4 inNumPackets:(unsigned int)arg5 inPacketDesc:(const struct AudioStreamPacketDescription *)arg6;
- (void)recordingDidFinish:(id)arg1;
- (void)recordingDidBegin:(id)arg1;
- (void)postPubilshAudioNoticeWithTitle:(id)arg1 andContent:(id)arg2 groupId:(long long)arg3 fileId:(long long)arg4 resutl:(_Bool)arg5 republish:(_Bool)arg6;
- (void)savePublishAudioToLocalWithTitle:(id)arg1 andContent:(id)arg2 groupId:(long long)arg3 fileId:(long long)arg4 audionSecondCount:(long long)arg5;
- (void)postRecordingWithTitle:(id)arg1 andContent:(id)arg2 groupId:(long long)arg3 andFilePath:(id)arg4 andAudioSecondCount:(long long)arg5 andShareIndex:(long long)arg6 andRepublish:(_Bool)arg7;
- (void)checkPublishInfoValidWithTitle:(id)arg1 andContent:(id)arg2 groupId:(long long)arg3 result:(CDUnknownBlockType)arg4;
- (void)deleteMp3File;
- (void)recordPlayStop;
- (void)recordPlayPause;
- (void)recordPlay;
- (void)recordStop;
- (void)recordStart;
- (void)showPlayingTime;
- (void)playTimerStop;
- (void)playTimerStart;
- (void)showRecordingTime;
- (void)timerStop;
- (void)timerStart;
- (void)refresh;
@property struct OpaqueAudioQueue *audioQueue;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

