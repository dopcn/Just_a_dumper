//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "STKDataSourceDelegate-Protocol.h"

@class NSArray, NSConditionLock, NSMutableArray, NSRunLoop, NSString, NSThread, STKQueueEntry;
@protocol STKAudioPlayerDelegate;

@interface STKAudioPlayer : NSObject <STKDataSourceDelegate>
{
    _Bool muted;
    char *readBuffer;
    int readBufferSize;
    int internalState;
    float volume;
    float peakPowerDb[2];
    float averagePowerDb[2];
    _Bool meteringEnabled;
    _Bool equalizerOn;
    _Bool equalizerEnabled;
    CDStruct_b4080ae6 options;
    NSMutableArray *converterNodes;
    struct OpaqueAUGraph *audioGraph;
    int eqNode;
    int mixerNode;
    int outputNode;
    int eqInputNode;
    int eqOutputNode;
    int mixerInputNode;
    int mixerOutputNode;
    struct OpaqueAudioComponentInstance *eqUnit;
    struct OpaqueAudioComponentInstance *mixerUnit;
    struct OpaqueAudioComponentInstance *outputUnit;
    unsigned int eqBandCount;
    int waitingForDataAfterSeekFrameCount;
    unsigned int framesRequiredToStartPlaying;
    unsigned int framesRequiredToPlayAfterRebuffering;
    unsigned int framesRequiredBeforeWaitingForDataAfterSeekBecomesPlaying;
    STKQueueEntry *currentlyPlayingEntry;
    STKQueueEntry *currentlyReadingEntry;
    NSMutableArray *upcomingQueue;
    NSMutableArray *bufferingQueue;
    int pcmBufferSpinLock;
    int internalStateLock;
    unsigned int pcmBufferTotalFrameCount;
    unsigned int pcmBufferFrameStartIndex;
    unsigned int pcmBufferUsedFrameCount;
    unsigned int pcmBufferFrameSizeInBytes;
    struct AudioBuffer *pcmAudioBuffer;
    struct AudioBufferList pcmAudioBufferList;
    struct OpaqueAudioConverter *audioConverterRef;
    struct AudioStreamBasicDescription audioConverterAudioStreamBasicDescription;
    _Bool deallocating;
    _Bool discontinuous;
    NSArray *frameFilters;
    NSThread *playbackThread;
    NSRunLoop *playbackThreadRunLoop;
    struct OpaqueAudioFileStreamID *audioFileStream;
    NSConditionLock *threadStartedLock;
    NSConditionLock *threadFinishedCondLock;
    CDUnknownBlockType stopBackBackgroundTaskBlock;
    int seekVersion;
    int seekLock;
    int currentEntryReferencesLock;
    struct _opaque_pthread_mutex_t playerMutex;
    struct _opaque_pthread_cond_t playerThreadReadyCondition;
    struct _opaque_pthread_mutex_t mainThreadSyncCallMutex;
    struct _opaque_pthread_cond_t mainThreadSyncCallReadyCondition;
    _Bool waiting;
    double requestedSeekTime;
    _Bool disposeWasRequested;
    _Bool seekToTimeWasRequested;
    int stopReason;
    int _state;
    int _stateBeforePaused;
    id <STKAudioPlayerDelegate> _delegate;
}

+ (id)dataSourceFromURL:(id)arg1;
+ (void)initialize;
@property int stateBeforePaused; // @synthesize stateBeforePaused=_stateBeforePaused;
@property __weak id <STKAudioPlayerDelegate> delegate; // @synthesize delegate=_delegate;
@property int state; // @synthesize state=_state;
- (void).cxx_destruct;
@property _Bool equalizerEnabled;
@property float volume;
- (void)addFrameFilter:(CDUnknownBlockType)arg1 withName:(id)arg2 afterFilterWithName:(id)arg3;
- (void)addFrameFilterWithName:(id)arg1 afterFilterWithName:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)removeFrameFilterWithName:(id)arg1;
- (void)appendFrameFilterWithName:(id)arg1 block:(CDUnknownBlockType)arg2;
@property(readonly) NSArray *frameFilters;
@property _Bool meteringEnabled;
- (float)averagePowerInDecibelsForChannel:(unsigned long long)arg1;
- (float)peakPowerInDecibelsForChannel:(unsigned long long)arg1;
@property(readonly) NSObject *mostRecentlyQueuedStillPendingItem;
@property(readonly) unsigned long long pendingQueueCount;
@property(readonly) NSArray *pendingQueue;
- (void)handleAudioPackets:(const void *)arg1 numberBytes:(unsigned int)arg2 numberPackets:(unsigned int)arg3 packetDescriptions:(struct AudioStreamPacketDescription *)arg4;
- (void)stopAudioUnitWithReason:(int)arg1;
- (_Bool)startAudioGraph;
- (_Bool)audioGraphIsRunning;
- (void)connectGraph;
- (void)createAudioGraph;
- (void)setOutputCallbackForFirstNode:(int)arg1 firstUnit:(struct OpaqueAudioComponentInstance *)arg2;
- (void)connectNodes:(int)arg1 desNode:(int)arg2 srcUnit:(struct OpaqueAudioComponentInstance *)arg3 desUnit:(struct OpaqueAudioComponentInstance *)arg4;
- (int)createConverterNode:(struct AudioStreamBasicDescription)arg1 desFormat:(struct AudioStreamBasicDescription)arg2;
- (void)setGain:(float)arg1 forEqualizerBand:(int)arg2;
- (void)createEqUnit;
- (void)createMixerUnit;
- (void)createOutputUnit;
- (void)createAudioConverter:(struct AudioStreamBasicDescription *)arg1;
- (void)destroyAudioConverter;
- (id)currentlyPlayingQueueItemId;
- (void)dispose;
- (void)unmute;
- (void)mute;
@property _Bool muted;
- (void)stopThread;
- (void)stop;
- (void)resetPcmBuffers;
- (void)resume;
- (void)pause;
- (void)dataSourceEof:(id)arg1;
- (void)dataSourceErrorOccured:(id)arg1;
- (void)dataSourceDataAvailable:(id)arg1;
- (void)processSeekToTime;
- (void)startInternal;
- (_Bool)processRunloop;
- (void)requeueBufferingEntries;
- (void)playbackThreadQueueMainThreadSyncBlock:(CDUnknownBlockType)arg1;
- (void)dispatchSyncOnMainThread:(CDUnknownBlockType)arg1;
- (void)processFinishPlayingIfAnyAndPlayingNext:(id)arg1 withNext:(id)arg2;
- (void)setCurrentlyReadingEntry:(id)arg1 andStartPlaying:(_Bool)arg2 clearQueue:(_Bool)arg3;
- (void)setCurrentlyReadingEntry:(id)arg1 andStartPlaying:(_Bool)arg2;
- (void)audioQueueFinishedPlaying:(id)arg1;
- (void)createPlaybackThread;
- (void)seekToTime:(double)arg1;
- (void)wakeupPlaybackThread;
- (_Bool)invokeOnPlaybackThread:(CDUnknownBlockType)arg1;
@property(readonly) double progress;
@property(readonly) double duration;
- (void)unexpectedError:(int)arg1;
- (double)currentTimeInFrames;
- (void)handlePropertyChangeForFileStream:(struct OpaqueAudioFileStreamID *)arg1 fileStreamPropertyID:(unsigned int)arg2 ioFlags:(unsigned int *)arg3;
- (void)queueDataSource:(id)arg1 withQueueItemId:(id)arg2;
- (void)queueURL:(id)arg1 withQueueItemId:(id)arg2;
- (void)queueURL:(id)arg1;
- (void)queue:(id)arg1 withQueueItemId:(id)arg2;
- (void)queue:(id)arg1;
- (void)setDataSource:(id)arg1 withQueueItemId:(id)arg2;
- (void)playDataSource:(id)arg1 withQueueItemID:(id)arg2;
- (void)playDataSource:(id)arg1;
- (void)playURL:(id)arg1 withQueueItemID:(id)arg2;
- (void)playURL:(id)arg1;
- (void)play:(id)arg1 withQueueItemID:(id)arg2;
- (void)play:(id)arg1;
- (void)clearQueue;
- (void)stopSystemBackgroundTask;
- (void)startSystemBackgroundTask;
- (void)dealloc;
- (void)destroyAudioResources;
- (id)initWithOptions:(CDStruct_b4080ae6)arg1;
- (id)init;
- (void)logInfo:(id)arg1;
@property(readonly) int stopReason;
- (void)setInternalState:(int)arg1 ifInState:(CDUnknownBlockType)arg2;
@property int internalState;
@property(readonly) CDStruct_b4080ae6 options;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

