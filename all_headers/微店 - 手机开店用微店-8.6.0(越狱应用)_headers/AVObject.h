//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCoding-Protocol.h"

@class AVACL, AVRequestManager, AVRequestOperationQueue, NSDate, NSMutableDictionary, NSRecursiveLock, NSString;

@interface AVObject : NSObject <NSCoding>
{
    _Bool _isPointer;
    _Bool _running;
    _Bool _fetchWhenSave;
    _Bool _submit;
    _Bool _inSetter;
    _Bool _hasDataForCloud;
    _Bool _hasDataForInitial;
    NSString *_uuid;
    AVRequestOperationQueue *_operationQueue;
    NSRecursiveLock *_requestLock;
    NSString *_objectId;
    NSDate *_updatedAt;
    NSDate *_createdAt;
    NSString *_className;
    AVACL *_ACL;
    NSMutableDictionary *_localData;
    NSMutableDictionary *_estimatedData;
    NSMutableDictionary *_relationData;
    AVRequestManager *_requestManager;
}

+ (id)objectWithDictionary:(id)arg1;
+ (void)internalDeleteAllInBackground:(id)arg1 block:(CDUnknownBlockType)arg2;
+ (void)deleteAllInBackground:(id)arg1 block:(CDUnknownBlockType)arg2;
+ (_Bool)deleteAll:(id)arg1 error:(id *)arg2;
+ (_Bool)deleteAll:(id)arg1;
+ (_Bool)isValidObjects:(id)arg1 error:(id *)arg2;
+ (void)fetchAllIfNeededInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
+ (void)fetchAllIfNeededInBackground:(id)arg1 block:(CDUnknownBlockType)arg2;
+ (void)fetchAllInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
+ (void)fetchAllInBackground:(id)arg1 block:(CDUnknownBlockType)arg2;
+ (_Bool)fetchAll:(id)arg1 error:(id *)arg2 checkIfNeed:(_Bool)arg3;
+ (_Bool)fetchAllIfNeeded:(id)arg1 error:(id *)arg2;
+ (void)fetchAllIfNeeded:(id)arg1;
+ (_Bool)fetchAll:(id)arg1 error:(id *)arg2;
+ (void)fetchAll:(id)arg1;
+ (void)saveAllInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
+ (void)saveAllInBackground:(id)arg1 block:(CDUnknownBlockType)arg2;
+ (void)saveAllInBackground:(id)arg1;
+ (_Bool)saveAll:(id)arg1 error:(id *)arg2;
+ (_Bool)saveDescendantRequestsOfObjects:(id)arg1 error:(id *)arg2;
+ (_Bool)saveDescendantFileOfObjects:(id)arg1 error:(id *)arg2;
+ (_Bool)postBatchRequests:(id)arg1 forObjects:(id)arg2 error:(id *)arg3;
+ (id)reduceObjectsFromArray:(id)arg1 count:(long long)arg2;
+ (id)descendantFilesOfObjects:(id)arg1;
+ (_Bool)saveAll:(id)arg1;
+ (id)invalidKeys;
+ (void)setConvertingNullToNil:(_Bool)arg1;
+ (id)parseClassName;
+ (id)objectWithClassName:(id)arg1 dictionary:(id)arg2;
+ (id)objectWithoutDataWithClassName:(id)arg1 objectId:(id)arg2;
+ (id)objectWithClassName:(id)arg1 objectId:(id)arg2;
+ (id)objectWithClassName:(id)arg1;
+ (id)objectWithoutDataWithObjectId:(id)arg1;
+ (id)objectWithObjectId:(id)arg1;
+ (void)synthesizeWithGetterName:(id)arg1 type:(BOOL)arg2 isCopy:(_Bool)arg3;
+ (id)query;
+ (void)registerSubclass;
+ (id)object;
@property(nonatomic) _Bool hasDataForInitial; // @synthesize hasDataForInitial=_hasDataForInitial;
@property(nonatomic) _Bool hasDataForCloud; // @synthesize hasDataForCloud=_hasDataForCloud;
@property(nonatomic) _Bool inSetter; // @synthesize inSetter=_inSetter;
@property(nonatomic) _Bool submit; // @synthesize submit=_submit;
@property(retain, nonatomic) AVRequestManager *requestManager; // @synthesize requestManager=_requestManager;
@property(retain, nonatomic) NSMutableDictionary *relationData; // @synthesize relationData=_relationData;
@property(retain, nonatomic) NSMutableDictionary *estimatedData; // @synthesize estimatedData=_estimatedData;
@property(retain, nonatomic) NSMutableDictionary *localData; // @synthesize localData=_localData;
@property(nonatomic) _Bool fetchWhenSave; // @synthesize fetchWhenSave=_fetchWhenSave;
@property(retain, nonatomic) AVACL *ACL; // @synthesize ACL=_ACL;
@property(copy, nonatomic) NSString *className; // @synthesize className=_className;
@property(retain, nonatomic) NSDate *createdAt; // @synthesize createdAt=_createdAt;
@property(retain, nonatomic) NSDate *updatedAt; // @synthesize updatedAt=_updatedAt;
@property(copy, nonatomic) NSString *objectId; // @synthesize objectId=_objectId;
@property(nonatomic) _Bool running; // @synthesize running=_running;
@property(retain, nonatomic) AVRequestOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic) _Bool isPointer; // @synthesize isPointer=_isPointer;
- (void).cxx_destruct;
- (void)removeLocalData;
- (void)objectFromDictionary:(id)arg1;
- (id)dictionaryForObject;
- (_Bool)isEqual:(id)arg1;
- (_Bool)hasValidObjectId;
- (_Bool)moveIfNeedWithKey:(id)arg1 from:(id)arg2 to:(id)arg3;
- (id)myObjectPath;
- (id)headerMap;
- (id)jsonDataForCloudWithClear:(_Bool)arg1;
- (id)dataForCloudWithVisitedObjects:(id)arg1;
- (id)dataForCloud;
- (void)refreshHasDataForCloud:(id)arg1;
- (void)refreshHasDataForCloud;
- (id)requestFromBody:(id)arg1;
- (void)addDefaultACL:(id)arg1;
- (void)addInternalId:(id)arg1;
- (void)addChildrenIfExist:(id)arg1;
- (id)postData;
- (void)addAclIfExist:(id)arg1;
- (void)deleteEventuallyWithBlock:(CDUnknownBlockType)arg1;
- (void)deleteEventually;
- (void)deleteInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2;
- (void)internalDeleteWithEventually:(_Bool)arg1 block:(CDUnknownBlockType)arg2;
- (void)deleteInBackgroundWithBlock:(CDUnknownBlockType)arg1;
- (void)deleteInBackground;
- (_Bool)deleteAndThrowsWithError:(id *)arg1;
- (_Bool)delete:(id *)arg1;
- (_Bool)delete;
- (void)postDelete;
- (void)fetchIfNeededInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2;
- (void)fetchIfNeededInBackgroundWithBlock:(CDUnknownBlockType)arg1;
- (void)fetchInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2;
- (void)internalFetchInBackgroundWithKeys:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)handleFetchResult:(id)arg1 error:(id *)arg2;
- (void)fetchInBackgroundWithKeys:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)fetchInBackgroundWithBlock:(CDUnknownBlockType)arg1;
- (id)fetchIfNeededWithKeys:(id)arg1 error:(id *)arg2;
- (id)fetchIfNeededWithKeys:(id)arg1;
- (id)fetchIfNeededAndThrowsWithError:(id *)arg1;
- (id)fetchIfNeeded:(id *)arg1;
- (id)fetchIfNeeded;
- (_Bool)fetchWithKeys:(id)arg1 error:(id *)arg2;
- (void)fetchWithKeys:(id)arg1;
- (_Bool)fetchAndThrowsWithError:(id *)arg1;
- (_Bool)fetch:(id *)arg1;
- (_Bool)fetch;
- (void)refreshInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2;
- (_Bool)refreshWithBlock:(CDUnknownBlockType)arg1 keys:(id)arg2 waitUntilDone:(_Bool)arg3 error:(id *)arg4;
- (void)refreshInBackgroundWithKeys:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)refreshInBackgroundWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)refreshAndThrowsWithError:(id *)arg1;
- (_Bool)refresh:(id *)arg1;
- (void)refreshWithKeys:(id)arg1;
- (void)refresh;
- (_Bool)isDataAvailable;
- (id)descendantFiles;
- (void)iterateDescendantObjectsWithBlock:(CDUnknownBlockType)arg1;
- (void)iteratePropertiesWithBlock:(CDUnknownBlockType)arg1 withAccessed:(id)arg2;
- (void)saveEventually:(CDUnknownBlockType)arg1;
- (void)saveEventually;
- (void)saveInBackgroundWithOption:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
- (void)saveInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2;
- (id)myParams;
- (void)copyByUUIDFromDictionary:(id)arg1 visitedObjects:(id)arg2;
- (void)copyByUUIDFromDictionary:(id)arg1;
- (void)iterateLocalDataWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)sendBatchRequest:(id)arg1 eventually:(_Bool)arg2 error:(id *)arg3;
- (id)searchObjectByInternalId:(id)arg1 visitedObjects:(id)arg2;
- (id)searchObjectByInternalId:(id)arg1;
- (id)buildSaveRequests;
- (_Bool)shouldIncludeUpdateRequests;
- (id)saveNewFiles;
- (id)allAttachedDirtyFiles;
- (id)initialRequestPath;
- (id)initialRequestMethod;
- (void)addInitialSaveRequest:(id)arg1 visitedObjects:(id)arg2;
- (void)addInitialSaveRequest:(id)arg1;
- (void)refreshHasDataForInitial:(id)arg1;
- (void)refreshHasDataForInitial;
- (id)initialBodyData;
- (void)postSave;
- (id)preSave;
- (void)saveInBackgroundWithOption:(id)arg1 eventually:(_Bool)arg2 block:(CDUnknownBlockType)arg3;
- (void)saveInBackgroundWithOption:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)saveInBackgroundWithBlock:(CDUnknownBlockType)arg1;
- (void)saveInBackground;
- (void)postProcessBatchRequests:(id)arg1;
- (void)applySaveOption:(id)arg1 toRequests:(id)arg2;
- (id)validateSaveOption:(id)arg1;
- (_Bool)saveWithOption:(id)arg1 eventually:(_Bool)arg2 verifyBefore:(_Bool)arg3 error:(id *)arg4;
- (_Bool)saveWithOption:(id)arg1 eventually:(_Bool)arg2 error:(id *)arg3;
- (_Bool)saveWithOption:(id)arg1 error:(id *)arg2;
- (_Bool)saveAndThrowsWithError:(id *)arg1;
- (_Bool)save:(id *)arg1;
- (_Bool)save;
- (void)addSetRequest:(id)arg1 object:(id)arg2;
- (void)incrementKey:(id)arg1 byAmount:(id)arg2;
- (void)incrementKey:(id)arg1;
- (_Bool)moveToEstimated:(id)arg1;
- (void)removeObjectsInArray:(id)arg1 forKey:(id)arg2;
- (void)removeObject:(id)arg1 forKey:(id)arg2;
- (void)addUniqueObjectsFromArray:(id)arg1 forKey:(id)arg2;
- (void)addUniqueObject:(id)arg1 forKey:(id)arg2;
- (void)addObjectsFromArray:(id)arg1 forKey:(id)arg2;
- (void)addObject:(id)arg1 forKey:(id)arg2;
- (_Bool)addObject:(id)arg1 forKey:(id)arg2 unique:(_Bool)arg3;
- (id)createArrayForKey:(id)arg1;
- (id)findArrayForKey:(id)arg1 inDictionary:(id)arg2 create:(_Bool)arg3;
- (id)childClassNameForRelation:(id)arg1;
- (id)relationForKey:(id)arg1;
- (id)relationforKey:(id)arg1;
- (id)internalClassName;
- (void)removeRelation:(id)arg1 forKey:(id)arg2;
- (void)addRelation:(id)arg1 forKey:(id)arg2 submit:(_Bool)arg3;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2 submit:(_Bool)arg3;
- (void)updateValue:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (id)allKeys;
- (id)allArray;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithClassName:(id)arg1;
- (id)init;
@property(readonly, nonatomic) NSRecursiveLock *requestLock; // @synthesize requestLock=_requestLock;
@property(readonly, copy, nonatomic) NSString *uuid; // @synthesize uuid=_uuid;
- (id)description;
- (id)snapshot;
- (_Bool)isDirty;
- (void)setValue:(id)arg1 forKey:(id)arg2;

@end

