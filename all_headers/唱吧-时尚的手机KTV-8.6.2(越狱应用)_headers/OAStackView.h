//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

@class NSArray, NSMutableArray, OAStackViewAlignmentStrategy, OAStackViewDistributionStrategy;

@interface OAStackView : UIView
{
    _Bool _layoutMarginsRelativeArrangement;
    _Bool _baselineRelativeArrangement;
    long long _axis;
    long long _axisValue;
    double _spacing;
    long long _alignment;
    long long _alignmentValue;
    long long _distribution;
    long long _distributionValue;
    NSMutableArray *_mutableArrangedSubviews;
    OAStackViewAlignmentStrategy *_alignmentStrategy;
    OAStackViewDistributionStrategy *_distributionStrategy;
    struct UIEdgeInsets _layoutMargins;
}

+ (Class)layerClass;
@property(nonatomic, getter=isBaselineRelativeArrangement) _Bool baselineRelativeArrangement; // @synthesize baselineRelativeArrangement=_baselineRelativeArrangement;
@property(retain, nonatomic) OAStackViewDistributionStrategy *distributionStrategy; // @synthesize distributionStrategy=_distributionStrategy;
@property(retain, nonatomic) OAStackViewAlignmentStrategy *alignmentStrategy; // @synthesize alignmentStrategy=_alignmentStrategy;
@property(retain, nonatomic) NSMutableArray *mutableArrangedSubviews; // @synthesize mutableArrangedSubviews=_mutableArrangedSubviews;
@property(nonatomic, getter=isLayoutMarginsRelativeArrangement) _Bool layoutMarginsRelativeArrangement; // @synthesize layoutMarginsRelativeArrangement=_layoutMarginsRelativeArrangement;
@property(nonatomic) struct UIEdgeInsets layoutMargins; // @synthesize layoutMargins=_layoutMargins;
@property(nonatomic) long long distributionValue; // @synthesize distributionValue=_distributionValue;
@property(nonatomic) long long distribution; // @synthesize distribution=_distribution;
@property(nonatomic) long long alignmentValue; // @synthesize alignmentValue=_alignmentValue;
@property(nonatomic) long long alignment; // @synthesize alignment=_alignment;
@property(nonatomic) double spacing; // @synthesize spacing=_spacing;
@property(nonatomic) long long axisValue; // @synthesize axisValue=_axisValue;
@property(nonatomic) long long axis; // @synthesize axis=_axis;
- (void).cxx_destruct;
- (void)addViewsAsSubviews:(id)arg1;
- (void)layoutArrangedViews;
- (void)unHideView:(id)arg1;
- (void)hideView:(id)arg1;
- (void)removeViewFromArrangedViews:(id)arg1 permanently:(_Bool)arg2;
- (void)insertArrangedSubview:(id)arg1 atIndex:(unsigned long long)arg2 newItem:(_Bool)arg3;
- (void)insertArrangedSubview:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeArrangedSubview:(id)arg1;
- (void)addArrangedSubview:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)setDistributionConstraints;
- (void)layoutSubviews;
- (void)updateConstraints;
- (void)removeConstraints:(id)arg1;
- (void)removeConstraint:(id)arg1;
- (void)setAlignmentConstraints;
- (void)setClipsToBounds:(_Bool)arg1;
- (void)setOpaque:(_Bool)arg1;
- (void)setBackgroundColor:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *arrangedSubviews;
- (void)disableAutoResizingMaskToLayoutConstraintTranslation:(id)arg1;
- (void)commonInitWithInitalSubviews:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithArrangedSubviews:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isConstraintAttribute:(long long)arg1 affectingAxis:(long long)arg2;
- (_Bool)isConstraint:(id)arg1 affectingAxis:(long long)arg2;
- (id)constraintsAffectingView:(id)arg1 inAxis:(long long)arg2;
- (id)constraintsAffectingView:(id)arg1;
- (id)constraintsBetweenView:(id)arg1 andView:(id)arg2 inAxis:(long long)arg3;
- (_Bool)isConstraint:(id)arg1 betweenView:(id)arg2 andView:(id)arg3;
- (id)constraintAffectingView:(id)arg1 andView:(id)arg2 inAxis:(long long)arg3 isLast:(_Bool)arg4;
- (id)lastConstraintAffectingView:(id)arg1 andView:(id)arg2 inAxis:(long long)arg3;
- (id)firstConstraintAffectingView:(id)arg1 andView:(id)arg2 inAxis:(long long)arg3;
- (id)constraintsBetweenView:(id)arg1 andView:(id)arg2 inAxis:(long long)arg3 includeReversed:(_Bool)arg4;
- (void)willRemoveSubview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)removeObserverForViews:(id)arg1;
- (void)addObserverForViews:(id)arg1;
- (void)removeObserverForView:(id)arg1;
- (void)addObserverForView:(id)arg1;
- (_Bool)isViewLastItem:(id)arg1 excludingItem:(id)arg2;
- (id)firstViewConstraint;
- (id)lastViewConstraint;
- (_Bool)isLastVisibleItem:(id)arg1;
- (id)currentVisibleViews;
- (void)iterateVisibleViews:(CDUnknownBlockType)arg1;
- (id)lastVisibleItem;
- (id)visibleViewBeforeIndex:(long long)arg1;
- (id)visibleViewAfterIndex:(long long)arg1;
- (id)visibleViewAfterView:(id)arg1;
- (id)visibleViewBeforeView:(id)arg1;

@end

