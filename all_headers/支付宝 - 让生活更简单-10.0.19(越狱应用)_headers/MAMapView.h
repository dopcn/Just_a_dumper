//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "CLLocationManagerDelegate-Protocol.h"
#import "MAAnnotationContainerViewDelegate-Protocol.h"
#import "MACompassViewDelegate-Protocol.h"
#import "MAIndoorViewDelegate-Protocol.h"
#import "MAMapEngineMapViewDelegate-Protocol.h"
#import "MAMapLayerDelegate-Protocol.h"
#import "MAMapRenderDelegate-Protocol.h"
#import "MAOverlayContainerViewDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class CLLocationManager, MAAngleIndicator, MAAnimationTaskManager, MAAnnotationContainerView, MACircle, MACompassView, MAIndoorInfo, MAIndoorView, MAMapRender, MAOverlayContainerView, MAScaleView, MATapPanToZoomGestureRecognizer, MAUserLocation, MAViewRecycler, MAWorldMapTileOverlay, MapStatus, NSArray, NSDictionary, NSNumber, NSString, UIImageView, UILongPressGestureRecognizer, UIPanGestureRecognizer, UIPinchGestureRecognizer, UIRotationGestureRecognizer, UITapGestureRecognizer;
@protocol MAMapViewDelegate;

@interface MAMapView : UIView <UIGestureRecognizerDelegate, CLLocationManagerDelegate, MAMapEngineMapViewDelegate, MAMapRenderDelegate, MAOverlayContainerViewDelegate, MAAnnotationContainerViewDelegate, MACompassViewDelegate, MAMapLayerDelegate, MAIndoorViewDelegate>
{
    MAMapRender *_render;
    MAOverlayContainerView *_overlayContainerView;
    MAAnnotationContainerView *_annotationContainerView;
    MAViewRecycler *_recycler;
    CLLocationManager *_locationManager;
    MACircle *_userLocationCircle;
    MAAngleIndicator *_angleIndicator;
    _Bool _userLocationViewIsCustomized;
    double _headingOffset;
    UITapGestureRecognizer *_zoomInGestureRecognizer;
    UITapGestureRecognizer *_zoomOutGestureRecognizer;
    UIPinchGestureRecognizer *_zoomPinchGestureRecognizer;
    UIPanGestureRecognizer *_panGestureRecognizer;
    UIPanGestureRecognizer *_pullGestureRecognizer;
    UIRotationGestureRecognizer *_rotateGestureRecognizer;
    UITapGestureRecognizer *_singleTapGestureRecognizer;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    MATapPanToZoomGestureRecognizer *_tapPanToZoomGestureRecognizer;
    MAAnimationTaskManager *_animationManager;
    MACompassView *_compassView;
    MAScaleView *_scaleView;
    double _scaleCalculate;
    MAIndoorView *_indoorView;
    MAIndoorInfo *_indoorInfo;
    _Bool _indoorInternalIsHide;
    UIImageView *_logoImageView;
    double _initCount;
    _Bool _isInitReady;
    _Bool _isNeedUpdateAnnotationView;
    MapStatus *_mapStatusBeforeReload;
    _Bool _isCreateInBackground;
    unsigned long long _countOfRegionOperation;
    MAWorldMapTileOverlay *_internalWorldTileOverlay;
    _Bool _isNeedInitCenter;
    _Bool _showsLabels;
    _Bool _showsBuildings;
    _Bool _zoomEnabled;
    _Bool _scrollEnabled;
    _Bool _rotateEnabled;
    _Bool _rotateCameraEnabled;
    _Bool _skyModelEnable;
    _Bool _touchPOIEnabled;
    _Bool _showsUserLocation;
    _Bool _customizeUserLocationAccuracyCircleRepresentation;
    _Bool _userLocationVisible;
    _Bool _pausesLocationUpdatesAutomatically;
    _Bool _allowsBackgroundLocationUpdates;
    _Bool _showsCompass;
    _Bool _showsScale;
    _Bool _showsIndoorMap;
    _Bool _showsIndoorMapControl;
    _Bool _isAllowDecreaseFrame;
    _Bool _openGLESDisabled;
    _Bool _zoomingInPivotsAroundAnchorPoint;
    _Bool _showTraffic;
    _Bool _allowsAnnotationViewSorting;
    _Bool _animatedAfterInit;
    id <MAMapViewDelegate> _delegate;
    NSNumber *_showsWorldMap;
    double _metersPerPointForCurrentZoom;
    double _zoomLevel;
    double _minZoomLevel;
    double _maxZoomLevel;
    double _rotationDegree;
    double _cameraDegree;
    MAUserLocation *_userLocation;
    long long _userTrackingMode;
    double _distanceFilter;
    double _desiredAccuracy;
    double _headingFilter;
    NSArray *_annotations;
    NSArray *_selectedAnnotations;
    NSArray *_overlays;
    unsigned long long _maxRenderFrame;
    long long _mapType;
    NSDictionary *_trafficStatus;
    double _durationAfterInit;
    long long _functionTypeAfterInit;
    double _limitRegionMinZoomLevel;
    struct CGPoint _screenAnchor;
    struct CLLocationCoordinate2D _centerCoordinate;
    struct CGPoint _compassOrigin;
    struct CGSize _compassSize;
    struct CGPoint _scaleOrigin;
    struct CGSize _scaleSize;
    struct CGSize _indoorMapControlSize;
    struct MAMapPoint _mapPointAfterInit;
    struct CGPoint _pivotAfterInit;
    struct MACoordinateRegion _region;
    struct MAMapRect _visibleMapRect;
    struct CGRect _annotationVisibleRect;
    struct MACoordinateRegion _limitRegion;
    struct MAMapRect _limitMapRect;
}

+ (_Bool)applicationInBackgroundState;
+ (Class)layerClass;
@property(nonatomic) double limitRegionMinZoomLevel; // @synthesize limitRegionMinZoomLevel=_limitRegionMinZoomLevel;
@property(nonatomic) long long functionTypeAfterInit; // @synthesize functionTypeAfterInit=_functionTypeAfterInit;
@property(nonatomic) double durationAfterInit; // @synthesize durationAfterInit=_durationAfterInit;
@property(nonatomic) _Bool animatedAfterInit; // @synthesize animatedAfterInit=_animatedAfterInit;
@property(nonatomic) struct CGPoint pivotAfterInit; // @synthesize pivotAfterInit=_pivotAfterInit;
@property(nonatomic) struct MAMapPoint mapPointAfterInit; // @synthesize mapPointAfterInit=_mapPointAfterInit;
@property(nonatomic) struct MAMapRect limitMapRect; // @synthesize limitMapRect=_limitMapRect;
@property(nonatomic) struct MACoordinateRegion limitRegion; // @synthesize limitRegion=_limitRegion;
@property(nonatomic) _Bool allowsAnnotationViewSorting; // @synthesize allowsAnnotationViewSorting=_allowsAnnotationViewSorting;
@property(nonatomic, getter=isShowTraffic) _Bool showTraffic; // @synthesize showTraffic=_showTraffic;
@property(nonatomic) _Bool zoomingInPivotsAroundAnchorPoint; // @synthesize zoomingInPivotsAroundAnchorPoint=_zoomingInPivotsAroundAnchorPoint;
@property(nonatomic) long long mapType; // @synthesize mapType=_mapType;
@property(nonatomic) unsigned long long maxRenderFrame; // @synthesize maxRenderFrame=_maxRenderFrame;
@property(nonatomic) _Bool showsCompass; // @synthesize showsCompass=_showsCompass;
@property(nonatomic) long long userTrackingMode; // @synthesize userTrackingMode=_userTrackingMode;
@property(nonatomic) _Bool customizeUserLocationAccuracyCircleRepresentation; // @synthesize customizeUserLocationAccuracyCircleRepresentation=_customizeUserLocationAccuracyCircleRepresentation;
@property(readonly, nonatomic) MAUserLocation *userLocation; // @synthesize userLocation=_userLocation;
@property(nonatomic) _Bool showsUserLocation; // @synthesize showsUserLocation=_showsUserLocation;
@property(nonatomic) _Bool touchPOIEnabled; // @synthesize touchPOIEnabled=_touchPOIEnabled;
@property(nonatomic, getter=isSkyModelEnabled) _Bool skyModelEnable; // @synthesize skyModelEnable=_skyModelEnable;
@property(nonatomic, getter=isRotateCameraEnabled) _Bool rotateCameraEnabled; // @synthesize rotateCameraEnabled=_rotateCameraEnabled;
@property(nonatomic, getter=isRotateEnabled) _Bool rotateEnabled; // @synthesize rotateEnabled=_rotateEnabled;
@property(nonatomic, getter=isScrollEnabled) _Bool scrollEnabled; // @synthesize scrollEnabled=_scrollEnabled;
@property(nonatomic, getter=isZoomEnabled) _Bool zoomEnabled; // @synthesize zoomEnabled=_zoomEnabled;
@property(nonatomic) double metersPerPointForCurrentZoom; // @synthesize metersPerPointForCurrentZoom=_metersPerPointForCurrentZoom;
@property(retain, nonatomic, getter=isShowsWorldMap) NSNumber *showsWorldMap; // @synthesize showsWorldMap=_showsWorldMap;
@property(nonatomic, getter=isShowsBuildings) _Bool showsBuildings; // @synthesize showsBuildings=_showsBuildings;
@property(nonatomic, getter=isShowsLabels) _Bool showsLabels; // @synthesize showsLabels=_showsLabels;
@property(nonatomic) __weak id <MAMapViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) struct CGPoint screenAnchor; // @synthesize screenAnchor=_screenAnchor;
- (void).cxx_destruct;
- (void)deallocOperation;
- (void)dealloc;
- (void)removeFromSuperview;
- (void)didMoveToSuperview;
- (void)layoutSubviews;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)initialize;
- (void)initNotifications;
- (void)initMapLayer;
- (void)initLogoImageView;
- (void)initTrafficColor;
- (void)initMapState;
- (void)initUserlocationSystem;
- (void)initAnnotationContainerView;
- (void)initOverlayContainerView;
- (void)initIndoorView;
- (void)initScaleView;
- (void)initCompassView;
- (void)initEnableAttributes;
- (void)initGesture;
- (void)updateInternalOverlayStatues;
- (id)internalWorldTileOverlay;
- (void)handleDidChangeOrientationNotification:(id)arg1;
- (void)handleDidEnterBackgroundNotification;
- (void)handleWillResignActiveNotification;
- (void)handleDidBecomeActiveNotification;
- (void)indoorMapDidChangeFloorIndex:(id)arg1;
- (void)indoorMapDidShow:(id)arg1;
- (void)indoorMapDidHide:(_Bool)arg1;
- (void)setCurrentIndoorMapFloorIndex:(long long)arg1;
- (void)didMAIndoorValueChangedWithIndoorInfo:(id)arg1;
- (void)clearIndoorMapCache;
@property(nonatomic, getter=isShowsIndoorMapControl) _Bool showsIndoorMapControl; // @synthesize showsIndoorMapControl=_showsIndoorMapControl;
@property(nonatomic, getter=isShowsIndoorMap) _Bool showsIndoorMap; // @synthesize showsIndoorMap=_showsIndoorMap;
- (void)setIndoorViewHidden;
- (void)setIndoorMapControlOrigin:(struct CGPoint)arg1;
@property(readonly, nonatomic) struct CGSize indoorMapControlSize; // @synthesize indoorMapControlSize=_indoorMapControlSize;
@property(readonly, nonatomic) struct CGSize scaleSize; // @synthesize scaleSize=_scaleSize;
@property(nonatomic) struct CGPoint scaleOrigin; // @synthesize scaleOrigin=_scaleOrigin;
@property(nonatomic) _Bool showsScale; // @synthesize showsScale=_showsScale;
- (void)updateScaleViewForDistance:(double)arg1;
- (void)setCompassImage:(id)arg1;
@property(readonly, nonatomic) struct CGSize compassSize; // @synthesize compassSize=_compassSize;
@property(nonatomic) struct CGPoint compassOrigin; // @synthesize compassOrigin=_compassOrigin;
- (void)didCompassViewTapped;
- (void)updateCompassViewByDegree:(float)arg1 animated:(_Bool)arg2 duration:(double)arg3;
- (void)hideCompassView;
- (void)showCompassView;
- (struct CGPoint)offsetRangeForVelocity:(struct CGPoint)arg1;
- (double)animationDurationForVelocity:(struct CGPoint)arg1;
- (double)normalizeCameraDegree:(double)arg1;
- (double)normalizeRotationDegree:(double)arg1;
- (double)normalizeZoomLevel:(double)arg1;
- (struct CGPoint)normalizeScreenPoint:(struct CGPoint)arg1;
- (struct MAMapPoint)mapPointForPoint:(struct CGPoint)arg1;
- (struct CGPoint)pointForMapPoint:(struct MAMapPoint)arg1;
- (struct CGPoint)pointForEnginePoint:(struct CGPoint)arg1;
- (struct CGPoint)enginePointForPoint:(struct CGPoint)arg1;
- (struct CGAffineTransform)pixelTransform;
- (struct CGAffineTransform)level20Transform;
- (struct MAMapPoint)centerMapPointForPivotMapPoint:(struct MAMapPoint)arg1 offset:(struct CGSize)arg2 inZoomLevel:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2 inCameraHeaderDegree:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2 inRotationDegree:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2 inZoomLevel:(double)arg3;
- (struct MAMapPoint)centerPointForKeepingMapPivot:(struct MAMapPoint)arg1 onScreenAnchor:(struct CGPoint)arg2;
- (struct CGPoint)getScreenPivotForAnchor:(struct CGPoint)arg1;
- (struct MAMapPoint)getDestinationPointWithZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2;
- (double)getPercentWithHeaderAngle:(double)arg1;
- (double)zoomScaleCoverMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (double)zoomScaleFitMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (double)mapSizeOnEdgeFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2 atZoomLevel:(double)arg3;
- (struct MAMapRect)mapRectForRect:(struct CGRect)arg1;
- (struct CGRect)rectForMapRect:(struct MAMapRect)arg1;
- (struct MACoordinateRegion)convertRect:(struct CGRect)arg1 toRegionFromView:(id)arg2;
- (struct CGRect)convertRegion:(struct MACoordinateRegion)arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D)convertPoint:(struct CGPoint)arg1 toCoordinateFromView:(id)arg2;
- (struct CGPoint)convertCoordinate:(struct CLLocationCoordinate2D)arg1 toPointToView:(id)arg2;
- (struct MAMapRect)mapRectThatFits:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2;
- (struct MAMapRect)mapRectThatFits:(struct MAMapRect)arg1;
- (id)selectPoisAtEnginePoint:(struct CGPoint)arg1 engineRadius:(double)arg2;
- (id)takePoisAtPoint:(struct CGPoint)arg1;
- (double)calculateDistanceInMetersForZoomLevel:(double)arg1;
- (double)mapPointsPerScreenPointAtZoomLevel:(double)arg1;
- (struct CGRect)constraintRect:(struct CGRect)arg1 inRect:(struct CGRect)arg2 minimumSize:(struct CGSize)arg3;
- (id)imageByCombiningInConstraintSize:(struct CGSize)arg1 firstImage:(id)arg2 secondImage:(id)arg3 logoImage:(id)arg4 logoPosition:(struct CGPoint)arg5;
- (id)cutImage:(id)arg1 inRect:(struct CGRect)arg2;
- (struct CGRect)unionFrameForSubviews:(id)arg1 inView:(id)arg2;
- (void)didFailLoadingWithError:(id)arg1;
- (void)didFinishLoading;
- (void)willStartLoading;
- (void)referenceDidChange;
- (void)renderWithState:(long long)arg1;
- (void)setOpenGLESDisabledWithoutNotifyDelegate:(_Bool)arg1;
@property(nonatomic) _Bool openGLESDisabled; // @synthesize openGLESDisabled=_openGLESDisabled;
- (void)recalculate;
- (double)currentCameraDegree;
- (void)cameraToDegree:(double)arg1;
- (void)internalSetCameraDegree:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setCameraDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3 andPivot:(struct CGPoint)arg4;
- (void)setCameraDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3;
@property(nonatomic) double cameraDegree; // @synthesize cameraDegree=_cameraDegree;
- (double)currentRotationDegree;
- (void)rotateToDegree:(double)arg1;
- (void)internalSetRotationDegree:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setRotationDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3 andPivot:(struct CGPoint)arg4;
- (void)setRotationDegree:(double)arg1 animated:(_Bool)arg2 duration:(double)arg3;
@property(nonatomic) double rotationDegree; // @synthesize rotationDegree=_rotationDegree;
- (double)priorZoomLevel;
- (double)nextZoomLevel;
- (double)currentZoomLevel;
- (void)zoomToLevel:(double)arg1;
- (void)internalSetZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setZoomLevel:(double)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3;
- (void)setZoomLevel:(double)arg1 animated:(_Bool)arg2;
@property(nonatomic) double zoomLevel; // @synthesize zoomLevel=_zoomLevel;
@property(nonatomic) double minZoomLevel; // @synthesize minZoomLevel=_minZoomLevel;
@property(nonatomic) double maxZoomLevel; // @synthesize maxZoomLevel=_maxZoomLevel;
- (struct MAMapPoint)currentMapPointCenter;
- (void)scrollToMapPivot:(struct MAMapPoint)arg1;
- (void)internalSetMapPointCenter:(struct MAMapPoint)arg1 atPivot:(struct CGPoint)arg2 animated:(_Bool)arg3 duration:(double)arg4 mediaFunctionType:(long long)arg5 completeBlock:(CDUnknownBlockType)arg6;
- (void)setMapPointCenter:(struct MAMapPoint)arg1 animated:(_Bool)arg2 andPivot:(struct CGPoint)arg3;
- (void)setMapPointCenter:(struct MAMapPoint)arg1 animated:(_Bool)arg2;
- (_Bool)shouldExitUserTrackingModeDueToLimitMapRect;
- (struct CGSize)calculateViewSizeAspectFitViewSize:(struct CGSize)arg1 forBoundary:(struct MAMapRect)arg2 atZoomLevel:(double)arg3;
- (void)setLimitMapRect:(struct MAMapRect)arg1 fitSize:(_Bool)arg2;
- (void)setLimitRegion:(struct MACoordinateRegion)arg1 fitSize:(_Bool)arg2;
- (void)internalSetMapPivot:(struct MAMapPoint)arg1 animated:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)internalSetMapPivot:(struct MAMapPoint)arg1 animated:(_Bool)arg2;
- (void)internalSetCenterCoordinate:(struct CLLocationCoordinate2D)arg1 animated:(_Bool)arg2;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct CLLocationCoordinate2D centerCoordinate; // @synthesize centerCoordinate=_centerCoordinate;
- (struct MACoordinateRegion)regionThatFits:(struct MACoordinateRegion)arg1;
- (void)setRegion:(struct MACoordinateRegion)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct MACoordinateRegion region; // @synthesize region=_region;
- (void)internalSetVisibleMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)setVisibleMapRect:(struct MAMapRect)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)setVisibleMapRect:(struct MAMapRect)arg1 animated:(_Bool)arg2;
@property(nonatomic) struct MAMapRect visibleMapRect; // @synthesize visibleMapRect=_visibleMapRect;
- (struct CGRect)getRectOnGround;
- (id)userLocationCircleRendererWithCircle:(id)arg1;
- (_Bool)isUserLocationCircle:(id)arg1;
- (id)createDrawableForOverlay:(id)arg1;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (void)showOverlays:(id)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)showOverlays:(id)arg1 animated:(_Bool)arg2;
- (id)rendererForOverlay:(id)arg1;
- (id)overlaysInLevel:(long long)arg1;
@property(readonly, nonatomic) NSArray *overlays; // @synthesize overlays=_overlays;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3;
- (void)removeOverlays:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)addOverlay:(id)arg1 level:(long long)arg2;
- (void)addOverlays:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)updateHeadingForDeviceOrientation;
- (void)locationManager:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)setUserTrackingMode:(long long)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic, getter=isUserLocationVisible) _Bool userLocationVisible; // @synthesize userLocationVisible=_userLocationVisible;
@property(readonly, nonatomic) MACircle *userLocationAccuracyCircle;
- (void)diveFitsTracking;
- (void)resetUserLocationHeading;
- (void)updateUserLocationAngle;
- (void)removeAngleIndicator;
- (void)addAngleIndicator;
- (void)updateUserLocationInterface;
- (void)refreshHeadingOffsetWithOrientation:(long long)arg1;
- (id)constructOffsetLocation:(id)arg1;
- (void)addUserLocationInterface;
- (void)removeUserLocationInterface;
- (_Bool)userLocationInterfaceExisted;
- (void)decreaseUserTrackingModeWithFlag:(_Bool)arg1;
- (void)decreaseUserTrackingMode;
- (id)userLocationAnnotationViewWithAnnotation:(id)arg1;
- (void)notifyDelegateUpdateUserLocation:(id)arg1 updatingLocation:(_Bool)arg2;
- (void)updateAnnotation:(id)arg1;
- (double)annotationContainerViewWithCalloutView:(id)arg1 delayForRepositionWithSize:(struct CGSize)arg2;
- (_Bool)annotationContainerViewDidCalloutViewShouldHighlight:(id)arg1;
- (void)annotationContainerViewDidCalloutViewClicked:(id)arg1;
- (void)annotationContainerViewDidTappedWithAnnotationView:(id)arg1 calloutAccessoryControlTapped:(id)arg2;
- (void)annotationContainerViewDidChangeDragWithAnnotationView:(id)arg1 toNewState:(long long)arg2 fromOldState:(long long)arg3;
- (void)annotationContainerViewDidDeselectAnnotationView:(id)arg1;
- (void)annotationContainerViewDidSelectAnnotationView:(id)arg1;
- (struct CLLocationCoordinate2D)annotationContainerViewCoordinate2DForPoint:(struct CGPoint)arg1;
- (struct CGPoint)annotationContainerViewPointForMapPoint:(struct MAMapPoint)arg1;
- (void)updateLockedAnnotationCoordIfNeeded:(id)arg1;
- (void)updateReusingPool;
- (void)showAnnotations:(id)arg1 edgePadding:(struct UIEdgeInsets)arg2 animated:(_Bool)arg3;
- (void)showAnnotations:(id)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) struct CGRect annotationVisibleRect; // @synthesize annotationVisibleRect=_annotationVisibleRect;
@property(copy, nonatomic) NSArray *selectedAnnotations; // @synthesize selectedAnnotations=_selectedAnnotations;
- (void)deselectAnnotation:(id)arg1 animated:(_Bool)arg2;
- (void)selectAnnotation:(id)arg1 animated:(_Bool)arg2;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (id)viewForAnnotation:(id)arg1;
- (id)annotationsInMapRect:(struct MAMapRect)arg1;
@property(readonly, nonatomic) NSArray *annotations; // @synthesize annotations=_annotations;
- (void)removeAnnotations:(id)arg1;
- (void)removeAnnotation:(id)arg1;
- (void)addAnnotations:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (id)doAddAnnotation:(id)arg1;
- (_Bool)isVisibleForAnnotation:(id)arg1;
- (struct MAMapRect)annotationValidRect;
- (void)updateCenterForAnnotationView:(id)arg1;
- (id)defaultViewForAnnotation:(id)arg1;
- (void)updateAnnotationsCenter;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)tapPanToZoomAction:(id)arg1;
- (void)longPressGesture:(id)arg1;
- (void)singleTapGesture:(id)arg1;
- (void)rotateGesture:(id)arg1;
- (void)pullGesture:(id)arg1;
- (void)panGesture:(id)arg1;
- (void)pinchGesture:(id)arg1;
- (void)zoomOutGesture:(id)arg1;
- (void)zoomInGesture:(id)arg1;
- (struct CGPoint)getGestureAnchorPoint:(id)arg1;
- (void)removeAnimationTaskWithKeyPath:(id)arg1;
- (void)addAnimationTask:(id)arg1;
- (void)addBaseAnimationTaskWithDuration:(double)arg1 fromValue:(id)arg2 toValue:(id)arg3 mediaFunctionType:(long long)arg4 keyPath:(id)arg5 andCompleteBlock:(CDUnknownBlockType)arg6;
- (void)doAnimationWithDuration:(double)arg1 andFrameInterval:(double)arg2;
- (unsigned long long)getAnimationCount;
- (void)notifyDelegateMapDidMoveByUser:(_Bool)arg1;
- (void)notifyDelegateMapWillMoveByUser:(_Bool)arg1;
- (void)notifyDelegateMapDidZoomByUser:(_Bool)arg1;
- (void)notifyDelegateMapWillZoomByUser:(_Bool)arg1;
- (void)notifyDelegateRegionDidChangeAnimated:(_Bool)arg1;
- (void)notifyDelegateRegionWillChangeAnimated:(_Bool)arg1;
- (id)getMapStatus;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2 duration:(double)arg3;
- (void)setMapStatus:(id)arg1 animated:(_Bool)arg2;
- (void)changeMetersPerPointForCurrentZoom:(double)arg1;
- (double)metersPerPointForZoomLevel:(double)arg1;
- (void)internalSetMapType:(long long)arg1;
@property(readonly, nonatomic) struct CGSize logoSize;
@property(nonatomic) struct CGPoint logoCenter;
- (void)updateLogoStatusForMapRegion;
- (void)applyTrafficColor:(id)arg1;
- (unsigned int)unsignedIntARGBWithColor:(id)arg1;
- (id)getCurrentTiles;
- (struct CGPoint)privateGetGlPointForMapPoint:(struct MAMapPoint)arg1;
- (double)privateGetMapLenForPixelLen:(int)arg1;
- (void)clearDisk;
@property(copy, nonatomic) NSDictionary *trafficStatus; // @synthesize trafficStatus=_trafficStatus;
- (_Bool)isVisibleMapRectAbroad;
@property(readonly, nonatomic) _Bool isAbroad;
- (void)mapLayerDidRemoveAllAnimations:(id)arg1;
- (void)mapLayer:(id)arg1 didRemoveAnimationForKey:(id)arg2;
- (_Bool)mapLayer:(id)arg1 canHandleAnimationForKey:(id)arg2;
- (void)mapLayer:(id)arg1 didAddAnimation:(id)arg2 forKey:(id)arg3;
- (_Bool)mapLayer:(id)arg1 canHandleAnimation:(id)arg2 forKey:(id)arg3;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (id)internalForKeyframeAnimation:(id)arg1 forKey:(id)arg2;
- (id)internalForBasicAnimation:(id)arg1 forKey:(id)arg2;
- (id)internalForMediaTimingFunction:(id)arg1;
- (void)didStopAnimation:(id)arg1 finished:(_Bool)arg2;
- (void)willAddAnimation:(id)arg1;
- (_Bool)canReceiveAnimation:(id)arg1 forKey:(id)arg2;
- (_Bool)isValidForAnimationKey:(id)arg1;
- (void)didReloadMap;
- (void)reloadMap;
- (void)popMapStatus;
- (void)pushMapStatus;
@property(nonatomic) _Bool isAllowDecreaseFrame; // @synthesize isAllowDecreaseFrame=_isAllowDecreaseFrame;
- (void)takeSnapshotInRect:(struct CGRect)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)takeSnapshotInRect:(struct CGRect)arg1;
- (id)takeSnapshotInRect:(struct CGRect)arg1 includeAnnotation:(_Bool)arg2;
- (id)takeSnapshotOnView:(id)arg1 size:(struct CGSize)arg2 path:(id)arg3;
- (id)takeOpenGLESSnapshotWithPath:(id)arg1;
@property(nonatomic) _Bool allowsBackgroundLocationUpdates; // @synthesize allowsBackgroundLocationUpdates=_allowsBackgroundLocationUpdates;
@property(nonatomic) _Bool pausesLocationUpdatesAutomatically; // @synthesize pausesLocationUpdatesAutomatically=_pausesLocationUpdatesAutomatically;
@property(nonatomic) double headingFilter; // @synthesize headingFilter=_headingFilter;
@property(nonatomic) double desiredAccuracy; // @synthesize desiredAccuracy=_desiredAccuracy;
@property(nonatomic) double distanceFilter; // @synthesize distanceFilter=_distanceFilter;
- (void)setFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

