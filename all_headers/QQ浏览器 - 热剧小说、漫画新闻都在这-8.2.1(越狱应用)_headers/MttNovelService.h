//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MttNovelServiceInner.h"

@class MttNovelRequestManager, NSMutableDictionary;
@protocol MttNovelServiceDelegate;

@interface MttNovelService : MttNovelServiceInner
{
    id <MttNovelServiceDelegate> _delegate;
    MttNovelRequestManager *_requestManager;
    NSMutableDictionary *_readingDict;
}

+ (id)CreateChapterObject;
+ (id)reportKeyForEvent:(int)arg1 bookId:(id)arg2 serialId:(long long)arg3;
@property(retain, nonatomic) NSMutableDictionary *readingDict; // @synthesize readingDict=_readingDict;
@property(retain, nonatomic) MttNovelRequestManager *requestManager; // @synthesize requestManager=_requestManager;
@property(nonatomic) __weak id <MttNovelServiceDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)deleteIColudReading:(id)arg1;
- (id)getIColudReading:(id)arg1;
- (void)saveCircleInfos:(id)arg1;
- (void)getCircleInfo:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)addArchiveBooks:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)deleteArchiveBooks:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)unArchiveBooks:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)archiveBooks:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getFontList:(CDUnknownBlockType)arg1;
- (id)SortShelfData:(id)arg1 sortby:(id)arg2;
- (void)ReUseContent:(id)arg1 dict:(id)arg2;
- (void)SearchSameContent:(id)arg1 dict:(id)arg2;
- (id)createAnchor:(id)arg1;
- (id)createContentKey:(id)arg1;
- (id)offlineFirst:(id)arg1 offlineCount:(long long)arg2;
- (id)onlineFirst:(id)arg1 offlineCount:(long long)arg2;
- (id)requestAnchors:(id)arg1 offlineCount:(long long)arg2 currentAnchor:(id)arg3 cache:(_Bool)arg4;
- (id)getChapterFromSerialId:(id)arg1 serialId:(long long)arg2;
- (id)getChapterFromChapterId:(id)arg1 chapterId:(long long)arg2;
- (id)sortInserArray:(id)arg1;
- (id)createChapterSQ:(id)arg1;
- (void)diffCatalog:(id)arg1 chapterIds:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (id)replaceCatalog:(id)arg1 shakeTime:(long long)arg2 bookId:(id)arg3 anchor:(id)arg4;
- (id)appendCatalog:(id)arg1 shakeTime:(long long)arg2 bookId:(id)arg3;
- (void)UpdateBookSort:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)GetUseConfig:(CDUnknownBlockType)arg1;
- (void)ReportUserConfig:(id)arg1;
- (void)ReportUserCollect:(id)arg1 bSyncRedDot:(_Bool)arg2;
- (void)getBackupSource:(id)arg1 serialid:(long long)arg2 withCompleteHandle:(CDUnknownBlockType)arg3;
- (void)getDownloadInfo:(id)arg1 countContent:(long long)arg2 withCompleteHandle:(CDUnknownBlockType)arg3;
- (id)convertToJson:(id)arg1;
- (void)updateLocalQuanPostInfo:(id)arg1 withBookId:(id)arg2 chapterId:(id)arg3;
- (void)updateBookQuanPostInfo:(id)arg1 withBookId:(id)arg2;
- (void)removeQuanInfo:(id)arg1;
- (void)updateQuanInfo:(id)arg1 withBookId:(id)arg2;
- (void)getBookQuanPostInfo:(id)arg1 postIdArray:(id)arg2 needQuanInfo:(_Bool)arg3 bEnableComment:(_Bool)arg4 complete:(CDUnknownBlockType)arg5;
- (void)deleteBooks:(id)arg1 alsoDelGuidBook:(_Bool)arg2 complete:(CDUnknownBlockType)arg3;
- (void)addBook:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)addBooks:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (id)SortBookSerial:(id)arg1 LastChapterID:(long long)arg2;
- (void)saveUserBookInfo:(id)arg1 minLocalIndex:(id)arg2;
- (void)getBookInfo:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getBookInfoNotAddShelf:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getShelfData:(long long)arg1 complete:(CDUnknownBlockType)arg2;
- (id)getContentKeys:(id)arg1 serialArray:(id)arg2;
- (void)getContentAgain:(long long)arg1 bookid:(id)arg2 serialArray:(id)arg3 shakeTime:(long long)arg4 cache:(_Bool)arg5 complete:(CDUnknownBlockType)arg6;
- (void)getContent:(long long)arg1 bookid:(id)arg2 serialArray:(id)arg3 isAutoBuy:(_Bool)arg4 ignoreCheckContent:(_Bool)arg5 complete:(CDUnknownBlockType)arg6;
- (void)checkContentWithBookID:(id)arg1 current:(long long)arg2 isAutoBuy:(_Bool)arg3 complete:(CDUnknownBlockType)arg4;
- (void)changeContentWithBookID:(id)arg1 current:(long long)arg2 isAutoBuy:(_Bool)arg3 complete:(CDUnknownBlockType)arg4;
- (void)getContentWithBookID:(id)arg1 serialArray:(id)arg2 isAutoBuy:(_Bool)arg3 complete:(CDUnknownBlockType)arg4;
- (void)getContentWithBookID:(id)arg1 start:(long long)arg2 count:(long long)arg3 isAutoBuy:(_Bool)arg4 ignoreCheckContent:(_Bool)arg5 complete:(CDUnknownBlockType)arg6;
- (id)novelSysConfig;
- (void)requestSysConfig;
- (void)requestCatalogCore:(id)arg1 shakeTime:(long long)arg2 anchroCount:(long long)arg3 currentAnchor:(id)arg4 cache:(_Bool)arg5 complete:(CDUnknownBlockType)arg6;
- (void)requestCatalog:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getTokenWithCompleteHandle:(CDUnknownBlockType)arg1;
- (void)updateOutChannel:(id)arg1;
- (id)novelFileUtil;
- (id)novelDBCacheMgr;
- (_Bool)hasToken;
- (id)initWithAgent:(id)arg1 withDelegate:(id)arg2;
- (void)reportBussinesProcessResult:(id)arg1 resultCode:(long long)arg2 timeCost:(long long)arg3 expandInfo:(id)arg4;
- (void)getHotNoteByNotePoints:(id)arg1 bookId:(id)arg2 serialUniqId:(id)arg3 startIndex:(long long)arg4 complete:(CDUnknownBlockType)arg5;
- (void)getSerialHotNotes:(id)arg1 serialUniqIds:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (void)getBookHotNoteSerialIndex:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getNoteDataById:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)updateBookNoteData:(id)arg1 lastUpdateTime:(unsigned long long)arg2 noteCreate:(id)arg3 noteModify:(id)arg4 noteDelete:(id)arg5 complete:(CDUnknownBlockType)arg6;
- (void)checkBookNoteInfo:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (id)composeNSArrayToNSString:(id)arg1;
- (void)guestVIPBind:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getVIPRechargeInfo:(CDUnknownBlockType)arg1;
- (void)getChargeCouponInfo:(_Bool)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getChargeAdInfo:(long long)arg1 bookId:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (void)getShelfNoticeVersionInfo:(unsigned long long)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getBuyBookRecordWithCompleteHandle:(CDUnknownBlockType)arg1;
- (void)buyBookWithBookId:(id)arg1 withPrice:(long long)arg2 withChapterIDArray:(id)arg3 withPayType:(long long)arg4 complete:(CDUnknownBlockType)arg5;
- (void)buyBookWithBookId:(id)arg1 withPrice:(long long)arg2 withSerialID:(id)arg3 withChapterID:(id)arg4 withPayType:(long long)arg5 complete:(CDUnknownBlockType)arg6;
- (void)getBookOpResource:(id)arg1 inShelf:(_Bool)arg2 complete:(CDUnknownBlockType)arg3;
- (void)requestAppidInfo:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)doSignWithComplete:(CDUnknownBlockType)arg1;
- (void)getSignInfoWithComplete:(CDUnknownBlockType)arg1;
- (void)getWenXueDiscountWithBookIds:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getWenxueAccountInfoWithID:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)getWenXuePayedChaptersInfoWith:(id)arg1 chapterIDs:(id)arg2 bAllChapter:(_Bool)arg3 startSerialID:(long long)arg4 count:(long long)arg5 complete:(CDUnknownBlockType)arg6;
- (void)getWenXuePayedChaptersInfoWith:(id)arg1 chapterInfos:(id)arg2 complete:(CDUnknownBlockType)arg3;
- (void)getBookAuthenticationInfo:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)reportUserReaderAction:(id)arg1 completed:(CDUnknownBlockType)arg2;
- (void)reportContentADExpose:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)reportUserChapterInfo:(long long)arg1 Book:(id)arg2 auther:(id)arg3 chapter:(id)arg4 UserInfo:(id)arg5 complete:(CDUnknownBlockType)arg6;
- (void)reportGetContentPartContentError:(id)arg1 forKey:(id)arg2;
- (void)wupReportWupRsp:(int)arg1 forKey:(id)arg2 retCode:(long long)arg3 rsp:(id)arg4 rspCode:(long long)arg5;
- (long long)wupPopNovelReq:(id)arg1;
- (void)wupRecordNovelReq:(id)arg1;
- (id)getRunNovelData:(int)arg1 forKey:(id)arg2;
- (void)closeReportWithType:(int)arg1 forKey:(id)arg2 report:(_Bool)arg3;
- (void)recordReportRspCode:(int)arg1 forKey:(id)arg2 rspCode:(long long)arg3;
- (void)recordReportWupError:(int)arg1 forKey:(id)arg2 code:(long long)arg3;
- (void)recordReportErrorDetail:(int)arg1 forKey:(id)arg2 errorDetail:(id)arg3;
- (void)recordReportDownloadMethod:(int)arg1 forKey:(id)arg2;
- (id)recordReportErrorCode:(int)arg1 forKey:(id)arg2 code:(long long)arg3;
- (void)runReportWithType:(int)arg1 bookId:(id)arg2 serialId:(long long)arg3 reportKey:(id)arg4;
- (id)getReportGroup:(int)arg1;

@end

