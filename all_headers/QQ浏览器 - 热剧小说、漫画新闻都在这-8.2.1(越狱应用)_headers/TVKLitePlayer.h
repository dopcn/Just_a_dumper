//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "KKMediaPlayerDelegate-Protocol.h"
#import "KKMediaPlayerUrlExchange-Protocol.h"
#import "TVKLiteMediaUrlRequestDelegate-Protocol.h"
#import "TVKLogDelegate-Protocol.h"
#import "TVKPreAdManagerDelegate-Protocol.h"
#import "TVKSDKResourceManagerDelegate-Protocol.h"

@class KKMediaPlayInfo, KKMediaPlayer, NSArray, NSMutableDictionary, NSString, NSTimer, TVKLiteMediaUrlRequest, TVKPreAdManager, UIView, UIViewController;
@protocol TVKLitePlaybackDelegate;

@interface TVKLitePlayer : NSObject <KKMediaPlayerDelegate, TVKLiteMediaUrlRequestDelegate, KKMediaPlayerUrlExchange, TVKLogDelegate, TVKSDKResourceManagerDelegate, TVKPreAdManagerDelegate>
{
    long long _tryToPlayFailCount;
    double _tryToPlayTime;
    _Bool _shouldAutoplay;
    _Bool _isLive;
    _Bool _isUserPaused;
    _Bool _fullFilled;
    _Bool _isMuted;
    _Bool _isVR;
    _Bool _isPlayingUrl;
    _Bool _isVideoCgied;
    _Bool _isProxyPlay;
    _Bool _isSavingDisk;
    _Bool _isDeInitP2P;
    _Bool _isPlayable;
    int _defaultMediaFormat;
    int _serviceType;
    int _networkState;
    int _currentFormat;
    int _currentState;
    int _currentPreAdState;
    int _currentPlayType;
    int _currentPlayId;
    int _currentMediaFormat;
    id <TVKLitePlaybackDelegate> _delegate;
    UIView *_playerView;
    UIViewController *_playerViewController;
    NSString *_productPlatform;
    NSString *_productSdtfrom;
    NSString *_speedRecord;
    NSString *_externalPlaybackVideoGravity;
    KKMediaPlayer *_player;
    KKMediaPlayInfo *_mediaPlayInfo;
    TVKPreAdManager *_preAdmanager;
    TVKLiteMediaUrlRequest *_mediaUrlRequest;
    NSString *_currentVideoFileID;
    double _currentPlayBackTime;
    NSArray *_formatList;
    NSTimer *_prgTimer;
    long long _waitingNums;
    NSTimer *_slideToPlayTimer;
    NSTimer *_cachingToPlayTimer;
    NSString *_setFileID;
    NSMutableDictionary *_urlExParamDic;
    NSArray *_lastUrlArray;
    NSArray *_lastDurationArray;
    NSTimer *_cacheTimer;
    double _lastCacheTime;
    double _lastValidPlayBackTime;
}

+ (_Bool)testIfIpv4:(id)arg1;
+ (id)updateVideoUrlsForIpv6:(id)arg1;
+ (id)sharedInstance;
@property(nonatomic) double lastValidPlayBackTime; // @synthesize lastValidPlayBackTime=_lastValidPlayBackTime;
@property(nonatomic) int currentMediaFormat; // @synthesize currentMediaFormat=_currentMediaFormat;
@property(nonatomic) double lastCacheTime; // @synthesize lastCacheTime=_lastCacheTime;
@property(retain, nonatomic) NSTimer *cacheTimer; // @synthesize cacheTimer=_cacheTimer;
@property(nonatomic) _Bool isPlayable; // @synthesize isPlayable=_isPlayable;
@property(copy, nonatomic) NSArray *lastDurationArray; // @synthesize lastDurationArray=_lastDurationArray;
@property(copy, nonatomic) NSArray *lastUrlArray; // @synthesize lastUrlArray=_lastUrlArray;
@property(retain, nonatomic) NSMutableDictionary *urlExParamDic; // @synthesize urlExParamDic=_urlExParamDic;
@property(nonatomic) _Bool isDeInitP2P; // @synthesize isDeInitP2P=_isDeInitP2P;
@property(copy, nonatomic) NSString *setFileID; // @synthesize setFileID=_setFileID;
@property(nonatomic) int currentPlayId; // @synthesize currentPlayId=_currentPlayId;
@property(nonatomic) _Bool isSavingDisk; // @synthesize isSavingDisk=_isSavingDisk;
@property(nonatomic) _Bool isProxyPlay; // @synthesize isProxyPlay=_isProxyPlay;
@property _Bool isVideoCgied; // @synthesize isVideoCgied=_isVideoCgied;
@property(nonatomic) _Bool isPlayingUrl; // @synthesize isPlayingUrl=_isPlayingUrl;
@property(nonatomic) _Bool isVR; // @synthesize isVR=_isVR;
@property(nonatomic) _Bool isMuted; // @synthesize isMuted=_isMuted;
@property(nonatomic) _Bool fullFilled; // @synthesize fullFilled=_fullFilled;
@property(retain, nonatomic) NSTimer *cachingToPlayTimer; // @synthesize cachingToPlayTimer=_cachingToPlayTimer;
@property(retain, nonatomic) NSTimer *slideToPlayTimer; // @synthesize slideToPlayTimer=_slideToPlayTimer;
@property(nonatomic) long long waitingNums; // @synthesize waitingNums=_waitingNums;
@property(retain, nonatomic) NSTimer *prgTimer; // @synthesize prgTimer=_prgTimer;
@property(nonatomic) _Bool isUserPaused; // @synthesize isUserPaused=_isUserPaused;
@property(nonatomic) _Bool isLive; // @synthesize isLive=_isLive;
@property(nonatomic) NSArray *formatList; // @synthesize formatList=_formatList;
@property(nonatomic) int currentPlayType; // @synthesize currentPlayType=_currentPlayType;
@property(nonatomic) int currentPreAdState; // @synthesize currentPreAdState=_currentPreAdState;
@property(nonatomic) int currentState; // @synthesize currentState=_currentState;
@property(nonatomic) int currentFormat; // @synthesize currentFormat=_currentFormat;
@property(nonatomic) double currentPlayBackTime; // @synthesize currentPlayBackTime=_currentPlayBackTime;
@property(copy, nonatomic) NSString *currentVideoFileID; // @synthesize currentVideoFileID=_currentVideoFileID;
@property(retain, nonatomic) TVKLiteMediaUrlRequest *mediaUrlRequest; // @synthesize mediaUrlRequest=_mediaUrlRequest;
@property(retain, nonatomic) TVKPreAdManager *preAdmanager; // @synthesize preAdmanager=_preAdmanager;
@property(retain, nonatomic) KKMediaPlayInfo *mediaPlayInfo; // @synthesize mediaPlayInfo=_mediaPlayInfo;
@property(retain, nonatomic) KKMediaPlayer *player; // @synthesize player=_player;
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity; // @synthesize externalPlaybackVideoGravity=_externalPlaybackVideoGravity;
@property(copy, nonatomic) NSString *speedRecord; // @synthesize speedRecord=_speedRecord;
@property(nonatomic) int networkState; // @synthesize networkState=_networkState;
@property(nonatomic) _Bool shouldAutoplay; // @synthesize shouldAutoplay=_shouldAutoplay;
@property(nonatomic) int serviceType; // @synthesize serviceType=_serviceType;
@property(copy, nonatomic) NSString *productSdtfrom; // @synthesize productSdtfrom=_productSdtfrom;
@property(copy, nonatomic) NSString *productPlatform; // @synthesize productPlatform=_productPlatform;
@property(nonatomic) int defaultMediaFormat; // @synthesize defaultMediaFormat=_defaultMediaFormat;
@property(retain, nonatomic) UIViewController *playerViewController; // @synthesize playerViewController=_playerViewController;
@property(retain, nonatomic) UIView *playerView; // @synthesize playerView=_playerView;
@property(nonatomic) __weak id <TVKLitePlaybackDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)didAppWillForeground;
- (void)didAppWillPending;
- (int)intServiceType;
- (_Bool)authenticator;
- (int)TVHttpProxySetHttpLowSpeedParams:(int)arg1 withMinSpeedFactorBaseBitRate:(int)arg2;
- (int)TVHttpProxyDeleteFileOnDisk:(id)arg1;
- (int)TVHttpProxyDeleteClipFileOnDisk:(id)arg1 withClipNo:(int)arg2;
- (long long)TVHttpProxyGetClipFileSizeOnDisk:(id)arg1 withClipNo:(int)arg2;
- (_Bool)TVHttpProxyIsClipCompleteOnDisk:(id)arg1 withClipNo:(int)arg2;
- (int)TVHttpProxyResumeStorageIO;
- (int)TVHttpProxyPauseStorageIO;
- (int)TVHttpProxyCleanStorage;
- (int)TVHttpProxySetMaxStorageSize:(long long)arg1;
- (int)TVHttpProxyCleanMemory;
- (int)TVHttpProxySetMaxMemorySize:(long long)arg1;
- (void)TVHttpProxyHandlerMemoryWarning;
- (void)TVHttpProxyStopPlay:(int)arg1;
- (void)TVHttpProxySetCookie:(id)arg1;
- (void)TVHttpProxySetPlayerState:(int)arg1 withPlayerState:(int)arg2;
- (void)TVHttpProxySetNetWorkState:(int)arg1;
- (void)TVHttpProxySetRemainTime:(int)arg1 withRemainTime:(int)arg2;
@property(readonly, nonatomic) int currentPlayID;
- (_Bool)checkCouldPlayByCacheForVid:(id)arg1;
- (_Bool)offlinePlayForVid:(id)arg1;
- (int)openTVHttpProxyPlayerWithVideoID:(id)arg1 mediaType:(int)arg2 startPosition:(double)arg3 savedisk:(_Bool)arg4 fileID:(id)arg5;
- (void)cancleDelayTVHttpPlayableJuster;
- (void)TVHttpPlayableJuster;
- (void)delayTVHttpPlayableJuster;
- (id)TVHttpProxyGetVersion;
- (void)deinitTVHttpProxy;
- (int)initModule:(id)arg1 withLogFunc:(CDUnknownFunctionPointerType)arg2 withReportFunc:(CDUnknownFunctionPointerType)arg3 withCallBackFunc:(CDUnknownFunctionPointerType)arg4;
- (void)logLevel:(int)arg1 withLog:(id)arg2;
- (void)flushPlayerProgress;
- (void)checkFirstCache;
- (void)stopCacheTimer;
- (void)setupCacheTimer;
- (void)stopPrgTimer;
- (void)setupProgressTimer;
- (void)destorySlideTimer;
- (void)makeTimerToSliderToPlay;
- (void)monitorCahingStateWithSlided;
- (void)startMediaPlayToPlayAgainWithError:(id)arg1;
- (void)monitorCachingStateWithCached;
- (void)onLoadStateEmpty;
- (void)destoryWaithingTimerWithCached;
- (void)makeWaitingTimerWithCachedToPlay;
- (void)didMediaPlayerStateChanged:(int)arg1 error:(id)arg2;
- (void)mediaPlayerStateNotify:(id)arg1 withState:(long long)arg2 withError:(id)arg3 withFileCacheOrder:(long long)arg4 withIsCurrentFile:(_Bool)arg5;
- (void)mediaPlayerCheckMediaUrlError:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerRequestStateChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerPlaybackDidFinish:(id)arg1;
- (void)mediaPlayerPlaybackStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerLoadStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerNaturalSizeAvailable:(id)arg1;
- (id)willPlayUrl:(id)arg1;
- (_Bool)isNetworkAvaliable;
- (void)showNetworkFailed;
- (void)setProxyPlayUrlwithVideoUrls:(id)arg1 viedoDurations:(id)arg2;
- (void)didMediaUrlRequestFailed:(id)arg1 error:(id)arg2;
- (void)p_startPlayVideo:(id)arg1;
- (void)didMediaUrlRequestFinished:(id)arg1 videoUrls:(id)arg2 viedoDurations:(id)arg3 videoFormatList:(id)arg4 videoDataController:(id)arg5 progInfoDataController:(id)arg6;
- (void)p_didPreAdStateChanged:(int)arg1 error:(id)arg2;
- (void)onPreAdManager:(id)arg1 fullScreenClicked:(_Bool)arg2;
- (void)onLandingPageClicked:(id)arg1 adLandingInfo:(id)arg2;
- (void)onAdPaused:(id)arg1;
- (void)onAdStarted:(id)arg1;
- (void)onAdCompleted:(id)arg1;
- (void)onVipLoginClick:(id)arg1;
- (void)onClickBack:(id)arg1;
- (void)onClickSkip:(id)arg1;
- (void)onPlayAdFailed:(id)arg1 error:(id)arg2;
- (void)onReceiveAdFailed:(id)arg1 error:(id)arg2;
- (void)onReceiveAd:(id)arg1;
- (double)getCurrentVolum;
- (void)setVolum:(double)arg1;
- (_Bool)hadAudioTrack;
- (void)rePlayCurrentVideo;
- (void)setFullScreenFilled:(_Bool)arg1;
- (_Bool)isPlayerMuted;
- (void)setPlayerMuted:(_Bool)arg1;
- (id)getCurrentVideoScreenShot;
- (long long)requestMediaTypeWithTVK:(int)arg1;
- (void)seekTo:(double)arg1;
- (void)clearResourse;
- (void)removeAllPlayerItemAndPlayer;
- (void)skipAd;
- (void)stopLite;
- (void)stop;
- (void)pause;
- (void)play;
- (void)playOtherMediaFormat:(int)arg1;
- (void)startPrepareMediaToPlay;
- (void)openMediaPlayerWithUrls:(id)arg1 Durations:(id)arg2 isLive:(_Bool)arg3 isLocalUrl:(_Bool)arg4 startPosition:(double)arg5;
- (void)setVRPlayerScale:(double)arg1;
- (void)setVRPlayerRotationX:(double)arg1 RotationY:(double)arg2;
- (void)openVRPlayerWithChannelID:(id)arg1;
- (void)openMediaPlayerWithChannelID:(id)arg1;
- (void)playerWithChannelID:(id)arg1;
- (void)openVRPlayerWithVideoID:(id)arg1 startPosition:(double)arg2;
- (void)openMediaPlayerWithVideoID:(id)arg1 mediaType:(int)arg2 startPosition:(double)arg3;
- (void)playerWithVideoID:(id)arg1 mediaType:(int)arg2 startPosition:(double)arg3;
- (void)openMediaPlayerWithVideoInfo:(id)arg1;
- (void)setKVForRequest;
- (void)setUrlExParamWithKey:(id)arg1 value:(id)arg2;
- (void)notifyPlayable;
@property(readonly, nonatomic) _Bool playable;
@property(readonly, nonatomic) struct CGSize natureSize;
@property(readonly, nonatomic) NSArray *mediaFormatList;
@property(readonly, nonatomic) double currentPlaybackTime;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) int state;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

