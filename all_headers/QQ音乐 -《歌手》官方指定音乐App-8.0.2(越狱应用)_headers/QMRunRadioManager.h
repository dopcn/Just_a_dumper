//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "DownLoadTaskDelegate-Protocol.h"
#import "ProtocolHostDelegate-Protocol.h"
#import "QMPedometerDelegate-Protocol.h"
#import "QMShakePedometerDelegate-Protocol.h"
#import "UniteCgiHostDelegate-Protocol.h"

@class DownLoadTask, FolderInfo, ListBase, NSArray, NSMutableArray, NSMutableDictionary, NSString, NSTimer, QMAlertView, QMBpmPredictor, QMRunRadioRunData, QMRunRadioSongList, QMRunRadioSongListRequestRecorder, SongInfo;
@protocol OS_dispatch_queue, QMBpmDelegate;

@interface QMRunRadioManager : NSObject <DownLoadTaskDelegate, QMPedometerDelegate, QMShakePedometerDelegate, ProtocolHostDelegate, UniteCgiHostDelegate>
{
    _Bool _isUsingRunRadio;
    _Bool _isPlayingRunRadio;
    _Bool _shouldHideMiniPlayer;
    _Bool _isRestoring;
    _Bool _hasSportPrivacy;
    _Bool _isLoadAllBeforeDownloadSongList;
    _Bool _isLoadSelfRunData;
    _Bool _firstTimeToRecommend;
    _Bool _showingSportPrivacyAlert;
    _Bool _entryHasRedPoint;
    QMRunRadioSongList *_defaultRecommendSongList;
    QMRunRadioSongList *_defaultRecommendBackupSongList;
    double _nonRunRadioSongProgress;
    NSTimer *_bpmHeartbeat;
    long long _currentBpmDecreaseDelayBeat;
    long long _currentShakeDecreaseDelayBeat;
    id <QMBpmDelegate> _bpmDelegate;
    QMBpmPredictor *_bpmPreditor;
    unsigned long long _bpmState;
    long long _encourageDistance;
    double _debugBpm;
    QMRunRadioSongList *_recommendSongList;
    NSArray *_categoryListFromServer;
    NSMutableArray *_categorySongFolderArray;
    NSMutableArray *_beforeDownSongLists;
    QMRunRadioSongList *_recommendBackupSongList;
    QMRunRadioRunData *_lastTimeRunData;
    QMRunRadioRunData *_currentRunData;
    QMRunRadioRunData *_unexpectedTerminationData;
    QMAlertView *_freeFlowAlertView;
    FolderInfo *_folderInfo;
    CDUnknownBlockType _handleAfterStopRunRadioBlock;
    NSMutableArray *_recentBpms;
    NSArray *_innerBpmRanges;
    NSString *_lastBpmRangeKey;
    NSString *_lastStaticBpmRangeKey;
    long long _bpmStaticCount;
    NSObject<OS_dispatch_queue> *_runRadioSerialQueue;
    NSMutableArray *_uploadFailRunDatas;
    NSArray *_reUploadingRunDatas;
    NSMutableArray *_reUploadSuccessRunDatas;
    NSMutableArray *_harmoniousFriendIdList;
    NSMutableArray *_medalDataMutableArray;
    NSMutableArray *_folderInfos;
    QMRunRadioSongListRequestRecorder *_songListRequestRecorder;
    NSMutableDictionary *_uidToBeforeDownSongLists;
    QMRunRadioSongList *_currentDownSongList;
    unsigned long long _currentDownTaskIndex;
    DownLoadTask *_currentDownloadTask;
    NSMutableArray *_shouldDownloadTasks;
    NSMutableArray *_shouldUpdateSongLists;
    NSMutableDictionary *_allSongToFolderDic;
    NSMutableArray *_allSongIds;
    NSTimer *_saveBeforeDownTimer;
    NSMutableArray *_requestSongInfosSongListArray;
    ListBase *_playList;
    unsigned long long _currentQueueType;
    SongInfo *_lastRecommendSong;
    NSMutableDictionary *_recommendSongQueues;
    NSMutableDictionary *_requestingRecommendSongQueueProtocols;
    long long _randomCirclePlayFirstIndex;
    NSString *_entrySubtitle;
    CDUnknownBlockType _entryRequestCompletionBlock;
}

+ (_Bool)showRunRadioEntrance;
+ (id)createRunRadioAlertViewWithMessage:(id)arg1 closeActionBlock:(CDUnknownBlockType)arg2 leftTitle:(id)arg3 leftActionBlock:(CDUnknownBlockType)arg4 rightTitle:(id)arg5 rightActionBlock:(CDUnknownBlockType)arg6;
+ (void)logRecommendSongQueuesDescription;
+ (id)bpmSongInfoDescription:(id)arg1;
+ (id)songInfoArrayDescription:(id)arg1;
+ (id)listBaseDescription:(id)arg1;
+ (id)sharedManager;
+ (_Bool)checkRunRadioAvailableAndShowDialog;
@property(copy, nonatomic) CDUnknownBlockType entryRequestCompletionBlock; // @synthesize entryRequestCompletionBlock=_entryRequestCompletionBlock;
@property(nonatomic) _Bool entryHasRedPoint; // @synthesize entryHasRedPoint=_entryHasRedPoint;
@property(retain, nonatomic) NSString *entrySubtitle; // @synthesize entrySubtitle=_entrySubtitle;
@property(nonatomic, getter=isShowingSportPrivacyAlert) _Bool showingSportPrivacyAlert; // @synthesize showingSportPrivacyAlert=_showingSportPrivacyAlert;
@property(nonatomic) long long randomCirclePlayFirstIndex; // @synthesize randomCirclePlayFirstIndex=_randomCirclePlayFirstIndex;
@property(retain, nonatomic) NSMutableDictionary *requestingRecommendSongQueueProtocols; // @synthesize requestingRecommendSongQueueProtocols=_requestingRecommendSongQueueProtocols;
@property(retain, nonatomic) NSMutableDictionary *recommendSongQueues; // @synthesize recommendSongQueues=_recommendSongQueues;
@property(nonatomic) _Bool firstTimeToRecommend; // @synthesize firstTimeToRecommend=_firstTimeToRecommend;
@property(retain, nonatomic) SongInfo *lastRecommendSong; // @synthesize lastRecommendSong=_lastRecommendSong;
@property(nonatomic) unsigned long long currentQueueType; // @synthesize currentQueueType=_currentQueueType;
@property(retain, nonatomic) ListBase *playList; // @synthesize playList=_playList;
@property(retain, nonatomic) NSMutableArray *requestSongInfosSongListArray; // @synthesize requestSongInfosSongListArray=_requestSongInfosSongListArray;
@property(retain, nonatomic) NSTimer *saveBeforeDownTimer; // @synthesize saveBeforeDownTimer=_saveBeforeDownTimer;
@property(retain) NSMutableArray *allSongIds; // @synthesize allSongIds=_allSongIds;
@property(retain) NSMutableDictionary *allSongToFolderDic; // @synthesize allSongToFolderDic=_allSongToFolderDic;
@property(retain, nonatomic) NSMutableArray *shouldUpdateSongLists; // @synthesize shouldUpdateSongLists=_shouldUpdateSongLists;
@property(retain, nonatomic) NSMutableArray *shouldDownloadTasks; // @synthesize shouldDownloadTasks=_shouldDownloadTasks;
@property(retain, nonatomic) DownLoadTask *currentDownloadTask; // @synthesize currentDownloadTask=_currentDownloadTask;
@property(nonatomic) unsigned long long currentDownTaskIndex; // @synthesize currentDownTaskIndex=_currentDownTaskIndex;
@property(retain, nonatomic) QMRunRadioSongList *currentDownSongList; // @synthesize currentDownSongList=_currentDownSongList;
@property(retain) NSMutableDictionary *uidToBeforeDownSongLists; // @synthesize uidToBeforeDownSongLists=_uidToBeforeDownSongLists;
@property(retain, nonatomic) QMRunRadioSongListRequestRecorder *songListRequestRecorder; // @synthesize songListRequestRecorder=_songListRequestRecorder;
@property(retain, nonatomic) NSMutableArray *folderInfos; // @synthesize folderInfos=_folderInfos;
@property(retain, nonatomic) NSMutableArray *medalDataMutableArray; // @synthesize medalDataMutableArray=_medalDataMutableArray;
@property(retain, nonatomic) NSMutableArray *harmoniousFriendIdList; // @synthesize harmoniousFriendIdList=_harmoniousFriendIdList;
@property(retain, nonatomic) NSMutableArray *reUploadSuccessRunDatas; // @synthesize reUploadSuccessRunDatas=_reUploadSuccessRunDatas;
@property(retain, nonatomic) NSArray *reUploadingRunDatas; // @synthesize reUploadingRunDatas=_reUploadingRunDatas;
@property(retain, nonatomic) NSMutableArray *uploadFailRunDatas; // @synthesize uploadFailRunDatas=_uploadFailRunDatas;
@property _Bool isLoadSelfRunData; // @synthesize isLoadSelfRunData=_isLoadSelfRunData;
@property _Bool isLoadAllBeforeDownloadSongList; // @synthesize isLoadAllBeforeDownloadSongList=_isLoadAllBeforeDownloadSongList;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *runRadioSerialQueue; // @synthesize runRadioSerialQueue=_runRadioSerialQueue;
@property(nonatomic) long long bpmStaticCount; // @synthesize bpmStaticCount=_bpmStaticCount;
@property(retain, nonatomic) NSString *lastStaticBpmRangeKey; // @synthesize lastStaticBpmRangeKey=_lastStaticBpmRangeKey;
@property(retain, nonatomic) NSString *lastBpmRangeKey; // @synthesize lastBpmRangeKey=_lastBpmRangeKey;
@property(retain, nonatomic) NSArray *innerBpmRanges; // @synthesize innerBpmRanges=_innerBpmRanges;
@property(nonatomic) _Bool hasSportPrivacy; // @synthesize hasSportPrivacy=_hasSportPrivacy;
@property(retain, nonatomic) NSMutableArray *recentBpms; // @synthesize recentBpms=_recentBpms;
@property(nonatomic) _Bool isRestoring; // @synthesize isRestoring=_isRestoring;
@property(copy, nonatomic) CDUnknownBlockType handleAfterStopRunRadioBlock; // @synthesize handleAfterStopRunRadioBlock=_handleAfterStopRunRadioBlock;
@property(nonatomic) _Bool shouldHideMiniPlayer; // @synthesize shouldHideMiniPlayer=_shouldHideMiniPlayer;
@property(nonatomic) _Bool isPlayingRunRadio; // @synthesize isPlayingRunRadio=_isPlayingRunRadio;
@property(nonatomic) _Bool isUsingRunRadio; // @synthesize isUsingRunRadio=_isUsingRunRadio;
@property(retain, nonatomic) FolderInfo *folderInfo; // @synthesize folderInfo=_folderInfo;
@property(retain, nonatomic) QMAlertView *freeFlowAlertView; // @synthesize freeFlowAlertView=_freeFlowAlertView;
@property(retain, nonatomic) QMRunRadioRunData *unexpectedTerminationData; // @synthesize unexpectedTerminationData=_unexpectedTerminationData;
@property(retain, nonatomic) QMRunRadioRunData *currentRunData; // @synthesize currentRunData=_currentRunData;
@property(retain, nonatomic) QMRunRadioRunData *lastTimeRunData; // @synthesize lastTimeRunData=_lastTimeRunData;
@property(retain, nonatomic) QMRunRadioSongList *recommendBackupSongList; // @synthesize recommendBackupSongList=_recommendBackupSongList;
@property(retain, nonatomic) NSMutableArray *beforeDownSongLists; // @synthesize beforeDownSongLists=_beforeDownSongLists;
@property(retain, nonatomic) NSMutableArray *categorySongFolderArray; // @synthesize categorySongFolderArray=_categorySongFolderArray;
@property(retain, nonatomic) NSArray *categoryListFromServer; // @synthesize categoryListFromServer=_categoryListFromServer;
@property(retain, nonatomic) QMRunRadioSongList *recommendSongList; // @synthesize recommendSongList=_recommendSongList;
@property(nonatomic) double debugBpm; // @synthesize debugBpm=_debugBpm;
@property(readonly, nonatomic) long long encourageDistance; // @synthesize encourageDistance=_encourageDistance;
@property(nonatomic) unsigned long long bpmState; // @synthesize bpmState=_bpmState;
@property(retain, nonatomic) QMBpmPredictor *bpmPreditor; // @synthesize bpmPreditor=_bpmPreditor;
@property(nonatomic) __weak id <QMBpmDelegate> bpmDelegate; // @synthesize bpmDelegate=_bpmDelegate;
@property(nonatomic) long long currentShakeDecreaseDelayBeat; // @synthesize currentShakeDecreaseDelayBeat=_currentShakeDecreaseDelayBeat;
@property(nonatomic) long long currentBpmDecreaseDelayBeat; // @synthesize currentBpmDecreaseDelayBeat=_currentBpmDecreaseDelayBeat;
@property(retain, nonatomic) NSTimer *bpmHeartbeat; // @synthesize bpmHeartbeat=_bpmHeartbeat;
@property(nonatomic) double nonRunRadioSongProgress; // @synthesize nonRunRadioSongProgress=_nonRunRadioSongProgress;
- (void).cxx_destruct;
- (void)hostCallBackWithUniteCgi:(id)arg1 protocolError:(id)arg2;
- (void)hostCallBackWithWorkProtocol:(id)arg1 protocolError:(id)arg2;
- (void)requestHarmoniousFriend;
- (void)requestEventAward;
- (void)requestEventInfo;
- (void)requestEncourageDistance;
- (void)requestRecommendSongInfosWithFirstTime:(_Bool)arg1;
- (id)createNewDefaultRecommendBackupSongList;
@property(readonly, nonatomic) QMRunRadioSongList *defaultRecommendBackupSongList; // @synthesize defaultRecommendBackupSongList=_defaultRecommendBackupSongList;
- (id)createNewDefaultRecommendSongList;
@property(readonly, nonatomic) QMRunRadioSongList *defaultRecommendSongList; // @synthesize defaultRecommendSongList=_defaultRecommendSongList;
- (void)requestSongInfosWithSongList:(id)arg1;
- (void)requestSongListsWithCategoryId:(unsigned long long)arg1;
- (void)requestSongListCategory;
- (void)onUploadFailedDataLoaded:(id)arg1;
- (void)onLogoutNotification:(id)arg1;
- (void)toCallRecoverDownloadAndUpdate;
- (void)onLoginSuccessNotification:(id)arg1;
- (id)getBeforeDownloadSonglistsWithCategoryId:(unsigned long long)arg1;
- (id)listBaseFromSongList:(id)arg1;
- (double)songOutsideProgress;
- (_Bool)checkListBaseAvailable:(id)arg1;
- (void)stopRunRadioForExternalLaunch;
- (id)createLocalFolderInfos;
- (_Bool)checkSongListAvailable:(id)arg1;
- (double)lastTimeBpm;
- (void)saveAndUploadUnexpectedTerminationData;
- (id)allSongInfoKeys;
- (void)showNoWifiAlertViewAtStartRun:(CDUnknownBlockType)arg1;
- (void)showBuyFreeFlowServiceAlert:(CDUnknownBlockType)arg1;
- (int)playOnlineSongListIndex:(id)arg1;
- (int)playIndex:(id)arg1;
- (int)playMode:(id)arg1;
- (unsigned long long)onlineSongListPlayNeedNetStatus:(id)arg1;
- (unsigned long long)songListPlayNeedNetStatus:(id)arg1;
- (void)resetSongListRequest;
- (void)clearMPNowPlayingInfo;
- (int)getLiveWifiQuality;
- (int)getLiveQuality;
- (_Bool)showRequestSportPrivacyAlert;
- (_Bool)hasMoreSongListsToRequest;
- (void)askToShowInMyMusicRoot;
- (void)executeHandleAfterStopRunRadioBlock;
- (void)showStopRunRadioORNotTips:(CDUnknownBlockType)arg1;
- (void)audioPlayManagerPause;
- (void)audioPlayManagerPlay;
- (id)getFolderInfoWithDissId:(unsigned long long)arg1;
- (_Bool)currentSongListIsRecommend;
- (void)innerPushRunRadioPlayVC;
- (void)sendDimissUseFlowAlertStatus;
- (void)sendCanEnterRunRadioDirectlyStatusToWatch:(long long)arg1;
- (void)pushRunRadioPlayVC;
- (_Bool)firstTimeToUseRunRadio;
- (_Bool)isRunRadioBeforeDownloadSongWithSongId:(unsigned long long)arg1;
- (_Bool)isRunRadioBeforeDownloadSong:(id)arg1;
- (void)saveCurrentRunDataForUnexpectedTermination;
- (void)stopRunning:(double)arg1 distance:(double)arg2 duration:(double)arg3;
- (void)stopRunning;
- (void)startToRun;
- (void)stopRunRadio;
- (void)startRunRadio;
- (void)resetVariable;
- (void)dealloc;
- (id)init;
- (id)queryNeedRequestVkeySongList:(id)arg1 songRate:(int)arg2;
- (void)download:(id)arg1 error:(id)arg2;
- (void)download:(id)arg1 didDownloadSuccWithFile:(id)arg2;
- (void)download:(id)arg1 didAppendProgress:(float)arg2;
- (void)download:(id)arg1 didReceiveResponseHeaders:(id)arg2;
- (void)notifyDownloadCategoryNetChange;
- (void)notifyBeforeDownloadGetSonglistDone:(id)arg1 oldListBase:(id)arg2 isSucc:(_Bool)arg3;
- (id)findNextDownloadSongList;
- (void)processNextSongList:(id)arg1;
- (void)downloadSongWithTask:(id)arg1;
- (void)downloadNextSong;
- (void)batchDownloadSongs:(id)arg1;
- (void)replaceRecommendSongList:(id)arg1 backupSongList:(id)arg2;
- (void)checkUpdateBeforeDownTaoSongList:(id)arg1;
- (void)checkUpdateRecommend:(id)arg1 backupRecommend:(id)arg2;
- (void)realDeleteBeforeDownloadSongList:(id)arg1;
- (void)resumeToDownload;
- (void)recoverDownloadAndUpdate;
- (void)batchDeleteBeforeDownloadSongLists:(id)arg1;
- (void)deleteBeforeDownloadSongList:(id)arg1;
- (void)pauseAllSongList;
- (void)pauseSongList:(id)arg1;
- (void)showDisableDownloadViaCarrierAlert:(CDUnknownBlockType)arg1;
- (void)showRRDisableDownloadViaCarrierAlert:(CDUnknownBlockType)arg1;
- (void)downloadSongList:(id)arg1;
- (void)addRecoverDataToRunData:(id)arg1;
- (double)calculateCalories;
- (double)weight;
- (_Bool)useExponentAmortize;
- (void)setUseExponentAmortize:(_Bool)arg1;
- (void)setCurrentBpmAlgorithm:(float)arg1;
- (void)decreaseShakeAlgorithm;
- (void)decreaseBpmAlgorithm;
- (void)onShakeBpmUpdate:(double)arg1 stepCount:(unsigned long long)arg2;
- (void)pedometerStateChanged:(_Bool)arg1;
- (void)pedometerDidReceivedBpm:(id)arg1 distance:(double)arg2 steps:(long long)arg3 error:(id)arg4;
- (void)addBpmToRecent:(double)arg1;
- (void)resetValues;
- (void)responseToBpmDelegate;
- (void)heartBeat;
- (double)recentAverageBpm;
- (void)clearAverageBpm;
- (double)averageBpm;
- (_Bool)ableToGetBpm;
- (void)stopPedometer;
- (void)resumePedometer;
- (void)pausePedometer;
- (void)recoverValuesFromRunData:(id)arg1;
- (_Bool)initPecometerFromCurrent;
- (_Bool)initPecometerFromDate:(id)arg1;
- (_Bool)startPecometerFromCurrent;
- (_Bool)startPedometerFromDate:(id)arg1;
- (_Bool)isPedometerStopped;
- (double)currentTimeIncludingPaused;
- (double)runTotalTime;
- (double)currentCalories;
- (double)currentDistance;
- (long long)currentStep;
- (double)shakeBpm;
- (double)systemBpm;
- (double)currentBpm;
- (void)rebuildAllSongIdArray;
- (void)removeFromRunRadioBeforeDownloadAllSongs:(id)arg1 withKey:(id)arg2;
- (void)addToRunRadioBeforeDownloadAllSongs:(id)arg1 withKey:(id)arg2;
- (id)decodeSongListsData:(id)arg1;
- (void)saveUploadFailRunDataMedal:(id)arg1 runData:(id)arg2;
- (void)finishUploadAgain;
- (void)uploadFailedRunDataAtIndex:(unsigned long long)arg1;
- (void)innerUploadAllFailedRunData;
- (void)uploadAllFailedRunData;
- (void)saveUploadFailRunData:(_Bool)arg1;
- (void)innerLoadUploadFailRunData;
- (void)loadUploadFailRunData:(_Bool)arg1;
- (void)uploadRunData:(id)arg1 ifFailStoreToLocal:(_Bool)arg2;
- (void)deleteUnexpectedTerminationDataAsync:(_Bool)arg1 withUin:(unsigned long long)arg2;
- (void)saveUnexpectedTerminationDataAsync:(_Bool)arg1 withUin:(unsigned long long)arg2;
- (void)saveRunData:(id)arg1 async:(_Bool)arg2 withUin:(unsigned long long)arg3;
- (void)innerLoadSelfRunData;
- (void)loadSelfRunData:(_Bool)arg1;
- (void)saveSelfBeforeDownloadSonglist:(_Bool)arg1 withUin:(unsigned long long)arg2;
- (void)innerLoadAllBeforeDownloadSongList;
- (void)loadAllBeforeDownloadSongList:(_Bool)arg1;
- (unsigned long long)uin;
- (void)mergerAndDeleteSameSongList:(id)arg1 needAddArray:(id)arg2;
- (id)getUploadFailedRunDataFilePath;
- (id)getUnexpectedTerminationDataPathWithUin:(unsigned long long)arg1;
- (id)getLastRunDataFilePathWithUin:(unsigned long long)arg1;
- (void)loadMedalDataAndShow;
- (void)dealHarmoniousFriend:(id)arg1;
- (void)resetRecommendSongList;
- (id)getLastRunDataFilePath;
- (void)callBackForCurrentRunResult:(id)arg1;
- (_Bool)isRunDataQualified:(id)arg1;
- (_Bool)isCurrentRunDataQualified;
- (void)addCategoryUploadWithCategoryId:(unsigned long long)arg1 operType:(unsigned long long)arg2;
- (void)addClickStatusStartToRun;
- (void)addClickStatusSelectSongList:(id)arg1;
- (void)reportEntryRedPointCleared;
- (void)executeEntryRequestCompletionBlock;
- (void)hostCallbackWithEntryCgi:(id)arg1 protocolError:(id)arg2;
- (_Bool)isRunRadioEntryCgi:(id)arg1;
- (void)updateEntryInfoWithCompletion:(CDUnknownBlockType)arg1;
- (id)getEntrySubtitle;
- (_Bool)getEntryHasRedPoint;
- (void)judgeStaticBpm;
- (id)songQueueFromBpm:(double)arg1;
- (id)bpmRangekey:(double)arg1;
- (struct CGPoint)bpmRangeByBpm:(double)arg1;
- (id)bpmRanges;
- (id)getBestBpmSongFromAllQueueThenRemoved:(_Bool)arg1;
- (id)getBestBpmSongFromQueue:(id)arg1 thenRemoved:(_Bool)arg2;
- (void)setBpmToRequestingRecommendProtocols:(double)arg1 exist:(_Bool)arg2;
- (_Bool)existRequestingRecommendProtocol:(double)arg1;
- (void)requestRecommendSong:(double)arg1 remainNumber:(unsigned long long)arg2;
- (unsigned long long)checkSongNumberByFakeBpm:(double)arg1;
- (void)checkRemainSongsAndRequestRecommendSong:(id)arg1 bpm:(double)arg2;
- (void)checkRemainSongsAndRequestRecommendSongByBpm:(double)arg1;
- (double)middleBpmInRangeFromOriginalBpm:(double)arg1;
- (id)preGetNextSongInQueue;
- (void)checkBpmStaticAndRequestSongs;
- (void)dealRecommendSongInfos:(id)arg1;
- (id)getNextSongInQueueAccordingBpm:(double)arg1;
- (id)getNextSongInQueue;
- (void)addSongs:(id)arg1;
- (void)addSongsFromListBase:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

