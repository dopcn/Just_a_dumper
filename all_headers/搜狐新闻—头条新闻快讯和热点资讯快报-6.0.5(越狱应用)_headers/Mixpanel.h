//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "MPNotificationViewControllerDelegate-Protocol.h"
#import "TrackDelegate-Protocol.h"

@class AutomaticEvents, CTTelephonyNetworkInfo, MPABTestDesignerConnection, MPNetwork, MixpanelPeople, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSSet, NSString, NSTimer, UILongPressGestureRecognizer, UIViewController;
@protocol MixpanelDelegate, OS_dispatch_queue;

@interface Mixpanel : NSObject <MPNotificationViewControllerDelegate, TrackDelegate>
{
    unsigned long long _flushInterval;
    _Bool _enableVisualABTestAndCodeless;
    _Bool _flushOnBackground;
    _Bool _checkForNotificationsOnActive;
    _Bool _checkForVariantsOnActive;
    _Bool _showNotificationOnActive;
    _Bool _validationEnabled;
    _Bool _decideResponseCached;
    _Bool _hasAddedObserver;
    MixpanelPeople *_people;
    NSString *_distinctId;
    NSString *_alias;
    NSString *_serverURL;
    double _miniNotificationPresentationTime;
    id <MixpanelDelegate> _delegate;
    NSString *_nameTag;
    struct __SCNetworkReachability *_reachability;
    CTTelephonyNetworkInfo *_telephonyInfo;
    UILongPressGestureRecognizer *_testDesignerGestureRecognizer;
    MPABTestDesignerConnection *_abtestDesignerConnection;
    unsigned long long _validationMode;
    unsigned long long _validationEventCount;
    AutomaticEvents *_automaticEvents;
    unsigned long long _taskId;
    UIViewController *_notificationViewController;
    MPNetwork *_network;
    NSString *_apiToken;
    NSDictionary *_superProperties;
    NSDictionary *_automaticProperties;
    NSTimer *_timer;
    NSMutableArray *_eventsQueue;
    NSMutableArray *_peopleQueue;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_queue> *_networkQueue;
    NSMutableDictionary *_timedEvents;
    NSNumber *_automaticEventsEnabled;
    NSArray *_notifications;
    id _currentlyShowingNotification;
    NSMutableSet *_shownNotifications;
    NSSet *_variants;
    NSSet *_eventBindings;
}

+ (_Bool)canPresentFromViewController:(id)arg1;
+ (id)topPresentedViewController;
+ (id)libVersion;
+ (id)unarchiveFromFile:(id)arg1 asClass:(Class)arg2;
+ (id)unarchiveOrDefaultFromFile:(id)arg1 asClass:(Class)arg2;
+ (void)assertPropertyTypesInArray:(id)arg1 depth:(unsigned long long)arg2;
+ (void)assertPropertyTypesInDictionary:(id)arg1 depth:(unsigned long long)arg2;
+ (void)assertPropertyType:(id)arg1 depth:(unsigned long long)arg2;
+ (void)assertPropertyTypes:(id)arg1;
+ (id)sharedUIApplication;
+ (_Bool)isAppExtension;
+ (id)sharedInstance;
+ (id)sharedInstanceWithToken:(id)arg1;
+ (id)sharedInstanceWithToken:(id)arg1 launchOptions:(id)arg2;
+ (void)addSwizzles;
+ (void)setSharedAutomatedInstance:(id)arg1;
+ (id)sharedAutomatedInstance;
@property(retain, nonatomic) NSSet *eventBindings; // @synthesize eventBindings=_eventBindings;
@property(retain, nonatomic) NSSet *variants; // @synthesize variants=_variants;
@property(retain, nonatomic) NSMutableSet *shownNotifications; // @synthesize shownNotifications=_shownNotifications;
@property(retain, nonatomic) id currentlyShowingNotification; // @synthesize currentlyShowingNotification=_currentlyShowingNotification;
@property(retain, nonatomic) NSArray *notifications; // @synthesize notifications=_notifications;
@property(retain, nonatomic) NSNumber *automaticEventsEnabled; // @synthesize automaticEventsEnabled=_automaticEventsEnabled;
@property(nonatomic) _Bool hasAddedObserver; // @synthesize hasAddedObserver=_hasAddedObserver;
@property(nonatomic) _Bool decideResponseCached; // @synthesize decideResponseCached=_decideResponseCached;
@property(retain, nonatomic) NSMutableDictionary *timedEvents; // @synthesize timedEvents=_timedEvents;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *networkQueue; // @synthesize networkQueue=_networkQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) NSMutableArray *peopleQueue; // @synthesize peopleQueue=_peopleQueue;
@property(retain, nonatomic) NSMutableArray *eventsQueue; // @synthesize eventsQueue=_eventsQueue;
@property(retain, nonatomic) NSTimer *timer; // @synthesize timer=_timer;
@property(retain) NSDictionary *automaticProperties; // @synthesize automaticProperties=_automaticProperties;
@property(retain) NSDictionary *superProperties; // @synthesize superProperties=_superProperties;
@property(copy, nonatomic) NSString *apiToken; // @synthesize apiToken=_apiToken;
@property(retain) MPNetwork *network; // @synthesize network=_network;
@property(retain, nonatomic) UIViewController *notificationViewController; // @synthesize notificationViewController=_notificationViewController;
@property(nonatomic) unsigned long long taskId; // @synthesize taskId=_taskId;
@property(retain) AutomaticEvents *automaticEvents; // @synthesize automaticEvents=_automaticEvents;
@property(nonatomic, getter=isValidationEnabled) _Bool validationEnabled; // @synthesize validationEnabled=_validationEnabled;
@property(nonatomic) unsigned long long validationEventCount; // @synthesize validationEventCount=_validationEventCount;
@property(nonatomic) unsigned long long validationMode; // @synthesize validationMode=_validationMode;
@property(retain, nonatomic) MPABTestDesignerConnection *abtestDesignerConnection; // @synthesize abtestDesignerConnection=_abtestDesignerConnection;
@property(retain, nonatomic) UILongPressGestureRecognizer *testDesignerGestureRecognizer; // @synthesize testDesignerGestureRecognizer=_testDesignerGestureRecognizer;
@property(retain, nonatomic) CTTelephonyNetworkInfo *telephonyInfo; // @synthesize telephonyInfo=_telephonyInfo;
@property(nonatomic) struct __SCNetworkReachability *reachability; // @synthesize reachability=_reachability;
@property(copy) NSString *nameTag; // @synthesize nameTag=_nameTag;
@property __weak id <MixpanelDelegate> delegate; // @synthesize delegate=_delegate;
@property double miniNotificationPresentationTime; // @synthesize miniNotificationPresentationTime=_miniNotificationPresentationTime;
@property _Bool showNotificationOnActive; // @synthesize showNotificationOnActive=_showNotificationOnActive;
@property _Bool checkForVariantsOnActive; // @synthesize checkForVariantsOnActive=_checkForVariantsOnActive;
@property _Bool checkForNotificationsOnActive; // @synthesize checkForNotificationsOnActive=_checkForNotificationsOnActive;
@property _Bool flushOnBackground; // @synthesize flushOnBackground=_flushOnBackground;
@property(copy, nonatomic) NSString *serverURL; // @synthesize serverURL=_serverURL;
@property(copy) NSString *alias; // @synthesize alias=_alias;
@property(copy) NSString *distinctId; // @synthesize distinctId=_distinctId;
@property(retain) MixpanelPeople *people; // @synthesize people=_people;
- (void).cxx_destruct;
- (void)executeCachedEventBindings;
- (void)joinExperiments;
- (void)joinExperimentsWithCallback:(CDUnknownBlockType)arg1;
- (void)markVariantRun:(id)arg1;
- (void)executeCachedVariants;
- (void)connectToABTestDesigner:(_Bool)arg1;
- (void)connectToABTestDesigner;
- (void)connectGestureRecognized:(id)arg1;
@property _Bool enableVisualABTestAndCodeless;
- (void)markNotificationShown:(id)arg1;
- (void)trackNotification:(id)arg1 event:(id)arg2 properties:(id)arg3;
- (void)notificationController:(id)arg1 wasDismissedWithCtaUrl:(id)arg2 shouldTrack:(_Bool)arg3 additionalTrackingProperties:(id)arg4;
- (_Bool)showMiniNotificationWithObject:(id)arg1;
- (_Bool)showTakeoverNotificationWithObject:(id)arg1;
- (void)showNotificationWithObject:(id)arg1;
- (void)showNotificationWithID:(unsigned long long)arg1;
- (void)showNotificationWithType:(id)arg1;
- (void)showNotification;
- (void)checkForVariantsWithCompletion:(CDUnknownBlockType)arg1;
- (void)checkForNotificationsWithCompletion:(CDUnknownBlockType)arg1;
- (void)checkForDecideResponseWithCompletion:(CDUnknownBlockType)arg1 useCache:(_Bool)arg2;
- (void)checkForDecideResponseWithCompletion:(CDUnknownBlockType)arg1;
@property _Bool enableLogging;
- (void)appLinksNotificationRaised:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)reachabilityChanged:(unsigned int)arg1;
- (void)initializeGestureRecognizer;
- (void)setUpListeners;
- (id)collectAutomaticProperties;
- (id)collectDeviceProperties;
- (id)libVersion;
- (id)currentRadio;
- (void)setCurrentRadio;
- (id)IFA;
- (id)watchModel;
- (id)deviceModel;
@property(readonly, copy) NSString *description;
- (void)unarchiveEventBindings;
- (void)unarchiveVariants;
- (void)unarchiveProperties;
- (void)unarchivePeople;
- (void)unarchiveEvents;
- (void)unarchive;
- (_Bool)addSkipBackupAttributeToItemAtPath:(id)arg1;
- (_Bool)archiveObject:(id)arg1 withFilePath:(id)arg2;
- (void)archiveEventBindings;
- (void)archiveVariants;
- (void)archiveProperties;
- (void)archivePeople;
- (void)archiveEvents;
- (void)archive;
- (id)eventBindingsFilePath;
- (id)variantsFilePath;
- (id)propertiesFilePath;
- (id)peopleFilePath;
- (id)eventsFilePath;
- (id)filePathFor:(id)arg1;
- (void)flushWithCompletion:(CDUnknownBlockType)arg1;
- (void)flush;
- (void)stopFlushTimer;
- (void)startFlushTimer;
@property unsigned long long flushInterval;
- (void)dispatchOnNetworkQueue:(CDUnknownBlockType)arg1;
- (void)reset;
- (void)clearTimedEvents;
- (double)eventElapsedTime:(id)arg1;
- (void)timeEvent:(id)arg1;
- (id)currentSuperProperties;
- (void)clearSuperProperties;
- (void)unregisterSuperProperty:(id)arg1;
- (void)registerSuperPropertiesOnce:(id)arg1 defaultValue:(id)arg2;
- (void)registerSuperPropertiesOnce:(id)arg1;
- (void)registerSuperProperties:(id)arg1;
- (void)trackPushNotification:(id)arg1;
- (void)trackPushNotification:(id)arg1 event:(id)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setupAutomaticPushTracking;
- (void)track:(id)arg1 properties:(id)arg2;
- (void)track:(id)arg1;
- (void)createAlias:(id)arg1 forDistinctID:(id)arg2 usePeople:(_Bool)arg3;
- (void)createAlias:(id)arg1 forDistinctID:(id)arg2;
- (void)identify:(id)arg1 usePeople:(_Bool)arg2;
- (void)identify:(id)arg1;
- (id)defaultDistinctId;
@property unsigned long long maximumSessionDuration;
@property unsigned long long minimumSessionDuration;
@property _Bool useIPAddressForGeoLocation;
@property _Bool shouldManageNetworkActivityIndicator;
- (void)dealloc;
- (id)initWithToken:(id)arg1 andFlushInterval:(unsigned long long)arg2;
- (id)initWithToken:(id)arg1 launchOptions:(id)arg2 andFlushInterval:(unsigned long long)arg3;
- (id)initWithToken:(id)arg1 launchOptions:(id)arg2 flushInterval:(unsigned long long)arg3 trackCrashes:(_Bool)arg4;
- (id)init:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

