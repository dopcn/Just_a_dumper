//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "MMUTrafficConfigManagerDelegate-Protocol.h"

@class AdsMoGoAdCount, AdsMoGoAdCountRequest, AdsMoGoConfigData, AdsMoGoSplashAdNetworkAdapter, MMUTrafficConfigManager, NSData, NSString, NSTimer, UIView;
@protocol AdsMoGoBrowserDelegate, AdsMoGoSplashsDelegate;

@interface AdsMoGoSplashs : NSObject <MMUTrafficConfigManagerDelegate>
{
    _Bool isFinished;
    _Bool isGetConfigData;
    int curPriority;
    int lastWeightType;
    int lastWeightPriority;
    _Bool _isfirstRequest;
    id <AdsMoGoSplashsDelegate> _delegate;
    id <AdsMoGoBrowserDelegate> _browserDelegate;
    NSString *_adID;
    AdsMoGoAdCount *_sspcount;
    NSString *_configkey;
    NSTimer *_getConfigTimer;
    AdsMoGoConfigData *_userConfigData;
    AdsMoGoSplashAdNetworkAdapter *_tempAdapter;
    NSData *_serverConfigData;
    MMUTrafficConfigManager *_serverConfigManger;
    UIView *_splash_background_view;
    AdsMoGoAdCountRequest *_countRequest;
}

@property(nonatomic) _Bool isfirstRequest; // @synthesize isfirstRequest=_isfirstRequest;
@property(retain, nonatomic) AdsMoGoAdCountRequest *countRequest; // @synthesize countRequest=_countRequest;
@property(retain, nonatomic) UIView *splash_background_view; // @synthesize splash_background_view=_splash_background_view;
@property(retain, nonatomic) MMUTrafficConfigManager *serverConfigManger; // @synthesize serverConfigManger=_serverConfigManger;
@property(retain, nonatomic) NSData *serverConfigData; // @synthesize serverConfigData=_serverConfigData;
@property(retain, nonatomic) AdsMoGoSplashAdNetworkAdapter *tempAdapter; // @synthesize tempAdapter=_tempAdapter;
@property(retain, nonatomic) AdsMoGoConfigData *userConfigData; // @synthesize userConfigData=_userConfigData;
@property(retain, nonatomic) NSTimer *getConfigTimer; // @synthesize getConfigTimer=_getConfigTimer;
@property(retain, nonatomic) NSString *configkey; // @synthesize configkey=_configkey;
@property(retain, nonatomic) AdsMoGoAdCount *sspcount; // @synthesize sspcount=_sspcount;
@property(retain, nonatomic) NSString *adID; // @synthesize adID=_adID;
@property(nonatomic) __weak id <AdsMoGoBrowserDelegate> browserDelegate; // @synthesize browserDelegate=_browserDelegate;
@property(nonatomic) __weak id <AdsMoGoSplashsDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)adSplash:(id)arg1 didDismiss:(id)arg2;
- (void)adSplash:(id)arg1 WillDismiss:(id)arg2;
- (void)adSplash:(id)arg1 DidPresent:(id)arg2;
- (void)adSplash:(id)arg1 WillPresent:(id)arg2;
- (void)adSplashFail:(id)arg1 withError:(id)arg2;
- (void)adSplashSuccess:(id)arg1 withSplash:(id)arg2;
- (void)adapterDidStartRequestSplashAd:(id)arg1;
- (void)getDataSuccessWithResult:(id)arg1;
- (void)getDataFailed;
- (void)sendClickCountWithAdAdpter:(id)arg1;
- (void)sendExmetCountWithAdCount:(id)arg1;
- (void)sendRequestCount:(id)arg1;
- (id)getConfigSplashShowTime;
- (id)getBackgroundView;
- (struct CGRect)getSSPRect;
- (id)getSSPView;
- (id)getWindow;
- (void)builderSplashAdapter:(id)arg1;
- (void)startRequestSplashAds:(id)arg1;
- (void)requestSplashPlatforms;
- (void)isGetedConfig;
- (void)createCheckGetedConfigTimer;
- (void)hadGetConfigData;
- (_Bool)isConfigThreadFinish;
- (_Bool)getSplashConfigByServer:(id)arg1;
- (void)configAdsMoGoConfigData;
- (void)configAdsMoGoConfigKey;
- (void)hiddenBackgoundView;
- (void)removeBackgoundView;
- (id)getBackgroundImageName;
- (id)getBackGroundImage;
- (void)setSplashBackgrondViewBackgroundImageView;
- (_Bool)isCurrentInterfaceIsPortrait;
- (void)initSplashBackgroundView;
- (void)adsMoGoCleanData;
- (void)setIsFinish:(_Bool)arg1;
- (void)requestSplashAd;
- (id)initWithAppKey:(id)arg1 AdsMoGoSplashAdsDelegate:(id)arg2 withBroswerDelegate:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

