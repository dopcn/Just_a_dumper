//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "QZAsynMediaPlayerDelegate-Protocol.h"
#import "QZVideoPlayerProtocol-Protocol.h"

@class AVAsset, NSArray, NSError, NSMutableDictionary, NSString, NSTimer, QZAsynMediaPlayer, UIView;
@protocol QZVideoPlayerCallbackProtocol;

@interface QZQQMediaPlayer : NSObject <QZAsynMediaPlayerDelegate, QZVideoPlayerProtocol>
{
    unsigned long long _segNum;
    NSArray *_urlsArray;
    NSArray *_timesArray;
    NSString *_playerId;
    double _lastPlayTime;
    unsigned long long _tryTimes;
    _Bool _isHls;
    NSString *_videoName;
    _Bool _pauseDownload;
    _Bool _muted;
    NSTimer *cachingToPlayTimer;
    unsigned long long waitingNums;
    unsigned long long playButInvalidNum;
    NSMutableDictionary *_segCacheProperty;
    _Bool _isFirstPlay;
    _Bool _tReadToPlay;
    double _tDurration;
    double _tPlayableDuration;
    AVAsset *_tAsset;
    QZAsynMediaPlayer *_player;
    _Bool _isRunning;
    _Bool _autoPlay;
    _Bool _isLocalUrl;
    _Bool _disablePlayerHttp;
    _Bool _closedByPlayerDispatcher;
    _Bool _syncRelease;
    id <QZVideoPlayerCallbackProtocol> _delegate;
    double _loadProgress;
    double _currentPlaybackTime;
    long long _playId;
    CDUnknownBlockType _checkCanPlayBlock;
    CDUnknownBlockType _replaceUrlToLocalHttp;
    CDUnknownBlockType _replaceSegmentUrlToLocalHttp;
    long long _loadState;
    long long _playbackState;
    NSError *_error;
    unsigned long long _actionMask;
    long long _sessionId;
    struct CGSize _resolution;
}

@property(nonatomic) long long sessionId; // @synthesize sessionId=_sessionId;
@property(nonatomic) unsigned long long actionMask; // @synthesize actionMask=_actionMask;
@property(nonatomic) _Bool syncRelease; // @synthesize syncRelease=_syncRelease;
@property(nonatomic) _Bool closedByPlayerDispatcher; // @synthesize closedByPlayerDispatcher=_closedByPlayerDispatcher;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) long long playbackState; // @synthesize playbackState=_playbackState;
@property(nonatomic) long long loadState; // @synthesize loadState=_loadState;
@property(nonatomic) struct CGSize resolution; // @synthesize resolution=_resolution;
@property(copy, nonatomic) CDUnknownBlockType replaceSegmentUrlToLocalHttp; // @synthesize replaceSegmentUrlToLocalHttp=_replaceSegmentUrlToLocalHttp;
@property(copy, nonatomic) CDUnknownBlockType replaceUrlToLocalHttp; // @synthesize replaceUrlToLocalHttp=_replaceUrlToLocalHttp;
@property(copy, nonatomic) CDUnknownBlockType checkCanPlayBlock; // @synthesize checkCanPlayBlock=_checkCanPlayBlock;
@property(nonatomic) long long playId; // @synthesize playId=_playId;
@property(nonatomic) _Bool disablePlayerHttp; // @synthesize disablePlayerHttp=_disablePlayerHttp;
@property(nonatomic) _Bool isLocalUrl; // @synthesize isLocalUrl=_isLocalUrl;
@property(nonatomic) _Bool autoPlay; // @synthesize autoPlay=_autoPlay;
@property(nonatomic) double currentPlaybackTime; // @synthesize currentPlaybackTime=_currentPlaybackTime;
@property(nonatomic) double loadProgress; // @synthesize loadProgress=_loadProgress;
@property(nonatomic) __weak id <QZVideoPlayerCallbackProtocol> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)mediaPlayerProgress:(double)arg1 duration:(double)arg2;
- (double)remainTime;
- (void)mediaPlayerPresentationSize:(struct CGSize)arg1 withFileCacheOrder:(long long)arg2;
- (void)mediaPlayerError:(id)arg1 log:(id)arg2;
- (void)mediaPlayerKeyPath:(id)arg1 change:(id)arg2;
- (void)mediaPlayerPlayedItem:(long long)arg1 playerItem:(id)arg2;
- (void)mediaPlayerPrepareToPlay:(long long)arg1;
- (void)mediaPlayerCacheStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withCacheState:(long long)arg4 withIsCurrentPlayFile:(_Bool)arg5;
- (id)mediaPlayerGetAVAsset:(id)arg1 segNo:(long long)arg2 segDuration:(double)arg3;
- (void)mediaPlayerCheckMediaUrlError:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerRequestStateChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerPlaybackDidFinish:(id)arg1;
- (void)mediaPlayerPlaybackStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerLoadStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerNaturalSizeAvailable:(id)arg1;
- (void)needToChangeBgColor:(CDUnknownBlockType)arg1;
- (void)checkBackgroundColor;
- (id)videoFillMode;
- (void)setVideoFillMode:(id)arg1;
- (void)readyToPlay:(CDUnknownBlockType)arg1;
- (_Bool)playerReadyToPlay:(_Bool)arg1;
- (double)cachePlayableDuration;
- (double)playableDuration;
- (void)getCurrentImage:(id)arg1 async:(_Bool)arg2 complete:(CDUnknownBlockType)arg3;
- (void)asynGetCurrentImage:(CDUnknownBlockType)arg1;
- (id)getCurrentImage;
- (void)getDuration:(CDUnknownBlockType)arg1;
- (double)duration;
- (_Bool)isRealPlaying;
- (_Bool)isRunning;
- (_Bool)isPlaying;
- (double)volume;
- (void)setVolume:(double)arg1;
- (void)markAndClosePlayer;
- (_Bool)isMuted;
- (void)setMuted:(_Bool)arg1;
- (_Bool)needManualPauseDownload;
- (void)resumeLoad;
- (void)pauseLoad;
- (_Bool)canContinueSeek;
- (void)seek:(double)arg1;
- (void)stop;
- (void)pause;
- (void)play;
- (_Bool)checkSetUrl;
- (void)setStrictCheckMode:(_Bool)arg1;
- (void)retryWithURLs:(id)arg1 durations:(id)arg2;
- (void)updateContentUrls:(id)arg1;
- (_Bool)setContentUrls:(id)arg1 withContentTimes:(id)arg2 isHLS:(_Bool)arg3 startTime:(double)arg4;
- (void)setURLs:(id)arg1 durations:(id)arg2 startTime:(double)arg3;
- (void)dealloc;
- (void)reset;
@property(readonly, nonatomic) UIView *view;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

