//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSCache, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSOperationQueue, NSString;
@protocol BBAUBCManagerDelegate;

@interface BBAUBCManager : NSObject
{
    NSMutableSet *_cacheForAllCycles;
    NSMutableSet *_cacheForUnRealCycles;
    NSMutableArray *_cacheForDelayUploadCheckModels;
    NSCache *_cacheForConfigItems;
    unsigned long long _cacheEventAndFlowCount;
    unsigned long long _cacheEventAndFlowCountThreshold;
    double _cacheLastCleanDatabaseTimestamp;
    double _cacheLastCleanDatabaseThreshold;
    NSLock *_cacheForConfigureLock;
    _Bool _hasReceiveComplete;
    NSOperationQueue *_queue;
    _Bool _debugUploadEnable;
    _Bool _isUnitTest;
    id <BBAUBCManagerDelegate> _configDelegate;
    NSNumber *_threshold;
    NSNumber *_timeup;
    NSString *_sign;
    unsigned long long _realRequestCount;
    NSMutableDictionary *_limitTimestampMap;
    NSMutableDictionary *_limitCountMap;
}

+ (id)decodeData:(id)arg1;
+ (id)sharedInstance;
+ (void)registerConfigurator:(id)arg1;
+ (void)initialize;
@property(retain, nonatomic) NSMutableDictionary *limitCountMap; // @synthesize limitCountMap=_limitCountMap;
@property(retain, nonatomic) NSMutableDictionary *limitTimestampMap; // @synthesize limitTimestampMap=_limitTimestampMap;
@property(nonatomic) unsigned long long realRequestCount; // @synthesize realRequestCount=_realRequestCount;
@property(copy) NSString *sign; // @synthesize sign=_sign;
@property(retain, nonatomic) NSNumber *timeup; // @synthesize timeup=_timeup;
@property(retain, nonatomic) NSNumber *threshold; // @synthesize threshold=_threshold;
@property(nonatomic) _Bool isUnitTest; // @synthesize isUnitTest=_isUnitTest;
@property(nonatomic) _Bool debugUploadEnable; // @synthesize debugUploadEnable=_debugUploadEnable;
@property(nonatomic) id <BBAUBCManagerDelegate> configDelegate; // @synthesize configDelegate=_configDelegate;
- (void).cxx_destruct;
- (void)onBBAUBCStoreManagerFateErrorNotification:(id)arg1;
- (void)receiveUBCIntervalException:(id)arg1;
- (_Bool)uploadUnrealDataWhenUploadRealData;
- (_Bool)networkIsAvailable;
- (void)sendRequestData:(id)arg1 timeoutInSeconds:(unsigned long long)arg2 timesToRetryOnTimeout:(unsigned long long)arg3 withCompeletion:(CDUnknownBlockType)arg4;
- (id)moduleFlagForExpKey:(id)arg1 defaultValue:(id)arg2;
- (id)abtestTag;
- (void)runInBackgroundQueue:(CDUnknownBlockType)arg1;
- (_Bool)event:(id)arg1 actionStringValue:(id)arg2 probability:(unsigned long long)arg3 forceSave:(_Bool)arg4 eventDate:(id)arg5;
- (_Bool)event:(id)arg1 object:(id)arg2 probability:(unsigned long long)arg3 forceSave:(_Bool)arg4 eventDate:(id)arg5;
- (void)uploadAllDataAtOnce;
- (_Bool)sampleEvent:(id)arg1 object:(id)arg2 eventDate:(id)arg3;
- (_Bool)sampleEvent:(id)arg1 object:(id)arg2;
- (_Bool)event:(id)arg1 value:(id)arg2 context:(id)arg3;
- (_Bool)event:(id)arg1 object:(id)arg2 eventDate:(id)arg3;
- (_Bool)event:(id)arg1 object:(id)arg2;
- (id)localVersion;
- (void)setupConfigureString:(id)arg1 sign:(id)arg2;
- (void)completeLaunch;
- (void)startWithUnitTest;
- (void)start;
- (void)dealloc;
- (id)init;
- (void)cleanAllCaches;
- (void)cleanCacheForEventOrFlowCount;
- (void)addCacheForEventOrFlowCount;
- (void)updateCacheLastCleanDatabaseTimestamp;
- (_Bool)needCheckAndCleanDatabase;
- (void)cleanAllCacheForConfigureItem;
- (id)cacheForConfigureItemByActionID:(id)arg1;
- (id)cacheForDelayUploadModels;
- (void)cleanCacheForDelayUploadModels;
- (void)putCacheForDelayUploadModels:(id)arg1;
- (void)resetOverflowCountByActionID:(id)arg1;
- (_Bool)checkOverflowOrIncreasedByActionID:(id)arg1 limitCount:(unsigned long long)arg2 baseModel:(id)arg3;
- (void)updateLimitTimestampByActionID:(id)arg1;
- (_Bool)isLimitTimeoutByActionID:(id)arg1 limtDuration:(unsigned long long)arg2;
- (void)putCacheForConfigureUnRealCycles;
- (id)cacheForConfigureUnRealCycles;
- (void)putCacheForConfigureCycles;
- (id)cacheForConfigureCycles;
- (void)increaseCurrentRequestCount;
- (void)resetCurrentRequestCount;
- (unsigned long long)currentRequestCount;
- (_Bool)fetchUBCConfigDataFromSQLiteAsync;
- (_Bool)saveUBCConfigDatabaseAsync:(id)arg1;
- (void)updateTimestampByKey:(id)arg1 toTimeDate:(id)arg2;
- (void)updateTimestampByKey:(id)arg1;
- (_Bool)isTimestampInvalidForKey:(id)arg1 interval:(unsigned long long)arg2;
- (_Bool)insertOrUpdateConfigures:(id)arg1;
- (void)endAutoSaveFlows;
- (id)configureItemByActionID:(id)arg1;
- (_Bool)deleteModels:(id)arg1 connectFilename:(id)arg2;
- (void)updateTimestampByCycle:(long long)arg1 toTimeDate:(id)arg2;
- (void)updateTimestampByCycle:(long long)arg1;
- (_Bool)isTimestampInvalidInCycle:(long long)arg1;
- (void)clearAllData;
- (id)checkUploadResultsWithLimitDataSize:(unsigned long long)arg1 includeNotTimeoutData:(_Bool)arg2 cycles:(id)arg3 limit:(unsigned long long)arg4 outFillCycles:(out id *)arg5 outFillFlows:(out id *)arg6 outFillEvents:(out id *)arg7;
- (id)modelsWithCycle:(long long)arg1 fillFlows:(id *)arg2 fillEvents:(id *)arg3 limit:(unsigned long long)arg4;
- (id)dataWithCycle:(long long)arg1 limit:(unsigned long long)arg2;
- (void)queryForAllUnRealFlows:(id *)arg1 fillEvents:(id *)arg2;
- (void)queryForAllRealFlows:(id *)arg1 fillEvents:(id *)arg2;
- (id)queryForAllFlows;
- (id)queryForAllEventsWithoutFlow;
- (_Bool)checkAndCleanDatabase;
- (_Bool)cleanCloseEventsOrFlowInDatabase;
- (_Bool)_addOrUpdateFlow:(id)arg1 error:(id *)arg2;
- (_Bool)addOrUpdateFlowSync:(id)arg1 error:(id *)arg2;
- (_Bool)addOrUpdateEvent:(id)arg1;
- (_Bool)checkCacheAndUpdateSQLite;
- (void)_flushToFile:(id)arg1 flows:(id)arg2 events:(id)arg3 cycles:(id)arg4 isReal:(_Bool)arg5 uploadInBackground:(_Bool)arg6;
- (id)_checkUploadRealResults:(id *)arg1 fillFlows:(id *)arg2 fillEvents:(id *)arg3;
- (id)_checkUploadUnrealResults:(id *)arg1 fillFlows:(id *)arg2 fillEvents:(id *)arg3;
- (void)uploadFlows:(id)arg1 events:(id)arg2 isReal:(_Bool)arg3;
- (void)checkRealAppendFlushSync;
- (void)checkRealFlushSync;
- (void)checkFlushSync;
- (void)checkFlushAsync;
- (void)forceFlushAllSync;
- (id)ubcstatHelper:(unsigned long long)arg1 data:(id)arg2;
- (void)addUBCStatWithType:(unsigned long long)arg1 log:(id)arg2;
- (void)addUBCStatWithType:(unsigned long long)arg1;

@end

