//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MNBViewController.h"

@class MNFBrightnessViews, MNFDanmakuManager, MNFFullScreenManager, MNFHalfScreenManager, MNFPlayerScreenManager, MNFVideoPlayerManager, MNFVolumeViews, MNMPlayerVideo, MNMVideoPauseSource, MNMVideoProgressBarTriggerSource, MNMVideoRelatedMovies, MNMVideoStatisticsFlag, MNMVideoStatusSource, MTMoviePlayerController, NSArray, NSNumber, NSString, NSTimer, UISlider, UIView;

@interface MNFVideoPlayerVC : MNBViewController
{
    _Bool _isForbidPlayerRotate;
    _Bool _isMute;
    _Bool _hasDanmaku;
    _Bool _vFullScreen;
    _Bool _autoPlayRelatedVideosHalfScreen;
    _Bool _autoPlayRelatedVideosFullScreen;
    _Bool _videoPlayerVCInactive;
    long long _enumServiceVCRotation;
    NSNumber *_numberVideoPlaybackProgress;
    MNFFullScreenManager *_managerFullScreen;
    MNFHalfScreenManager *_managerhalfScreen;
    NSString *_stringDanmakuPlaceHorder;
    MTMoviePlayerController *_controlVideoPlayer;
    MNFVideoPlayerManager *_managerVideoPlayer;
    MNFPlayerScreenManager *_managerPlayerScreen;
    MNFDanmakuManager *_managerDanmaku;
    long long _enumCurrentScreenType;
    long long _enumHalfScreenType;
    long long _enumFullScreenType;
    MNMVideoRelatedMovies *_modelRelatedMovies;
    MNMPlayerVideo *_modelCurrentPlayVideo;
    UISlider *_sliderVolume;
    MNFBrightnessViews *_brightnessView;
    MNFVolumeViews *_volumeView;
    UIView *_viewGestureIn;
    NSNumber *_numberVolumeSelected;
    MNMVideoPauseSource *_sourcePause;
    MNMVideoProgressBarTriggerSource *_sourceProgressBarTrigger;
    MNMVideoStatisticsFlag *_sourceStatisticsFlag;
    MNMVideoStatusSource *_sourceVideoStatus;
    NSArray *_arrayRotationNoMaintain;
    NSTimer *_timerAdvertisement;
}

@property(retain, nonatomic) NSTimer *timerAdvertisement; // @synthesize timerAdvertisement=_timerAdvertisement;
@property(nonatomic) _Bool videoPlayerVCInactive; // @synthesize videoPlayerVCInactive=_videoPlayerVCInactive;
@property(retain, nonatomic) NSArray *arrayRotationNoMaintain; // @synthesize arrayRotationNoMaintain=_arrayRotationNoMaintain;
@property(retain, nonatomic) MNMVideoStatusSource *sourceVideoStatus; // @synthesize sourceVideoStatus=_sourceVideoStatus;
@property(retain, nonatomic) MNMVideoStatisticsFlag *sourceStatisticsFlag; // @synthesize sourceStatisticsFlag=_sourceStatisticsFlag;
@property(retain, nonatomic) MNMVideoProgressBarTriggerSource *sourceProgressBarTrigger; // @synthesize sourceProgressBarTrigger=_sourceProgressBarTrigger;
@property(retain, nonatomic) MNMVideoPauseSource *sourcePause; // @synthesize sourcePause=_sourcePause;
@property(retain, nonatomic) NSNumber *numberVolumeSelected; // @synthesize numberVolumeSelected=_numberVolumeSelected;
@property(retain, nonatomic) UIView *viewGestureIn; // @synthesize viewGestureIn=_viewGestureIn;
@property(retain, nonatomic) MNFVolumeViews *volumeView; // @synthesize volumeView=_volumeView;
@property(retain, nonatomic) MNFBrightnessViews *brightnessView; // @synthesize brightnessView=_brightnessView;
@property(retain, nonatomic) UISlider *sliderVolume; // @synthesize sliderVolume=_sliderVolume;
@property(retain, nonatomic) MNMPlayerVideo *modelCurrentPlayVideo; // @synthesize modelCurrentPlayVideo=_modelCurrentPlayVideo;
@property(retain, nonatomic) MNMVideoRelatedMovies *modelRelatedMovies; // @synthesize modelRelatedMovies=_modelRelatedMovies;
@property(nonatomic) _Bool autoPlayRelatedVideosFullScreen; // @synthesize autoPlayRelatedVideosFullScreen=_autoPlayRelatedVideosFullScreen;
@property(nonatomic) _Bool autoPlayRelatedVideosHalfScreen; // @synthesize autoPlayRelatedVideosHalfScreen=_autoPlayRelatedVideosHalfScreen;
@property(nonatomic) long long enumFullScreenType; // @synthesize enumFullScreenType=_enumFullScreenType;
@property(nonatomic) long long enumHalfScreenType; // @synthesize enumHalfScreenType=_enumHalfScreenType;
@property(nonatomic) long long enumCurrentScreenType; // @synthesize enumCurrentScreenType=_enumCurrentScreenType;
@property(nonatomic) _Bool vFullScreen; // @synthesize vFullScreen=_vFullScreen;
@property(retain, nonatomic) MNFDanmakuManager *managerDanmaku; // @synthesize managerDanmaku=_managerDanmaku;
@property(retain, nonatomic) MNFPlayerScreenManager *managerPlayerScreen; // @synthesize managerPlayerScreen=_managerPlayerScreen;
@property(retain, nonatomic) MNFVideoPlayerManager *managerVideoPlayer; // @synthesize managerVideoPlayer=_managerVideoPlayer;
@property(retain, nonatomic) MTMoviePlayerController *controlVideoPlayer; // @synthesize controlVideoPlayer=_controlVideoPlayer;
@property(retain, nonatomic) NSString *stringDanmakuPlaceHorder; // @synthesize stringDanmakuPlaceHorder=_stringDanmakuPlaceHorder;
@property(nonatomic) _Bool hasDanmaku; // @synthesize hasDanmaku=_hasDanmaku;
@property(retain, nonatomic) MNFHalfScreenManager *managerhalfScreen; // @synthesize managerhalfScreen=_managerhalfScreen;
@property(retain, nonatomic) MNFFullScreenManager *managerFullScreen; // @synthesize managerFullScreen=_managerFullScreen;
@property(retain, nonatomic) NSNumber *numberVideoPlaybackProgress; // @synthesize numberVideoPlaybackProgress=_numberVideoPlaybackProgress;
@property(nonatomic) _Bool isMute; // @synthesize isMute=_isMute;
@property(nonatomic) long long enumServiceVCRotation; // @synthesize enumServiceVCRotation=_enumServiceVCRotation;
@property(nonatomic) _Bool isForbidPlayerRotate; // @synthesize isForbidPlayerRotate=_isForbidPlayerRotate;
- (void).cxx_destruct;
- (void)setPlayerLayerBackgroundColor:(id)arg1;
- (void)setPlayerLayerContents:(id)arg1;
- (void)setVolumeMute:(_Bool)arg1;
- (void)setHideKeyboardBtnHidden:(_Bool)arg1;
- (void)setStatsWhenSharePopVCHide:(id)arg1;
- (void)setStatsWhenShareToOtherApps:(id)arg1;
- (void)setStatsWhenShareBtnClick:(id)arg1;
- (void)setStatsVCID:(id)arg1 needSerialNumber:(_Bool)arg2 withStatsAdditionParam:(id)arg3;
- (void)stopVideoForcely;
- (void)playVideoForcely;
- (void)setVideoPlayerInActive:(_Bool)arg1;
- (void)loadVideoAutomaticallyPlay:(id)arg1;
- (double)widthOfFullScreenView;
- (double)heightOfFullScreenView;
- (double)widthOfHalfScreenView;
- (double)heightOfHalfScreenView;
- (void)setAutoPlayRelatedMovieHalfScreen:(_Bool)arg1 fullScreen:(_Bool)arg2;
- (void)updateHalfScreenType:(long long)arg1 fullScreenType:(long long)arg2;
- (void)endConfigVideoPlayer;
- (void)setDanmakuEnableWithPlaceHolder:(id)arg1;
- (void)setRelatedMoviesEnableWithVideosList:(id)arg1;
- (void)initWithHalfScreenType:(long long)arg1 fullScreenType:(long long)arg2;
- (void)begingConfigVideoPlayer;
- (void)setToastMessage:(id)arg1;
- (void)p_layoutVideoPlayerViews;
- (void)p_configVideoPlayerViews;
- (void)p_configVideoplayerManagers;
- (id)mn_setStatsPageBusinessParam;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
@property(readonly, nonatomic) _Bool fullScreen;
@property(readonly, nonatomic) _Bool isPlayerPlaying;
@property(readonly, nonatomic) NSNumber *numberVideoType;
@property(readonly, nonatomic) NSNumber *numberVideoID;
- (void)mt_routerEventWithName:(id)arg1 userInfo:(id)arg2;
- (void)dealloc;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)mt_createEvents;
- (void)mt_initFields;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)panRecognizer;
- (void)setPanRecognizer:(id)arg1;
- (id)doubleTapsRecognizer;
- (void)setDoubleTapsRecognizer:(id)arg1;
- (id)singleTapRecognizer;
- (void)setSingleTapRecognizer:(id)arg1;
- (void)p_handlePan:(id)arg1;
- (void)addPanGesture;
- (void)p_handleDoubleTaps:(id)arg1;
- (void)addDoubleTapsGesture;
- (void)p_handleSingleTap:(id)arg1;
- (void)addSingleTapGesture;
- (void)addTapGesture:(_Bool)arg1 panGuesture:(_Bool)arg2;
- (long long)currentInterfaceOrientation;
- (_Bool)p_videoUrlIsValid:(id)arg1;
- (void)resetSourceVideoStatus;
- (void)resetSourceProgressBarTrigger;
- (void)resetSourcePause;
- (void)p_resetModelCurrentPlayVideo;
- (void)updateViewPromptWhenScreenTypeUpdated;
- (void)p_adjustViewInPlayerControlView:(_Bool)arg1;
- (void)p_adjustViewGesture:(_Bool)arg1;
- (void)p_adjustDanmakuView:(_Bool)arg1;
- (void)p_adjustViewVideoPlayer:(_Bool)arg1;
- (void)p_adjustViewPrompt:(_Bool)arg1;
- (void)layoutViewVideoPlayer;
- (void)adjustWhenOrientationChangedFullScreen:(_Bool)arg1;
- (void)hideViewPromptOrientationPortraitInView;
- (_Bool)currentScreenTypesSupportAdvertisement:(long long)arg1;
- (_Bool)currentScreenTypesSupportDanmaku:(long long)arg1;
- (_Bool)currentScreenTypesSupportRelatedMovies:(long long)arg1;
- (_Bool)currentScreenTypesSupportPanGesture:(long long)arg1;
- (_Bool)currentScreenTypesSupportClickDoNothing:(long long)arg1;
- (_Bool)currentScreenTypesSupportPrompts:(long long)arg1;
- (void)clearDanmaku;
- (void)setDanmakuDataSource:(id)arg1;
- (void)sendDanmakuBySelf:(id)arg1;
- (id)p_promptViewConfig:(unsigned long long)arg1;
- (void)p_hideViewPrompts:(id)arg1 InView:(id)arg2;
- (void)p_checkComplementaryPromptViewIsExistHighLevel:(id)arg1;
- (void)p_checkComplementaryPromptViewIsExistLowLevel:(id)arg1 promptView:(id)arg2;
- (void)p_checkMutexPromptViewIsExistLowLevel:(id)arg1;
- (_Bool)p_checkMutexPromptViewIsExistHighLevel:(id)arg1;
- (void)resetViewPrompt;
- (void)hideViewPrompt:(unsigned long long)arg1;
- (void)showViewPrompt:(unsigned long long)arg1;
- (void)playVideoAtDefinitionIndex:(unsigned long long)arg1;
- (void)loadVideoAutomaticallyPlay:(id)arg1 autoPlay:(_Bool)arg2;
- (void)p_playVideoAtIndexPath:(id)arg1 vAuto:(_Bool)arg2;
- (void)playSelectedVideoPassive:(id)arg1;
- (void)playNextVideoAuto;
- (void)p_videoPlayerSDKStatisticsNotification:(id)arg1;
- (void)addVideoPlayerSDKStatisticsNotification;
- (void)p_systemVolumeDidChangeNotification:(id)arg1;
- (void)addSystemVolumeDidChangeNotification;
- (void)p_networkingReachabilityDidChange:(id)arg1;
- (void)addNetworkingReachabilityDidChangeNotification;
- (void)p_audioSessionRouteChangeNotification:(id)arg1;
- (void)addAVAudioSessionRouteChangeNotification;
- (void)p_audioSessionInterruptionNotification:(id)arg1;
- (void)addAVAudioSessionInterruptionNotification;
- (void)p_applicationDidBecomeActive:(id)arg1;
- (void)p_applicationWillEnterForeground:(id)arg1;
- (void)p_applicationDidEnterBackground:(id)arg1;
- (void)p_applicationWillResignActive:(id)arg1;
- (void)addApplicationActiveStatusNotification;
- (void)p_deviceOrientationDidChangeNotification:(id)arg1;
- (void)addDeviceOrientationDidChangeNotification;
- (void)p_moviePlayerPlaybackDidFinish:(id)arg1;
- (void)addMoviePlayerPlaybackDidFinishNotification;
- (void)p_moviePlayerPlaybackStateDidChange:(id)arg1;
- (void)addMoviePlayerPlaybackStateDidChangeNotification;
- (void)p_moviePlayerLoadStateDidChange:(id)arg1;
- (void)addMoviePlayerLoadStateDidChangeNotification;
- (void)addNotifications;
- (id)timerHeartbeat;
- (void)setTimerHeartbeat:(id)arg1;
- (id)timerVideoProgress;
- (void)setTimerVideoProgress:(id)arg1;
- (id)timerActionBar;
- (void)setTimerActionBar:(id)arg1;
- (void)p_heartbeat;
- (void)invalidTimerForHeartbeat;
- (void)restartTimerForHeartbeat;
- (void)p_updateVideoProgressInfo;
- (void)invalidTimerForUpdateVideoProgress;
- (void)restartTimerForUpdateVideoProgress;
- (void)p_updateActionBar;
- (void)invalidTimerForHideActionBar;
- (void)restartTimerForHideActionBar;
- (id)requestDanmakuList;
- (void)setRequestDanmakuList:(id)arg1;
- (id)requestDanmakuShoot;
- (void)setRequestDanmakuShoot:(id)arg1;
- (id)requestGetPlayUrl;
- (void)setRequestGetPlayUrl:(id)arg1;
- (id)requestVideoAd;
- (void)setRequestVideoAd:(id)arg1;
- (id)requestGetVideoInfo;
- (void)setRequestGetVideoInfo:(id)arg1;
- (void)loadDataSendDanmakuFailed;
- (void)loadDataSendDanmakuSuccess:(id)arg1;
- (void)loadDataSendDanmaku:(id)arg1 pointSecond:(long long)arg2;
- (void)loadDataDanmakuListFailed;
- (void)loadDataDanmakuListSuccess:(id)arg1;
- (void)loadDataDanmakuListWithStart:(long long)arg1;
- (void)loadDataVideoADFailed;
- (void)loadDataVideoADSuccess:(id)arg1;
- (void)loadDataVideoAd;
- (void)loadDataVideoUrlFailed;
- (void)loadDataVideoUrlSuccess:(id)arg1;
- (void)loadDataVideoUrl;
- (void)loadDataVideoInfoFailed;
- (void)loadDataVideoInfoSuccess:(id)arg1;
- (void)loadDataVideoInfo;

@end

