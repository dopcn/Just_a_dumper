//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "TVKMediaPlayerDelegate-Protocol.h"

@class NSDate, NSMutableArray, NSString, NSTimer, TVKKResourceLoader, TVKMediaPlayInfo, TVKMediaPlayerInfoEventSender, TVKPlayerCachedData, TVKPlayerLogger, TVKPlayerScheduleHistory, TVKPlayerScheduler, TVKPlayerStrategyModel, TVKPlayerVideo, TVKVideoView, UIView;
@protocol TVKIMediaPlayer, TVKPlayerCoreWrapperDelegate;

@interface TVKPlayerCoreWrapper : NSObject <TVKMediaPlayerDelegate>
{
    _Bool _isAirPlay;
    TVKPlayerStrategyModel *_strategyModel;
    unsigned long long _currentType;
    unsigned long long _typeBeforeAirplayOrPip;
    TVKPlayerScheduleHistory *_scheduleHistory;
    long long _videoDecodeMode;
    unsigned long long _suggest;
    _Bool _isRetry;
    unsigned long long _retryState;
    _Bool _hasRetryCgi;
    unsigned long long _airPlayState;
    unsigned long long _pipPlayState;
    TVKPlayerCachedData *_cachedData;
    _Bool _preparedNotified;
    _Bool _airPlayPrepared;
    NSMutableArray *_registeredNotifications;
    _Bool _willEnterForeground;
    _Bool _offlineToOnlineDone;
    _Bool _isSendTcpCnnTime;
    int _lastState;
    id <TVKPlayerCoreWrapperDelegate> _delegate;
    id <TVKIMediaPlayer> _moviePlayerController;
    TVKVideoView *_videoView;
    UIView *_moviePlayerView;
    long long _lastMsgType;
    TVKPlayerScheduler *_scheduler;
    TVKPlayerVideo *_video;
    TVKMediaPlayInfo *_mediaPlayInfo;
    TVKKResourceLoader *_resourceLoader;
    NSTimer *_timer;
    NSDate *_pauseStart;
    NSDate *_previousFireDate;
    TVKPlayerLogger *_logger;
    unsigned long long _retryCount;
    unsigned long long _retryCgiCount;
    TVKMediaPlayerInfoEventSender *_playerInfoEventSender;
    unsigned long long _currentVideoPlayerMsg;
}

@property(nonatomic) unsigned long long currentVideoPlayerMsg; // @synthesize currentVideoPlayerMsg=_currentVideoPlayerMsg;
@property(retain, nonatomic) TVKMediaPlayerInfoEventSender *playerInfoEventSender; // @synthesize playerInfoEventSender=_playerInfoEventSender;
@property(nonatomic) _Bool isSendTcpCnnTime; // @synthesize isSendTcpCnnTime=_isSendTcpCnnTime;
@property(nonatomic) unsigned long long retryCgiCount; // @synthesize retryCgiCount=_retryCgiCount;
@property(nonatomic) unsigned long long retryCount; // @synthesize retryCount=_retryCount;
@property(retain, nonatomic) TVKPlayerLogger *logger; // @synthesize logger=_logger;
@property(retain, nonatomic) NSDate *previousFireDate; // @synthesize previousFireDate=_previousFireDate;
@property(retain, nonatomic) NSDate *pauseStart; // @synthesize pauseStart=_pauseStart;
@property(retain, nonatomic) NSTimer *timer; // @synthesize timer=_timer;
@property(retain, nonatomic) TVKKResourceLoader *resourceLoader; // @synthesize resourceLoader=_resourceLoader;
@property(retain, nonatomic) TVKMediaPlayInfo *mediaPlayInfo; // @synthesize mediaPlayInfo=_mediaPlayInfo;
@property(retain, nonatomic) TVKPlayerVideo *video; // @synthesize video=_video;
@property(retain, nonatomic) TVKPlayerScheduler *scheduler; // @synthesize scheduler=_scheduler;
@property(nonatomic) int lastState; // @synthesize lastState=_lastState;
@property(nonatomic) long long lastMsgType; // @synthesize lastMsgType=_lastMsgType;
@property(retain, nonatomic) UIView *moviePlayerView; // @synthesize moviePlayerView=_moviePlayerView;
@property(retain, nonatomic) TVKVideoView *videoView; // @synthesize videoView=_videoView;
@property(retain, nonatomic) id <TVKIMediaPlayer> moviePlayerController; // @synthesize moviePlayerController=_moviePlayerController;
@property(nonatomic) __weak id <TVKPlayerCoreWrapperDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)notifyPlayerParam;
- (void)notifyPlayerResolutionDidChangeWithWidth:(long long)arg1 height:(long long)arg2;
- (void)notifyPipRestore:(CDUnknownBlockType)arg1;
- (void)notifyPipDidStop;
- (void)notifyPipWillStop;
- (void)notifyPipError:(id)arg1;
- (void)notifyPipDidStart;
- (void)notifyPipWillStart;
- (void)notifyAirPlayError:(id)arg1;
- (void)notifyAirPlayDidStop;
- (void)notifyAirPlayDidStart;
- (void)notifyAirPlayWillStart;
- (void)notifyPlayerAirPlayState:(_Bool)arg1;
- (void)notifyPlayerRetryVInfo:(id)arg1;
- (void)notifyPlayerRetryPrepared:(_Bool)arg1;
- (void)notifyPlayerRetrySetUrlStart;
- (void)notifyOfflineToOnline;
- (void)notifyVideoPlayerMsg:(unsigned long long)arg1 extra1:(id)arg2 extra2:(id)arg3;
- (void)notifyPlayerEvent:(int)arg1 extraInfo:(id)arg2;
- (void)notifyPlayerState:(int)arg1 error:(id)arg2;
- (id)assembleAVAsset:(id)arg1 descID:(long long)arg2 slice:(id)arg3 sliceIndex:(unsigned long long)arg4;
- (id)nameOfPlayerMsgType:(long long)arg1;
- (void)notifyPlayerMsg:(id)arg1 msgType:(long long)arg2 descID:(long long)arg3 extra1:(id)arg4 extra2:(id)arg5;
- (void)applicationDidBecomeActive;
- (void)applicationWillEnterForeground;
- (void)applicationDidEnterBackground;
- (void)unregisterApplicationObservers;
- (void)registerApplicationObservers;
- (_Bool)inRetrying;
- (id)playerTypeString:(unsigned long long)arg1;
- (_Bool)canRetry;
- (_Bool)isPrewatchComplete;
- (id)nameOfPipState:(long long)arg1;
- (void)processPipStateChange:(id)arg1 extra2:(id)arg2;
- (_Bool)isNormalPlay;
- (double)bufferingTimeoutForWillDownloadPlay;
- (double)bufferingTimeout;
- (void)onTimer:(id)arg1;
- (void)resumeCheckCacheTimeout;
- (void)pauseCheckCacheTimeout;
- (void)stopCheckCacheTimeout;
- (void)startCheckCacheTimeout;
- (void)collectCachedData;
- (void)setCachedData;
- (void)setViewForPlayer:(id)arg1;
- (long long)sortOutPlayerCoreErrorCode:(int)arg1;
- (void)restoreFromAirPlay;
- (void)restoreFromPip:(unsigned long long)arg1 error:(id)arg2;
- (_Bool)trySwitchPlayerForPip;
- (void)checkAirPlayDefinitionWhenActive;
- (void)retryForAirPlayError:(int)arg1;
- (void)trySwitchPlayerOnAirPlayError:(int)arg1;
- (_Bool)retryByOfflineToOnlineWithErrorType:(unsigned long long)arg1 error:(id)arg2 retryModel:(id)arg3;
- (_Bool)retryByOnlySwitchPlayer:(unsigned long long)arg1;
- (_Bool)retryByRetryCGIwithHttpsWithErrorType:(unsigned long long)arg1 error:(id)arg2 retryModel:(id)arg3;
- (void)onlySuggestReduceDefinition;
- (_Bool)retryByReduceDefinitionWithErrorType:(unsigned long long)arg1 error:(id)arg2 retryModel:(id)arg3;
- (void)trySwitchPlayerOnError:(int)arg1 actualError:(id)arg2;
- (void)buildPlayerWithType:(unsigned long long)arg1;
- (void)makePlayerStrategy:(_Bool)arg1;
@property(readonly, nonatomic) _Bool pictureInPictureActive;
@property(readonly, nonatomic) _Bool pictureInPicturePossible;
- (void)cleanDLNAPlayDelegate;
- (id)getCurrentScreenShot;
- (_Bool)checkCachingTimeWithDuration;
- (double)checkCachingTimeThanPlayingTime;
- (void)rotateViewWithAngleX:(float)arg1 angleY:(float)arg2 angleZ:(float)arg3;
@property(nonatomic) unsigned long long vrMode;
- (void)switchDefinitionWithMediaPlayInfo:(id)arg1;
- (_Bool)isSupportSeamlessSwitchDefiniton:(id)arg1;
- (_Bool)isSupportSeamlessSwitchDefiniton;
- (void)onPlayNeedReload;
- (void)onPlayNeedTemporaryStop;
- (void)onPlayError:(id)arg1;
- (void)onRetryCgiFailedWithPlayContext:(id)arg1 error:(id)arg2;
- (void)stopPlayer;
- (void)stopPictureInPicture;
- (_Bool)startPictureInPicture;
- (struct CGSize)videoSize;
- (int)captureImageWithWidth:(double)arg1 height:(double)arg2;
- (double)playableDuration;
- (double)duration;
- (double)currentPlayPosition;
- (void)resetDataWhenStop;
- (void)resetPlayer;
- (void)updateVideo:(id)arg1;
@property(nonatomic) _Bool usesExternalPlaybackWhileExternalScreenIsActive;
@property(nonatomic) _Bool allowsExternalPlayback;
- (unsigned long long)stretchMode;
- (void)setStretchMode:(unsigned long long)arg1;
- (void)setLoopBack:(_Bool)arg1;
@property(nonatomic) float volume;
- (void)setPlayRate:(double)arg1;
- (void)seekTo:(double)arg1;
- (void)stopPlay;
- (void)pausePlay;
- (void)startPlay;
- (void)processOpenByRetry;
- (void)openPlayInternalWithOfflineToOnline:(_Bool)arg1;
- (void)openPlayInternal;
- (void)openPlayWithMediaPlayInfo:(id)arg1 playerInfoEventSender:(id)arg2;
- (void)dealloc;
- (id)initWithVideoView:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

