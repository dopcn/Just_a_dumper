//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSStreamDelegate-Protocol.h"

@class LWPQueue, NSInputStream, NSMutableArray, NSMutableData, NSOutputStream, NSRunLoop, NSString, NSTimer, WTLSocketSession;
@protocol WTLSocketDelegate;

@interface WTLSocket : NSObject <NSStreamDelegate>
{
    NSRunLoop *_runLoop;
    NSInputStream *_inputStream;
    NSOutputStream *_outputStream;
    LWPQueue *_socketQueue;
    struct StreamiOS *_wtlstream;
    NSMutableArray *_txbuffs;
    unsigned int _socketStatus;
    int _socketFD;
    NSMutableData *_handshakeBuff;
    _Bool _inputOpened;
    _Bool _outputOpened;
    _Bool _hasErrorFired;
    _Bool _isDealloc;
    NSTimer *_connectTimer;
    NSTimer *_keepAliveTimer;
    NSTimer *_heartBeatTimer;
    double _lastRecvTime;
    long long _writingSize;
    _Bool _encrypted;
    int _port;
    int _connectTimeout;
    id <WTLSocketDelegate> _delegate;
    NSString *_sni;
    NSString *_userAgent;
    NSString *_host;
    double _keepAliveInterval;
    long long _tag;
    WTLSocketSession *_session;
}

+ (unsigned short)portFromSockaddr4:(const struct sockaddr_in *)arg1;
+ (id)hostFromSockaddr4:(const struct sockaddr_in *)arg1;
+ (void)wtlsocketThread;
+ (void)startWTLSocketThreadIfNeeded;
+ (void)ignore:(id)arg1;
@property(readonly, nonatomic) WTLSocketSession *session; // @synthesize session=_session;
@property(readonly, nonatomic) long long writingSize; // @synthesize writingSize=_writingSize;
@property(nonatomic) long long tag; // @synthesize tag=_tag;
@property(nonatomic) double keepAliveInterval; // @synthesize keepAliveInterval=_keepAliveInterval;
@property(nonatomic) int connectTimeout; // @synthesize connectTimeout=_connectTimeout;
@property(nonatomic) int port; // @synthesize port=_port;
@property(copy, nonatomic) NSString *host; // @synthesize host=_host;
@property(copy, nonatomic) NSString *userAgent; // @synthesize userAgent=_userAgent;
@property(copy, nonatomic) NSString *sni; // @synthesize sni=_sni;
@property(nonatomic) _Bool encrypted; // @synthesize encrypted=_encrypted;
@property(nonatomic) __weak id <WTLSocketDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)_getHostAndPortWithCallback:(CDUnknownBlockType)arg1;
- (_Bool)getHost:(id *)arg1 port:(unsigned short *)arg2;
- (id)localHostFromSocket4:(int)arg1;
- (unsigned short)localPortFromSocket4:(int)arg1;
- (id)errorWithCode:(int)arg1 errMsg:(id)arg2;
- (id)wtlsError:(int)arg1;
- (id)connectTimeoutError;
- (void)onCanRead;
- (void)doRecvCtrlExtrl:(id)arg1;
- (void)doRecvBuffer:(id)arg1;
- (void)wtlsRead:(const char *)arg1 length:(long long)arg2;
- (void)onCanWrite;
- (void)onConnectd;
- (void)onConnectdReady;
- (void)triggerHandshakeEvent:(int)arg1;
- (void)onError:(id)arg1;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)flushHandshakeBuff;
- (long long)sendOneBuff:(id)arg1;
- (void)flushTxBuff;
- (void)_asyncOpenStreams;
- (void)_cleanup;
- (void)openStreams;
- (void)initwtlStreamFunc;
- (void)initwtlStream;
- (void)endConnectTimer;
- (void)startConnectTimer;
- (void)handleConnectTimer:(id)arg1;
- (void)checkHeartBeatTimer:(id)arg1;
- (void)startHeartBeatCheckTimer;
- (void)endHeartBeatCheckTimer;
- (void)restartHeartBeatCheckTimer;
- (void)_sendExtraDatagram:(id)arg1;
- (void)sendExtraDatagram:(unsigned char)arg1 buff:(id)arg2;
- (void)_disconnect:(id)arg1;
- (void)disconnect;
- (id)_isDisconnected;
@property(readonly, nonatomic) _Bool isDisconnected;
- (id)_isConnected;
@property(readonly, nonatomic) _Bool isConnected;
- (id)_isConnecting;
- (_Bool)isConnecting;
- (void)add2TxBuff:(id)arg1;
- (void)_sendBuff:(id)arg1;
- (void)sendBuff:(id)arg1;
- (id)_connect;
- (void)connect;
- (void)connectWithSession:(id)arg1;
- (void)dealloc;
- (id)initWithQueue:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

