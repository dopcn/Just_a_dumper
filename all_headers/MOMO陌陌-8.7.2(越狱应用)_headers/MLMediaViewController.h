//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MLBroadcastBaseViewController.h"

#import "MLBroadcastTrafficManagerDelegate-Protocol.h"
#import "MLConferenceHumanDelegate-Protocol.h"
#import "MLConferenceModeSwitchViewControllerDelegate-Protocol.h"
#import "MLConferenceSelectViewDelegate-Protocol.h"
#import "MLMediaDataSourceDelegate-Protocol.h"
#import "MLPlayerManagerDelegate-Protocol.h"
#import "MLRoomDecorationVCDelegate-Protocol.h"

@class LOTAnimationView, MLAudioPlayView, MLBroadcastDataSourceCoordinator, MLBroadcastTrafficManager, MLBroadcastUICoordinator, MLCameraExtensionContributeView, MLConferenceBaseHuman, MLConferenceModeSwitchViewController, MLConferenceWindowController, MLConnectHostDataSource, MLConnectPKModel, MLConnectSlaveDataSource, MLFulltimeDataSource, MLIdentifyDanceHelper, MLLittleWindowContainerView, MLMediaDataSource, MLMultipleMediaCombine, MLRadioBackgroundView, MLRadioWaveView, MLRoomDecorationMovableStickerDisplayController, MLShowRoomProfile, MLTipsLabel, NSArray, NSDate, NSOperationQueue, NSString, UIAlertView, UIImageView, UILabel, UIPanGestureRecognizer, UIScrollView, UIView;

@interface MLMediaViewController : MLBroadcastBaseViewController <MLConferenceHumanDelegate, MLConferenceModeSwitchViewControllerDelegate, MLRoomDecorationVCDelegate, MLConferenceSelectViewDelegate, MLBroadcastTrafficManagerDelegate, MLMediaDataSourceDelegate, MLPlayerManagerDelegate>
{
    _Bool _hasShowNoWifiToast;
    _Bool _audioInterrupting;
    _Bool _cameraExtensionConferenceOldEnableState;
    _Bool _shouldDisposeSEI;
    _Bool _isReceiveScreenSetSei;
    _Bool _isLockedForSlaver;
    _Bool _isGuestInInvitingSessionForSlaver;
    _Bool _isForceToShowBlurBackground;
    _Bool _broadcasterAlreadyUpdateMovableStickers;
    _Bool _firstDidAppear;
    _Bool _isViewDidAppear;
    _Bool _shouldShowEndGuide;
    _Bool _alreadyUpatedSEIManually;
    float _videoFactor;
    MLShowRoomProfile *_oldRoomProfile;
    MLRoomDecorationMovableStickerDisplayController *_movableStickerDisplayController;
    MLMediaDataSource *_mediaDataSource;
    MLBroadcastDataSourceCoordinator *_dataSourceCoordinator;
    MLBroadcastUICoordinator *_uiCoordinator;
    MLConferenceBaseHuman *_conferenceBaseHuman;
    UIView *_backgroundView;
    UIView *_pubViewContainer;
    UIScrollView *_scrollView;
    UIImageView *_maskImageView;
    UIImageView *_radioGaussianBackgroundView;
    MLRadioBackgroundView *_normalRadioBackgroundImageView;
    LOTAnimationView *_radioStyleAnimationView;
    MLLittleWindowContainerView *_conferenceLittleWindowContainer;
    UIImageView *_videoPreviewView;
    MLCameraExtensionContributeView *_cameraExtensionContributeView;
    unsigned long long _slaveStartPublishingType;
    MLIdentifyDanceHelper *_danceDecorateHelper;
    CDUnknownBlockType _friendModeHostDidJoinChannelComplete;
    MLMultipleMediaCombine *_mutipleMediaCombine;
    NSArray *_mfuidInfos;
    NSArray *_cuidsInfos;
    NSArray *_hasInfos;
    NSArray *_mfConferenceFrames;
    long long _seiInnerVersion;
    double _seiCtime;
    unsigned long long _seiPKStatus;
    MLConferenceWindowController *_conferenceWindowVC;
    NSString *_connectingVersionForSlaver;
    NSArray *_colorsArrayForSlaver;
    MLConferenceModeSwitchViewController *_conferenceModeController;
    unsigned long long _conferenceType;
    MLConnectHostDataSource *_hostDataSource;
    MLConnectSlaveDataSource *_slaveDataSource;
    MLBroadcastTrafficManager *_trafficManager;
    double _starPKRemainingTime;
    double _starPKRemainingTimeAnchor;
    MLFulltimeDataSource *_fulltimeDataSource;
    unsigned long long _taskIdentifier;
    NSOperationQueue *_seiAudioDisposalQueue;
    MLTipsLabel *_lblTips;
    UIImageView *_blurredCoverImageView;
    UIImageView *_blurredErrorCoverView;
    UIImageView *_blurImageView;
    UIAlertView *_noWifiAlert;
    MLAudioPlayView *_audioPlayView;
    MLRadioWaveView *_radioWaveView;
    UIImageView *_radioWaveBackImageView;
    NSDate *_exitLittleWindowDate;
    NSString *_lastSplash;
    struct CGRect _videoPlayerFrame;
}

@property(retain, nonatomic) NSString *lastSplash; // @synthesize lastSplash=_lastSplash;
@property(retain, nonatomic) NSDate *exitLittleWindowDate; // @synthesize exitLittleWindowDate=_exitLittleWindowDate;
@property(retain, nonatomic) UIImageView *radioWaveBackImageView; // @synthesize radioWaveBackImageView=_radioWaveBackImageView;
@property(retain, nonatomic) MLRadioWaveView *radioWaveView; // @synthesize radioWaveView=_radioWaveView;
@property(nonatomic) _Bool alreadyUpatedSEIManually; // @synthesize alreadyUpatedSEIManually=_alreadyUpatedSEIManually;
@property(retain, nonatomic) MLAudioPlayView *audioPlayView; // @synthesize audioPlayView=_audioPlayView;
@property(nonatomic) _Bool shouldShowEndGuide; // @synthesize shouldShowEndGuide=_shouldShowEndGuide;
@property(nonatomic) _Bool isViewDidAppear; // @synthesize isViewDidAppear=_isViewDidAppear;
@property(retain, nonatomic) UIAlertView *noWifiAlert; // @synthesize noWifiAlert=_noWifiAlert;
@property(nonatomic) _Bool firstDidAppear; // @synthesize firstDidAppear=_firstDidAppear;
@property(nonatomic) _Bool broadcasterAlreadyUpdateMovableStickers; // @synthesize broadcasterAlreadyUpdateMovableStickers=_broadcasterAlreadyUpdateMovableStickers;
@property(retain, nonatomic) UIImageView *blurImageView; // @synthesize blurImageView=_blurImageView;
@property(retain, nonatomic) UIImageView *blurredErrorCoverView; // @synthesize blurredErrorCoverView=_blurredErrorCoverView;
@property(retain, nonatomic) UIImageView *blurredCoverImageView; // @synthesize blurredCoverImageView=_blurredCoverImageView;
@property(retain, nonatomic) MLTipsLabel *lblTips; // @synthesize lblTips=_lblTips;
@property(nonatomic) struct CGRect videoPlayerFrame; // @synthesize videoPlayerFrame=_videoPlayerFrame;
@property(retain, nonatomic) NSOperationQueue *seiAudioDisposalQueue; // @synthesize seiAudioDisposalQueue=_seiAudioDisposalQueue;
@property(nonatomic) unsigned long long taskIdentifier; // @synthesize taskIdentifier=_taskIdentifier;
@property(nonatomic) _Bool isForceToShowBlurBackground; // @synthesize isForceToShowBlurBackground=_isForceToShowBlurBackground;
@property(retain, nonatomic) MLFulltimeDataSource *fulltimeDataSource; // @synthesize fulltimeDataSource=_fulltimeDataSource;
@property(nonatomic) double starPKRemainingTimeAnchor; // @synthesize starPKRemainingTimeAnchor=_starPKRemainingTimeAnchor;
@property(nonatomic) double starPKRemainingTime; // @synthesize starPKRemainingTime=_starPKRemainingTime;
@property(retain, nonatomic) MLBroadcastTrafficManager *trafficManager; // @synthesize trafficManager=_trafficManager;
@property(retain, nonatomic) MLConnectSlaveDataSource *slaveDataSource; // @synthesize slaveDataSource=_slaveDataSource;
@property(retain, nonatomic) MLConnectHostDataSource *hostDataSource; // @synthesize hostDataSource=_hostDataSource;
@property(nonatomic) unsigned long long conferenceType; // @synthesize conferenceType=_conferenceType;
@property(retain, nonatomic) MLConferenceModeSwitchViewController *conferenceModeController; // @synthesize conferenceModeController=_conferenceModeController;
@property(readonly, copy, nonatomic) NSArray *colorsArrayForSlaver; // @synthesize colorsArrayForSlaver=_colorsArrayForSlaver;
@property(nonatomic) _Bool isGuestInInvitingSessionForSlaver; // @synthesize isGuestInInvitingSessionForSlaver=_isGuestInInvitingSessionForSlaver;
@property(copy, nonatomic) NSString *connectingVersionForSlaver; // @synthesize connectingVersionForSlaver=_connectingVersionForSlaver;
@property(readonly, nonatomic) _Bool isLockedForSlaver; // @synthesize isLockedForSlaver=_isLockedForSlaver;
@property(retain, nonatomic) MLConferenceWindowController *conferenceWindowVC; // @synthesize conferenceWindowVC=_conferenceWindowVC;
@property(nonatomic) _Bool isReceiveScreenSetSei; // @synthesize isReceiveScreenSetSei=_isReceiveScreenSetSei;
@property(nonatomic) unsigned long long seiPKStatus; // @synthesize seiPKStatus=_seiPKStatus;
@property(nonatomic) double seiCtime; // @synthesize seiCtime=_seiCtime;
@property(nonatomic) _Bool shouldDisposeSEI; // @synthesize shouldDisposeSEI=_shouldDisposeSEI;
@property(nonatomic) long long seiInnerVersion; // @synthesize seiInnerVersion=_seiInnerVersion;
@property(copy, nonatomic) NSArray *mfConferenceFrames; // @synthesize mfConferenceFrames=_mfConferenceFrames;
@property(copy, nonatomic) NSArray *hasInfos; // @synthesize hasInfos=_hasInfos;
@property(copy, nonatomic) NSArray *cuidsInfos; // @synthesize cuidsInfos=_cuidsInfos;
@property(copy, nonatomic) NSArray *mfuidInfos; // @synthesize mfuidInfos=_mfuidInfos;
@property(retain, nonatomic) MLMultipleMediaCombine *mutipleMediaCombine; // @synthesize mutipleMediaCombine=_mutipleMediaCombine;
@property(copy, nonatomic) CDUnknownBlockType friendModeHostDidJoinChannelComplete; // @synthesize friendModeHostDidJoinChannelComplete=_friendModeHostDidJoinChannelComplete;
@property(retain, nonatomic) MLIdentifyDanceHelper *danceDecorateHelper; // @synthesize danceDecorateHelper=_danceDecorateHelper;
@property(nonatomic) unsigned long long slaveStartPublishingType; // @synthesize slaveStartPublishingType=_slaveStartPublishingType;
@property(nonatomic) _Bool cameraExtensionConferenceOldEnableState; // @synthesize cameraExtensionConferenceOldEnableState=_cameraExtensionConferenceOldEnableState;
@property(retain, nonatomic) MLCameraExtensionContributeView *cameraExtensionContributeView; // @synthesize cameraExtensionContributeView=_cameraExtensionContributeView;
@property(nonatomic) float videoFactor; // @synthesize videoFactor=_videoFactor;
@property(nonatomic) _Bool audioInterrupting; // @synthesize audioInterrupting=_audioInterrupting;
@property(nonatomic) _Bool hasShowNoWifiToast; // @synthesize hasShowNoWifiToast=_hasShowNoWifiToast;
@property(nonatomic) __weak UIImageView *videoPreviewView; // @synthesize videoPreviewView=_videoPreviewView;
@property(retain, nonatomic) MLLittleWindowContainerView *conferenceLittleWindowContainer; // @synthesize conferenceLittleWindowContainer=_conferenceLittleWindowContainer;
@property(retain, nonatomic) LOTAnimationView *radioStyleAnimationView; // @synthesize radioStyleAnimationView=_radioStyleAnimationView;
@property(retain, nonatomic) MLRadioBackgroundView *normalRadioBackgroundImageView; // @synthesize normalRadioBackgroundImageView=_normalRadioBackgroundImageView;
@property(retain, nonatomic) UIImageView *radioGaussianBackgroundView; // @synthesize radioGaussianBackgroundView=_radioGaussianBackgroundView;
@property(retain, nonatomic) UIImageView *maskImageView; // @synthesize maskImageView=_maskImageView;
@property(retain, nonatomic) UIScrollView *scrollView; // @synthesize scrollView=_scrollView;
@property(retain, nonatomic) UIView *pubViewContainer; // @synthesize pubViewContainer=_pubViewContainer;
@property(readonly, nonatomic) __weak UIView *backgroundView; // @synthesize backgroundView=_backgroundView;
@property(retain, nonatomic) MLConferenceBaseHuman *conferenceBaseHuman; // @synthesize conferenceBaseHuman=_conferenceBaseHuman;
@property(nonatomic) __weak MLBroadcastUICoordinator *uiCoordinator; // @synthesize uiCoordinator=_uiCoordinator;
@property(nonatomic) __weak MLBroadcastDataSourceCoordinator *dataSourceCoordinator; // @synthesize dataSourceCoordinator=_dataSourceCoordinator;
@property(retain, nonatomic) MLMediaDataSource *mediaDataSource; // @synthesize mediaDataSource=_mediaDataSource;
@property(retain, nonatomic) MLRoomDecorationMovableStickerDisplayController *movableStickerDisplayController; // @synthesize movableStickerDisplayController=_movableStickerDisplayController;
@property(retain, nonatomic) MLShowRoomProfile *oldRoomProfile; // @synthesize oldRoomProfile=_oldRoomProfile;
- (void).cxx_destruct;
- (void)handleForceLogout:(id)arg1;
- (void)handleCloseVideoNotify;
- (void)updateAudioCover:(id)arg1;
- (void)removeRadioWaveLottieView;
- (void)didSelectAlertCloseRoomAtIndex:(long long)arg1;
- (void)didSelectAlertIfContinueWithoutWifiAtIndex:(long long)arg1 isPlayer:(_Bool)arg2;
- (void)didSelectAlertIfContinueToBroadcastWhenBadNetworkAtIndex:(long long)arg1;
- (id)roomId;
- (void)changedToAudioMode;
- (void)addAudioPlayView;
- (void)getAudioPlayURL;
- (void)guestHandleRoomProfileUpdate:(id)arg1 zeroing:(_Bool)arg2;
- (void)fakeRadioFriendShowSEI;
- (void)roomOwnerHandleRoomProfileUpdate:(id)arg1 zeroing:(_Bool)arg2;
- (void)resetSubviews;
- (void)configureSwitchPublisher;
- (long long)linkType;
- (long long)logUserType;
- (void)resetPubContainerFrame:(unsigned long long)arg1;
- (void)fullfillErrorCoverView;
- (void)shouldShowErrorCover:(_Bool)arg1;
- (void)updateErrorBlurCover:(_Bool)arg1;
- (void)handleExtensionLandscapeForAudience;
- (void)handleRoomOwnerShouldLandscape;
- (_Bool)onTouchPointFromScroll:(struct CGPoint)arg1 event:(id)arg2;
- (void)addCameraExtensionContributeView;
- (void)hideSubviewWhenSwitchRoom;
- (_Bool)isDidAppearFromLitteWindow;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)didRecvPublishConnectionReset:(_Bool)arg1;
- (_Bool)isMySelfConnecting;
- (_Bool)isConnecting;
- (_Bool)isGuestPublisher;
- (void)stopMusic;
- (void)updateRankingPhoto:(id)arg1 forStarId:(id)arg2;
- (void)updateConferneceWindowThumbs:(long long)arg1 forStarId:(id)arg2;
- (void)roomDecorationPanelDismissConfirmed:(_Bool)arg1;
- (void)endBroadcast;
- (_Bool)isWifiNotice;
- (void)startAutoLianmai;
- (id)getPubViewContainer;
- (void)resetSoundEffect;
- (void)startPublishingWithOptions:(id)arg1;
- (void)closeBroadcastWithAlert:(_Bool)arg1;
- (void)startBroadcastQueryPubParam;
- (void)showContinueWithoutWifi;
- (void)showNoWiFiAlert;
- (_Bool)isReachableViaWWANAndPlayerIsPlaying;
- (void)didRecevieReachabilityChanged:(id)arg1;
- (void)updateUI:(_Bool)arg1;
- (void)showLiveGameWebView;
- (_Bool)audioLoopbackStatus;
- (void)audioLoopbackSetEnabled;
- (void)startBroadcast;
- (void)prepareStartBroadcast;
- (void)startPublishing;
- (void)beginExtendScreen;
- (void)switchCamera;
- (struct CGRect)getRemoteRenderLandScapeViewframe;
- (struct CGSize)getRemoteRenderViewSize;
- (void)queryVideoEndGuidesSuccess:(id)arg1;
- (void)sendLiveEndGuideRequest;
- (void)requestLiveVideoEndedGuides;
- (void)liveBroadcastEnded;
- (_Bool)isCurrentRoomConnecting;
- (void)onVideoEnd:(id)arg1;
- (void)removeErrorFloatView;
- (void)setStallingTextHiddenByReachibility;
- (_Bool)isShowingNoWiFiAlertWithoutSelection;
- (void)resetPlayerManagerViewFrameWithVideoSizeIfNeeded:(struct CGSize)arg1;
- (void)player:(id)arg1 didVideoSizeChanged:(struct CGSize)arg2;
- (void)playerManager:(id)arg1 didRecvUserInfo:(id)arg2;
- (void)playerManager:(id)arg1 didRecvTS:(long long)arg2;
- (void)playerManager:(id)arg1 didRecvUserInfoForScreens:(id)arg2;
- (void)playerManagerPlayingEndStalling:(id)arg1;
- (id)getLowestQualityVideo;
- (void)onPhoneVideoBuffer;
- (void)onTriviaVideoBuffer;
- (void)playerManagerPlayingStartStalling:(id)arg1;
- (void)playerManagerPlayingFailed:(id)arg1 errorCode:(long long)arg2;
- (void)playerManagerDidFinishPlaying:(id)arg1;
- (void)playerManagerStartRendering:(id)arg1;
- (void)handleEvent:(long long)arg1 params:(id)arg2;
- (void)closePlayer;
- (void)hidePreviewWithAnimation;
- (void)videoDidRender;
- (void)videoDidFinish;
- (void)showErrorFloatView;
- (void)videoConnectFail;
- (void)startEnterAndShowMaskView;
- (void)playVideoOfCurrentRoomWithPlayback:(_Bool)arg1 zeroing:(_Bool)arg2;
- (void)playVideoOfCurrentRoomWithPlayback:(_Bool)arg1;
- (void)setupForReplayWithUrl:(id)arg1;
- (void)playVideoOfCurrentRoom;
- (void)removeBroadcasterVoiceDecoration;
- (void)addBroadcasterVoiceDecoration;
- (void)enableBroadcastVoiceDecorationIfNeeded;
- (void)shouldUpdateMovableStickerLimitInfo:(id)arg1;
- (void)shouldRemoveAllStickers:(id)arg1;
- (void)shouldRemoveMovableSticker:(id)arg1;
- (void)shouldAddMovableSticker:(id)arg1;
- (void)showMovableStickerDisplayView:(_Bool)arg1;
- (void)addMovableStickerDisplayView;
- (void)fullfillVideoPreview;
- (void)prepareBackgroundBlurImage;
- (void)addRoomTipLabel;
- (void)scaleHeaderViewWith:(double)arg1;
- (void)removeRadioStartBroadcastView;
- (void)addRadioStartBroadcastView;
- (void)setupVideoPreviewView;
- (void)changeVideoPreviewView;
- (void)setupBlurredBackImageView;
- (void)setupBackgroundBlurImageView;
- (void)resetPlayerFrame;
- (void)addRemoteRenderView;
- (void)addMaskImageView;
- (void)addConferenceWindowView;
- (void)setupGrayBackgroundView;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)roomProfileHasUpdated;
- (void)registerNotifications;
- (void)setupSubviews;
- (void)didReceiveMemoryWarning;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)dealloc;
- (void)protobufDidReceivePKModeStarRequestClose:(id)arg1;
- (void)protobufDidReceivePKModeCount:(id)arg1;
- (void)protobufDidReceivePKModeStarAgree:(id)arg1;
- (void)protobufDidReceivePKModeUserApply:(id)arg1 groupInfo:(id)arg2;
- (void)protobufDidReceiveCompereModeStarRequestClose:(id)arg1;
- (void)protobufDidReceiveCompereModeCount:(id)arg1;
- (void)protobufDidReceiveCompereModeStarAgree:(id)arg1;
- (void)protobufDidReceiveCompereModeUserApply:(id)arg1 groupInfo:(id)arg2;
- (void)hostOfflineHandleReportConnectConfigSuccessWithConnectType:(unsigned long long)arg1 changed:(_Bool)arg2;
- (void)hostOfflineHandleSwitchConnectWithOldType:(unsigned long long)arg1 newType:(unsigned long long)arg2;
- (void)requestEmceeVoiceSettingsFail:(id)arg1;
- (void)requestEmceeVoiceSettingsError:(id)arg1;
- (void)requestEmceeVoiceSettingsSuccess:(id)arg1;
- (void)emceeHandleMuteOperationWithMomoID:(id)arg1 muteType:(unsigned long long)arg2;
- (void)requestEmceeCloseConnectFail:(id)arg1;
- (void)requestEmceeCloseConnectError:(id)arg1;
- (void)requestEmceeCloseConnectSuccess:(id)arg1;
- (void)emceeHandleWaitListCloseConnectWithMomoID:(id)arg1;
- (void)requestEmceeConfirmConnectFail:(id)arg1;
- (void)requestEmceeConfirmConnectError:(id)arg1;
- (void)requestEmceeConfirmConnectSuccess:(id)arg1;
- (void)emceeHandleWaitListConfirmConnectWithMomoID:(id)arg1;
- (void)hostOnlineRoomIfNeed;
- (void)hostOfflineRoomIfNeed;
- (void)protobufDidReceiveLinkAfkClose:(id)arg1;
- (void)protobufDidReceiveLinkAfkAgree:(id)arg1;
- (void)protobufDidReceiveLinkAfkUnSilenceUser:(id)arg1;
- (void)protobufDidReceiveLinkAfkSilenceUser:(id)arg1;
- (void)startDanceDecorate;
- (void)stopDanceDecorate;
- (void)protobufDidReceiveStartDetect:(id)arg1;
- (void)fulltimeHostUpdateUIForRoomProfileUpdateIfNeedWith:(_Bool)arg1;
- (void)linkCloseFailure:(id)arg1;
- (void)linkCloseError:(id)arg1;
- (void)linkCloseSuccess:(id)arg1;
- (void)fulltimeInformServerAfterSlaveLeaveChannel;
- (void)linkConnectSuccessFailure:(id)arg1;
- (void)linkConnectSuccessError:(id)arg1;
- (void)linkConnectSuccessSuccess:(id)arg1;
- (void)fulltimeInformServerSlaveJoinChannelSuccess;
- (void)releasePublisherForFulltime;
- (void)releaseAudioSourceForFulltime;
- (void)releaseMediaCombinerForFulltime;
- (void)fulltimeClosePublisherForOffline;
- (void)hostOfflineFail:(id)arg1;
- (void)hostOfflineError:(id)arg1;
- (void)hostOfflineSuccess:(id)arg1;
- (void)fulltimeHostOfflineRoomForce:(_Bool)arg1;
- (void)fulltimeHostOnlineRequest;
- (void)creatFulltimeRoomFailure:(id)arg1;
- (void)creatFulltimeRoomError:(id)arg1;
- (void)creatFulltimeRoomSuccess:(id)arg1;
- (void)requestCreatFulltimeRoom;
- (void)protobufDidReceiveAllDayRoomLinkSlaveMuteSuccess:(id)arg1;
- (void)protobufDidReceiveAllDayRoomLinkCount:(id)arg1;
- (void)protobufDidReceiveAllDayRoomLinkUserApply:(id)arg1;
- (void)protobufDidReceiveAllDayRoomCreateSuccess:(id)arg1;
- (void)initializeFulltimeDataSourceIfNeed;
- (void)startBroadcastWithFulltimeIfNeed;
- (void)hostReleaseCameraSourceIfNeed;
- (void)hostConfigNormalRadioBackgroundImageIfNeed;
- (void)protobufDidReceiveRadioModeSlaveMuteSuccess:(id)arg1 groupInfo:(id)arg2;
- (void)protobufDidReceiveRadioModeCount:(id)arg1;
- (void)protobufDidReceiveRadioModeUserApply:(id)arg1 groupInfo:(id)arg2;
- (struct CGRect)playerRatioRectFromDisplayRect:(struct CGRect)arg1;
- (struct CGRect)playerDisplayRectFromRatioRect:(struct CGRect)arg1;
- (struct CGRect)playerDisplayRectLandscapeFromRatioRect:(struct CGRect)arg1;
- (struct CGRect)publisherRatioRectFromDisplayRect:(struct CGRect)arg1;
- (struct CGRect)publisherDisplayRectFromRatioRect:(struct CGRect)arg1;
- (struct CGRect)publisherDisplayRectLandscapeFromRatioRect:(struct CGRect)arg1;
- (struct CGSize)sizeOfVideo;
- (void)updateExtensionLandscapeSeiInfo:(_Bool)arg1;
- (void)updatePostSeiInfo:(struct CGRect)arg1 scale:(unsigned long long)arg2 dict:(id)arg3;
- (void)updateRatioToScreenRatio:(double)arg1 type:(unsigned long long)arg2;
- (void)scalingCameraExtensionContributeView:(unsigned long long)arg1;
- (void)startScreenRecordFunction:(unsigned long long)arg1;
- (void)updateExtensionSeiInfo:(struct CGRect)arg1 localSourceAsPrimarySource:(_Bool)arg2;
- (void)changeCameraExtensionViewWindows:(struct CGRect)arg1;
- (void)hideCameraExtensionViewWindows;
- (void)showCameraExtensionViewWindows:(struct CGRect)arg1 localSourceAsPrimarySource:(_Bool)arg2 postDict:(id)arg3 type:(unsigned long long)arg4;
- (_Bool)handleExtensionContributeViewSeiInfo:(id)arg1;
- (void)disposalSeiScreenSetInfo:(id)arg1;
- (void)updateSei;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)hideTipsLabel;
- (void)showTipsLabel;
- (void)restoreScreen;
- (void)clearScreen;
- (void)handlePanGestureRecognizer:(id)arg1;
- (void)removePanGesture;
- (void)addPanGesture;
@property(retain, nonatomic) UIPanGestureRecognizer *panGesture; // @dynamic panGesture;
@property(nonatomic) struct CGPoint currentCenter; // @dynamic currentCenter;
@property(nonatomic) struct CGRect postRatioRect; // @dynamic postRatioRect;
@property(retain, nonatomic) UILabel *tipsLabel; // @dynamic tipsLabel;
- (void)setCameraExtensionContributeViewFrame:(struct CGRect)arg1;
- (void)hostConnectReceiveHeartBeatStopWithMomoID:(id)arg1;
- (void)hostHandleAfterEmceeEndConnectInitIJKPublisher;
- (void)hostHandleAfterEmceeStartConnectInitConferencePublisher;
- (void)hostHandleEmceeCountdownSecondCallbackWithSlaveID:(id)arg1 time:(double)arg2;
- (void)hostConfigBackgroundImageForConnectMf;
- (void)hostConfigMediaCombinerForConnectMfIfNeed;
- (void)hostConfigMediaCombinerForConnectMfIfNeedWithVideoSize:(struct CGSize)arg1;
- (void)hostHandleAudioVolumeOfSpeakers:(id)arg1;
- (void)hostUpdateRemoteViewsWithSlaveInfos;
- (void)hostConfigMediaCombinerForConnectCommonIfNeed;
- (void)hostReportConnectConfigSuccessWithConnectType:(unsigned long long)arg1 changed:(_Bool)arg2;
- (void)hostStartBroadcastForConnectType;
- (void)hostUpdateSlaveInfoRanks:(id)arg1 forStarID:(id)arg2;
- (void)hostUpdateSlaveInfoThumbs:(long long)arg1 forStarID:(id)arg2;
- (void)hostUpdateSlaveInfosForProfileLinkSuccess;
- (void)initializeConnectHostDataSourceIfNeed;
- (id)hostCurrentRoomProfile;
- (_Bool)questionConnecting;
- (void)setQuestionConnecting:(_Bool)arg1;
- (_Bool)isInQuestionConnectScreen;
- (void)hostCloseQuestionConnectScreen;
- (void)protobufDidReceiveQuestionConnectNoticeUser:(id)arg1;
- (void)protobufDidReceiveQuestionConnectStop:(id)arg1;
- (void)protobufDidReceiveQuestionConnectStart:(id)arg1;
- (void)protobufDidReceiveConnectModeSlaveMuteSuccess:(id)arg1 groupInfo:(id)arg2;
- (void)protobufDidReceiveConnectModeSetSlaveMute:(id)arg1;
- (void)protobufDidReceiveConnectModeStarRequestClose:(id)arg1;
- (void)protobufDidReceiveConnectModeCount:(id)arg1;
- (void)protobufDidReceiveConnectModeStarAgree:(id)arg1;
- (void)protobufDidReceiveConnectModeUserApply:(id)arg1 groupInfo:(id)arg2;
- (void)queryGuestPubParamFail:(id)arg1;
- (void)queryGuestPubParamError:(id)arg1;
- (void)startPubForConferenceError:(id)arg1;
- (void)startPubForConferenceFail:(id)arg1;
- (void)startPubForConferenceSuccess:(id)arg1;
- (void)startRadioGuestPublishWithParam:(id)arg1;
- (void)stopIJKPlayer;
- (void)queryGuestPubParamSuccess:(id)arg1;
- (void)queryGuestPubParam;
- (void)protobufGuestReceiveHostAgreeToConference:(id)arg1;
- (void)slaveCloseConference;
- (id)conferenceGuest;
- (void)resetSlaveMute:(unsigned long long)arg1;
- (void)setSlaveMute:(unsigned long long)arg1;
- (void)protobufDidReceiveRadioModeSetSlaveMute:(id)arg1;
- (void)protobufDidReceiveRadioModeStarRequestClose:(id)arg1;
- (void)protobufDidReceiveRadioModeStarAgree:(id)arg1;
- (void)setPublisherMuteStatus:(unsigned long long)arg1;
- (void)doSomethingInBackground;
- (void)cancelBackgroundUpdateTask;
- (void)endBackgroundUpdateTask;
- (void)beginBackgroundUpdateTask;
- (void)enterBackgroundUpdateTask;
- (void)appDidEnterBackgroundNotificationForConference;
- (void)appWillEnterForegroundNotificationForConference;
- (void)guestReceiveConnectChangeMode;
- (void)updateMovableStickerWithUpdateRoomProfileSuccess;
- (void)updateApplyConferenceStateWithUpdateRoomProfileSuccess;
- (void)handleFollowStarNotification;
- (void)setConnectWindowFollowStatus:(_Bool)arg1;
- (void)informedConferenceHumanStopPublishing:(long long)arg1;
- (void)rmLrcView;
- (void)guestConnectButtonClick;
- (void)openConference;
- (_Bool)usingCameraExtension;
- (void)updateWaitConferenceViewWithWaitCount:(unsigned long long)arg1 role:(unsigned long long)arg2;
- (void)updateWaitConferenceViewWithAvatarArray:(id)arg1;
- (void)updateConferenceWaitingCount:(long long)arg1 userImageArray:(id)arg2;
- (void)filterControllerCancel:(id)arg1;
- (void)filterController:(id)arg1 didDeselectFilter:(id)arg2 beautiful:(_Bool)arg3;
- (void)filterController:(id)arg1 didSelectFilter:(id)arg2 beautiful:(_Bool)arg3;
- (void)beginAutomicConnectWhenFriendMode;
- (void)didReceiveUpdateWaitListFromAPINotification:(id)arg1;
- (void)conferenceWaitingListUpdate:(id)arg1;
- (void)restartPlayHostVideo;
- (void)guestCloseConferencePublisher:(unsigned long long)arg1;
- (void)enableGesture:(_Bool)arg1;
- (void)setHostMediaID:(id)arg1;
- (void)showConferenceGiftPanelWithSlavermodel:(id)arg1;
- (void)showConferenceRankingDelegate:(id)arg1;
- (void)showUserCardWithMomoid:(id)arg1;
- (void)conferenceDidEnd;
- (void)conferenceDidStart;
- (void)conferenceHumanDismissDecorationPanel;
- (void)conferenceHumanShowDecorationPanel;
- (void)onUserStatusChanged;
- (void)exitConferenceFromGuestShouldReplayVideo:(_Bool)arg1 closeReason:(unsigned long long)arg2;
- (void)startPubForConferenceFail:(id)arg1;
- (void)liveGameNoticeWeb;
- (void)startPubForConferenceSuccess:(id)arg1;
- (void)startGuestPublishWithParam:(id)arg1;
- (id)applyPublishGotoString;
- (void)applyConferenceSuccess:(_Bool)arg1;
- (void)modeSwitchController:(id)arg1 connectModeTypeChanged:(unsigned long long)arg2 changed:(_Bool)arg3;
- (void)updateConferenceModelItem;
- (void)dismissConferenceModeView;
- (void)showModeSwitchViewControllerWithPresentedViewController:(id)arg1 selectedIndex:(unsigned long long)arg2;
- (_Bool)isThumbPK;
- (id)waitDataSource;
- (void)getConferencePushSwithError:(id)arg1;
- (void)getConferencePushSwithFail:(id)arg1;
- (void)showModeSwitchViewControllerWithSelectedIndex:(unsigned long long)arg1;
- (void)getConferencePushSwithSuccess:(id)arg1;
- (_Bool)isMasterConferenceEnable;
- (void)masterConferenceEnable:(_Bool)arg1;
- (_Bool)isMasterBoardcasting;
- (_Bool)isReplayModel;
- (_Bool)isLiveGameMode;
- (_Bool)inStartBoardcastingView;
- (void)lianmaiSmallWindowClick;
- (void)hostConnectButtonClick:(_Bool)arg1;
- (void)removeSlaveViewWithUserID:(id)arg1;
- (void)kickGuestFromHostWithUserID:(id)arg1;
- (void)mixGuestVideo;
- (void)setAcceptGuestWithMediaUserID:(id)arg1;
- (void)userCloseConference;
- (void)changeMasterPlayerTimerStatusWithRoomProfile:(id)arg1;
- (void)changeSlaveUserPlayerTimerStatusWithRoomProfile:(id)arg1;
- (_Bool)isSlaveInConference;
- (void)changeConferenceStatus:(id)arg1;
- (void)configConferenceSlaverRatio:(id)arg1;
- (void)updateConferenceWaitingCountLabel:(long long)arg1;
- (void)configWaitingCountLabel;
- (void)hostRestartPublisherForStopConference;
- (void)hostRestartPublisherForStopConferenceIfNeeded;
- (void)callPublisherRestartCompletion;
- (void)restartPublisherForConferenceIfNeededWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)initConferenceHumanIfNeed;
- (void)reconfigConferenceWindowsWithLinkUsers:(id)arg1;
- (void)reconfigConferenceWindowsForPlayer;
- (void)setupLink;
- (void)updateConferneceWindow;
- (void)protobufDidReceiveHeartBeatStop:(id)arg1 groupInfo:(id)arg2;
- (void)protobufDidReceiveUserDisagreeStarLinkInvites:(id)arg1;
- (void)protobufDidReceiveUserAgreeStarLinkInvites:(id)arg1;
- (void)protobufDidReceiveStarCancelUserLink:(id)arg1;
- (void)protobufDidReceiveLinkStarInviteUserLink:(id)arg1;
- (void)protobufDidReceiveLinkWindow:(id)arg1;
- (void)protobufDidReceiveLinkNum:(id)arg1;
- (void)protobufDidReceiveLinkStarRequestClose:(id)arg1;
- (void)protobufDidReceiveLinkStarTurnOn:(id)arg1;
- (void)protobufDidReceiveLinkStarTurnOff:(id)arg1;
- (void)protobufDidReceiveLinkUserExit:(id)arg1 withGroupInfo:(id)arg2;
- (void)protobufDidReceiveLinkStop:(id)arg1;
- (void)protobufDidReceiveLinkSuccess:(id)arg1;
- (void)protobufDidReceiveLinkStarAgree:(id)arg1;
- (void)protobufDidReceiveLinkUserApply:(id)arg1;
- (void)audienceAddArenaUserInfosWhenSurvivorMatchSuccuess:(id)arg1;
- (void)setIsNeedConnectScreen:(_Bool)arg1;
- (void)survivorMatchSuccess:(id)arg1;
- (void)hostHandleRoomProfileSucecssWhenSurvivor;
- (void)closeSurvivorButtonClicked;
- (void)guestCloseSurvivorConnectScreen;
- (void)hostCloseSurvivorConnectScreen;
- (void)closeSurvivorMode;
- (void)onSurvivorProcessingDownCounterEnd;
- (void)onSurvivorModeBegin;
- (_Bool)isInSurvivorConnectScreen;
- (void)protobufDidReceiveSurvivorModeConnectStop:(id)arg1;
- (void)protobufDidReceiveSurvivorModePKStop:(id)arg1;
- (void)protobufDidReceiveSurvivorModeMatchSuccess:(id)arg1;
- (void)protobufDidReceiveSurvivorModeKicked:(id)arg1;
- (void)configPublisherOptionsForDoublePush:(id)arg1;
- (void)hostStopDoublePushForSwitchConnectSuccessWithOldType:(unsigned long long)arg1 newType:(unsigned long long)arg2;
- (void)handleForDoublePushStopConference;
- (void)onRemoteConnectVideoFrame:(struct opaqueCMSampleBuffer *)arg1 userId:(unsigned int)arg2;
- (void)createCameraSourceIfNeed;
- (void)reconfigureMediaCombineForDoublePushAfterSecondPublisherLaunch;
- (void)configSecondPublisherIfNeed;
- (void)clearDoublePushDataSources;
- (void)clearDoublePushDataSourcesForCommonDoublePushIfNeed;
- (void)removeSlaveDataSourcesForDoublePushWithSdkId:(id)arg1 momoId:(id)arg2;
- (void)configMediaCombinerForDoublePush;
- (void)configConnectPublisherIfNeed;
- (_Bool)doublePushAction;
- (_Bool)doublePushEnable;
- (_Bool)isSlaveOfPhoneRoom;
- (void)slaveHandleEmceeCountdownSecondCallbackWithSlaveID:(id)arg1 time:(double)arg2;
- (void)onMasterStopBroadcasting;
- (double)timeInterval:(id)arg1;
- (void)slaveUpdateSlaveInfoRanks:(id)arg1 forStarID:(id)arg2;
- (void)slaveUpdateHostInfoThumbs:(long long)arg1 forStarID:(id)arg2;
- (void)slaveUpdateRenderViewsWithSlaveInfos;
- (void)slaveConfigSlaveInfosForBecomeSlave;
- (void)slaveUpdateSlaveInfosForProfileLinkSuccess;
- (void)slaveUpdateSlaveInfosForProfileFullSuccess;
- (void)updateLiveGameSlaveInfos;
- (void)updateRadioFriendSlaveInfos;
- (void)updateRadioSlaveInfos;
- (void)updateEmceeSlaveInfos;
- (void)updatePKSlaveInfos;
- (void)updateFriendSlaveInfos;
- (void)updateCommonSlaveInfos;
- (id)connectSlaveInfo:(unsigned long long)arg1 ratio:(struct CGRect)arg2 positionIndex:(unsigned long long)arg3;
- (void)releaseConnectSlaveDataSourceIfNeed;
- (void)initializeConnectSlaveDataSourceIfNeed;
- (void)unlock;
- (void)lock;
- (void)showErrorMsgToast:(id)arg1;
- (void)addWaitingTimeLogWithPrepareToConnect:(_Bool)arg1;
- (void)fulltimeRoomVoiceSettingsSuccess:(id)arg1;
- (void)fulltimeRoomVoiceSettingsWithMomoID:(id)arg1 muteType:(unsigned long long)arg2;
- (void)fulltimeRoomCloseConnectWithMomoIDFail:(id)arg1;
- (void)fulltimeRoomCloseConnectWithMomoIDError:(id)arg1;
- (void)fulltimeRoomCloseConnectWithMomoIDSuccess:(id)arg1;
- (void)fulltimeRoomCloseConnectWithMomoID:(id)arg1;
- (void)fulltimeRoomLeaveRoomCompletion:(CDUnknownBlockType)arg1;
- (void)appDidEnterBackgroundNotificationForFulltimeRoom;
- (void)appWillEnterForegroundNotificationForFulltimeRoom;
- (void)fulltimeRoomOnUserIsOffline:(long long)arg1;
- (void)fulltimeRoomSlaverConferenceCancel;
- (void)fulltimeRoomSlaveConferenceResume;
- (void)fulltimeRoomPublisherAudioInterruptEnd:(id)arg1 error:(id)arg2;
- (void)fulltimeRoomPublisherAudioInterruptBegin:(id)arg1 error:(id)arg2;
- (void)fulltimeRoomEndpubWithRoomID:(unsigned long long)arg1;
- (void)fulltimeRoomStartpubFail:(id)arg1;
- (void)fulltimeRoomStartpubSuccess:(id)arg1;
- (void)fulltimeRoomStartpubWithRoomID;
- (void)fulltimeRoomUserCloseConference;
- (void)fulltimeRoomChangeSlaveUserPlayerTimerStatusWithRoomProfile:(id)arg1;
- (void)fulltimeRoomChangeConferenceStatus:(id)arg1;
- (void)fulltimeRoomSetupLink;
- (void)fulltimeRoomUpdateConferenceWaitingCountLabel:(long long)arg1;
- (void)fulltimeRoomConfigWaitingCountLabel;
- (void)fulltimeRoomConfigStatusView;
- (void)showApplyView:(_Bool)arg1;
- (void)masterConferenceLocalSwitchStatus:(_Bool)arg1;
- (void)closeConferenceWithAlertForMomoid:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)confirmConferenceWithMomoid:(id)arg1 name:(id)arg2 charmsNum:(long long)arg3 fortuneNum:(long long)arg4 avatar:(id)arg5 sex:(id)arg6 thumbs:(unsigned long long)arg7 rankingPhoto:(id)arg8 publisherType:(unsigned long long)arg9;
- (void)fulltimeRoomOnConferenceFailed;
- (void)fulltimeRoomOnBadNetworkForPublishing;
- (void)fulltimeRoomOnBadNetworkForPlayingVideo;
- (void)fulltimeRoomTimeoutInBackground;
- (void)fulltimeRoomLeaveRoomWithErrorCode:(long long)arg1;
- (void)fulltimeRoomLeaveRoomWithConferenceAlertCompletion:(CDUnknownBlockType)arg1;
- (void)fulltimeRoomOnMasterStopBroadcasting;
- (void)fulltimeRoomSetConferenceEnable:(_Bool)arg1;
- (void)fulltimeRoomOnDecorationPanelStartConnectingButtonClicked;
- (void)fulltimeRoomOnHostIsOffline:(long long)arg1;
- (void)fulltimeRoomOnPublisherRemoteVideoIsLostWithSdkId:(id)arg1;
- (void)fulltimeRoomOnPublisherDidCloseWithExitSdkId:(id)arg1 errorCode:(long long)arg2;
- (void)fulltimeRoomOnPublisherDidConnectingBetweenMasterSdkId:(id)arg1 slaveSdkId:(id)arg2;
- (void)fulltimeRoomReleaseConnectSlaveDataSourceIfNeed;
- (void)fulltimeRoomGuestCloseConferencePublisher:(unsigned long long)arg1;
- (void)fulltimeRoomRestartPlayHostVideo;
- (void)fulltimeRoomExitConferenceFromGuestShouldReplayVideo:(_Bool)arg1 closeReason:(unsigned long long)arg2;
- (void)fulltimeRoomCloseConference:(unsigned long long)arg1;
- (void)fulltimeRoomUpdateSlaveInfo:(id)arg1;
- (void)fulltimeRoomForceCanceledApplyConference;
- (void)fulltimeRoomRequestCancelApplyConferenceFail:(id)arg1;
- (void)fulltimeRoomRequestCancelApplyConferenceError:(id)arg1;
- (void)fulltimeRoomRequestCancelApplyConferenceSuccess:(id)arg1;
- (void)fulltimeRoomRequestCancelApplyConference;
- (void)fulltimeRoomCancelApplyConference;
- (void)fulltimeRoomRequestConferenceApplyFail:(id)arg1;
- (void)fulltimeRoomRequestConferenceApplyError:(id)arg1;
- (id)fulltimeRoomApplyPublishGotoString;
- (void)fulltimeRoomRequestConferenceApplySuccess:(id)arg1;
- (void)fulltimeRoomRequestConferenceApply;
- (void)fulltimeRoomApplyConference;
- (void)requestFulltimeCloseRoomWithRoomID:(long long)arg1 errorMsg:(id)arg2;
- (void)requestFulltimeLinkConnectSuccessError:(id)arg1;
- (void)requestFulltimeLinkConnectSuccessFailure:(id)arg1;
- (void)requestFulltimeLinkConnectSuccessSuccess:(id)arg1;
- (void)fulltimeRoomInformServerSlaveJoinChannelSuccess:(long long)arg1 errorMsg:(id)arg2;
- (void)downAddressForFulltimeRoomFailure:(id)arg1;
- (void)downAddressForFulltimeRoomError:(id)arg1;
- (void)downAddressForFulltimeRoomSuccess:(id)arg1;
- (void)requestConfirmSlaveLinkForFulltimeRoom;
- (void)fulltimeRoomStartRadioGuestPublishWithParam:(id)arg1;
- (void)fulltimeRoomStopIJKPlayer;
- (void)setHostMediaID:(id)arg1;
- (void)fulltimeRoomSlaveUpdateRenderViewsWithSdkID:(id)arg1;
- (void)setFulltimeRoomSlaveMute:(unsigned long long)arg1;
- (void)protobufGuestReceiveAgreeForFulltimeRoom:(id)arg1;
- (void)fulltimeRoomSlaveConfigSlaveInfosForBecomeSlave;
- (void)protobufDidReceiveAllDayRoomLinkSetSlaveMute:(id)arg1;
- (void)protobufDidReceiveAllDayRoomLinkStarRequestClose:(id)arg1;
- (void)protobufDidReceiveAllDayRoomLinkStarAgree:(id)arg1;
- (void)initializeFulltimeRoomConnectSlaveDataSourceIfNeed;
@property(readonly, nonatomic) _Bool isLocked;
- (void)setIsLocked:(_Bool)arg1;
- (void)protobufDidReceiveSlaveMuteSuccessWithMode:(id)arg1 groupInfo:(id)arg2;
- (void)protobufDidReceiveSetSlaveMuteWithMode:(id)arg1;
- (void)protobufDidReceiveStarRequestCloseWithMode:(id)arg1;
- (void)protobufDidReceiveCountWithMode:(id)arg1;
- (void)handleLiveGameStarAgreeWithMode:(id)arg1;
- (void)protobufDidReceiveStarAgreeWithMode:(id)arg1;
- (void)protobufDidReceiveUserApplyWithMode:(id)arg1 groupInfo:(id)arg2;
- (void)protobufMobileRoomDidReceiveConnectUnitWithMode:(id)arg1 withGroupInfo:(id)arg2;
- (void)guestEnterRoomAutoApplyConnnect;
- (void)configRoomTypeLogForPublisher;
- (void)configPublisherAudioSettingForRadioOrNot;
- (void)configRadioSlaveMediaSourceIfNeeded;
- (void)configRadioMediaSourceIfNeeded;
- (void)removeNormalRadioBackgroundImageView;
- (void)removeGaussianBackgroundView;
- (void)configNormalRadioStyleAnimationView;
- (void)addRadioBackImageView;
- (void)addRadioMaskBackImageView:(_Bool)arg1;
- (void)updateNormalRadioBackgroundImage:(id)arg1;
- (void)configRadioBackgroundImage;
- (void)guestConfigNormalRadioBackgroundImageIfNeed;
- (void)configGaussianBackgroundView;
- (void)guestConfigGaussianBackgroundViewIfNeed;
@property(retain, nonatomic) UIView *radioMaskBackImageContainerView;
@property(retain, nonatomic) UIImageView *radioMaskBackImageView;
@property(retain, nonatomic) UIImageView *radioBackImageView;
- (id)hostLinkUserModel;
- (void)getMakeLiveGameFrames;
- (void)survivorConferenceGuestSEIDisposal;
- (void)starPKArenaConferenceGuestSEIDisposal;
- (void)queryRoomProfileAudioFriendLinkSuccess:(id)arg1;
- (void)getAudioFriendFrames:(id)arg1;
- (void)audioConferenceFriendSEIDisposal;
- (void)queryRoomProfileAudioLinkSuccess:(id)arg1;
- (void)getAudioFrames:(id)arg1;
- (void)audioConferenceGuestSEIDisposal;
- (void)queryRoomProfileLinkFailure:(id)arg1;
- (void)queryRoomProfileLinkError:(id)arg1;
- (void)queryRoomProfileMakeFriendLinkSuccess:(id)arg1;
- (void)queryRoomProfileEmceeLinkSuccess:(id)arg1;
- (void)queryRoomProfilePKLinkSuccess:(id)arg1;
- (void)getEmceeFrames:(id)arg1;
- (void)getPKFrames:(id)arg1;
- (void)disposalConferencePKConferenceSEI;
- (void)disposalConferenceEmceeConferenceSEI;
- (void)disposalConferenceMakeFriendConferenceList;
- (void)queryRoomProfileNormalLinkSuccess:(id)arg1;
- (void)getMakeNormalFrames:(id)arg1;
- (void)disposalNormalConferenceSEI;
- (void)getMakeFriendsFrames:(id)arg1;
- (void)makeFriendsConferenceGuestSEIDisposal;
- (void)disposalSEIAudioInfo;
- (void)disposalConferenceSEI;
- (void)didRecvUserInfo:(id)arg1;
- (_Bool)shouldConfigPublisherToEncodeSize:(struct CGSize)arg1 bitrate:(long long)arg2;
- (CDUnknownBlockType)publisherQualityAction;
- (void)setPublisherQualityAction:(CDUnknownBlockType)arg1;
- (_Bool)isFriendsModeEffectiveContentPublishing;
- (_Bool)isFriendsModeEffectiveContentEnabled;
- (void)configForFriendsModeEffectiveContentIfNeeded;
- (void)configForFriendsModeEffectiveContent;
- (struct CGSize)effectiveContentResolution;
- (struct CGSize)cameraPreferredSizeWithPublisherOptions;
- (long long)cameraCaptureQualityWithPublisherOptions;
- (id)cameraConfiguration;
- (void)configPublisherQualityWithOptions:(id)arg1;
- (void)hostResetPublisherQuality;
- (void)resetPublisherQualityDBIfNeeded;
@property(nonatomic) unsigned long long publisherQuality;
- (void)sendHostSetLiveResolutionLevelReportRequestError:(id)arg1;
- (void)sendHostSetLiveResolutionLevelReportRequestSuccess:(id)arg1;
- (id)getSexStringFromEnum:(int)arg1;
- (id)slaverInfosWithPKLinkSuccuess:(id)arg1;
- (id)audienceGetSlaverInfosWhenStarPKLinkSuccuess:(id)arg1;
- (void)addUserInfosWithPKLinkSuccuess:(id)arg1;
- (void)audienceAddArenaUserInfosWhenStarPKLinkSuccuess:(id)arg1;
- (void)handleTakeCrownWithLinkStop:(id)arg1;
- (void)starPKLinkStop:(id)arg1;
- (void)guestUpdateUIWhenPlayAgain;
- (void)handleTakeCrownWithLinkSuccess:(id)arg1;
- (void)starPKLinkSuccess:(id)arg1;
- (id)conferenceHost;
- (void)cleanStarPKRemainingTime;
- (double)getStarPKRemainingTime;
- (void)updateStarPKRemainingTime:(double)arg1;
- (void)onStarPKUserOfflineFromMedia:(id)arg1 closeType:(unsigned long long)arg2 errorCode:(long long)arg3;
- (void)guestCloseStarPKConference;
- (void)hostCloseStarPKConference:(_Bool)arg1;
- (void)updatePKUI;
- (void)resetPublisherConfig;
- (void)saveAndSetPublisherConfig:(id)arg1;
- (void)handleStartPKCountdownEnd;
- (void)onStarPKProcessingDownCounterEnd;
- (void)strikeViewWillHide;
- (void)oneMoreButtonClickedWithSlaverID:(id)arg1;
- (void)closePunishWithAlert;
- (void)quitPKArenaWithAlert;
- (void)closePKButtonClickedWithSlaverID:(id)arg1 ext:(id)arg2;
- (void)guestHandleStarPKTimeOverWithSlaverID:(id)arg1 ext:(id)arg2;
- (void)hostHandleStarPKTimeOverWithSlaverID:(id)arg1 ext:(id)arg2;
- (void)hostHandleStarPKCountdownSecondCallbackWithSlaveID:(id)arg1 time:(double)arg2;
- (void)protobufDidReceiveTakeCrownRoundReplace:(id)arg1;
- (void)rivalGiftAnimation;
- (void)protobufDidReceiveStarPKModeRivalGift:(id)arg1;
- (void)protobufDidReceiveStarPKModeStrike:(id)arg1;
- (void)protobufDidReceiveStarPKModeFirstBlood:(id)arg1;
- (void)protobufDidReceivePKFaceDecoration:(id)arg1;
- (void)protobufDidReceiveStarPKModePlayAgain:(id)arg1;
- (void)protobufDidReceiveStarPKModeThumbsChange:(id)arg1;
- (void)protobufDidReceivePKLinkStop:(id)arg1;
- (void)protobufDidReceiveStarPKModeStop:(id)arg1;
- (void)protobufDidReceivePKLinkSuccess:(id)arg1;
- (void)protobufDidReceiveStarPKModeSuccess:(id)arg1;
- (void)protobufDidReceiveStarPKModeStarRefuse:(id)arg1;
- (void)protobufDidReceiveStarPKModeStarCancelApply:(id)arg1;
- (void)protobufDidReceiveStarPKModeStarApply:(id)arg1;
- (id)guestSlaverInfo;
- (void)setGuestSlaverInfo:(id)arg1;
- (_Bool)isInOnceMoreProcedure;
- (void)setIsInOnceMoreProcedure:(_Bool)arg1;
@property(retain, nonatomic) MLConnectPKModel *pkModel;
- (id)pkLinkSuccess;
- (void)setPkLinkSuccess:(id)arg1;
- (id)starPKLinkSuccessObject;
- (void)setStarPKLinkSuccessObject:(id)arg1;
- (id)rivalGiftsForAnimation;
- (void)setRivalGiftsForAnimation:(id)arg1;
- (_Bool)rivalGiftAnimating;
- (void)setRivalGiftAnimating:(_Bool)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

