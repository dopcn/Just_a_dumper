//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AVAudioSessionDelegate-Protocol.h"
#import "LyricViewKrcAnalysisDelegate-Protocol.h"
#import "RemoteControl-Protocol.h"
#import "SongImageLogicThreadDelegate-Protocol.h"
#import "SongLyricDownLoadLogicThreadDelegate-Protocol.h"

@class KGNormalPlayList, KGPlayListBase, NSArray, NSConditionLock, NSMutableDictionary, NSString, NSTimer, SongImageLogicThread, SongInfo, SongLyricDownLoadLogicThread, UIImage, UIImageView;

@interface KGPlayQueue : NSObject <RemoteControl, SongImageLogicThreadDelegate, SongLyricDownLoadLogicThreadDelegate, LyricViewKrcAnalysisDelegate, AVAudioSessionDelegate>
{
    long long _playQueueIndex;
    NSConditionLock *_playLock;
    _Bool isInterruption;
    SongImageLogicThread *_songImageThread;
    SongLyricDownLoadLogicThread *_songLyricThread;
    long long _lyricDownLoadcodeType;
    long long _lyricHitlayer;
    double _upPlaySongTime;
    NSMutableDictionary *_playingInfo;
    NSConditionLock *_playListLock;
    NSConditionLock *_playQueueIndexLock;
    long long _playErrorContinuousCount;
    NSConditionLock *_errorNextLock;
    _Bool _isOnWaitNext;
    float _version;
    UIImage *_lyricImg;
    NSString *_krcFileName;
    NSArray *_arrLyric;
    NSArray *_originalLyric;
    NSArray *_translateLyric;
    NSArray *_pinYinLyric;
    NSArray *_longLyricArray;
    long long _tempIndex;
    struct StreamBase *_curStream;
    NSConditionLock *_streamLock;
    NSTimer *_historyTimer;
    UIImageView *_ImageViewForKuqunLockScreen;
    _Bool _isNeedContinuePlay;
    _Bool _isContinueCache;
    long long _continueSameLocalErrorTimes;
    SongInfo *_sameSongInfo;
    long long _sameIndex;
    _Bool _ifDownloadFailUseStandardLyricFLag;
    _Bool _isManual;
    _Bool _appIsSuspend;
    _Bool _isPlayViewShowing;
    _Bool _hadSend;
    KGPlayListBase *_playList;
    id _currentKuqunSong;
    KGNormalPlayList *_preNormalPlayList;
    KGNormalPlayList *_lastNormalPlayList;
    long long _playNextCount;
    long long _changeQualityCount;
    NSConditionLock *_playingInfolock;
    CDUnknownBlockType _seekToAfterAppSuspendedThenResume;
}

+ (id)sharedInstance;
@property(copy, nonatomic) CDUnknownBlockType seekToAfterAppSuspendedThenResume; // @synthesize seekToAfterAppSuspendedThenResume=_seekToAfterAppSuspendedThenResume;
@property(retain, nonatomic) NSConditionLock *playingInfolock; // @synthesize playingInfolock=_playingInfolock;
@property(retain, nonatomic) NSMutableDictionary *playingInfo; // @synthesize playingInfo=_playingInfo;
@property(retain, nonatomic) UIImage *lyricImg; // @synthesize lyricImg=_lyricImg;
@property(nonatomic) _Bool hadSend; // @synthesize hadSend=_hadSend;
@property(nonatomic) long long changeQualityCount; // @synthesize changeQualityCount=_changeQualityCount;
@property(nonatomic) long long playNextCount; // @synthesize playNextCount=_playNextCount;
@property(retain, nonatomic) KGNormalPlayList *lastNormalPlayList; // @synthesize lastNormalPlayList=_lastNormalPlayList;
@property(retain, nonatomic) KGNormalPlayList *preNormalPlayList; // @synthesize preNormalPlayList=_preNormalPlayList;
@property(nonatomic) _Bool isPlayViewShowing; // @synthesize isPlayViewShowing=_isPlayViewShowing;
@property(nonatomic) _Bool appIsSuspend; // @synthesize appIsSuspend=_appIsSuspend;
@property(nonatomic) id currentKuqunSong; // @synthesize currentKuqunSong=_currentKuqunSong;
@property(nonatomic) _Bool isManual; // @synthesize isManual=_isManual;
@property(retain, nonatomic) KGPlayListBase *playList; // @synthesize playList=_playList;
- (void).cxx_destruct;
- (void)LyricAnalysisFinishSendAPM:(id)arg1;
- (void)controlPlayer:(id)arg1 setDataSource:(void *)arg2 userData:(id)arg3 typeInfo:(id)arg4 start:(double)arg5 end:(double)arg6;
- (void)runStatusChange:(id)arg1;
- (void)songInfoChangeAuthorId:(id)arg1;
- (void)failToPlaySongAtIndex:(long long)arg1;
- (void)failToPlayNext;
- (_Bool)isRepeatCurrent;
- (void)handleContinuePlaySong;
- (_Bool)isCurrentRadioPlayList:(id)arg1;
- (_Bool)isYueKuMusic;
- (_Bool)isKuqun;
- (_Bool)isRadio;
- (void)recordValidMusicAssetWithSongInfo:(id)arg1;
- (void)addRecentPlay:(id)arg1 type:(int)arg2;
- (void)sendAPMCPUAndMemoryInfoWhenPlayHalf;
- (void)updateCurrentProgress;
- (void)appDidEnterBackground:(id)arg1;
- (void)appWillResignActive:(id)arg1;
- (void)appDidBecomeActive:(id)arg1;
- (void)interruptionNotifyCallback:(id)arg1;
- (void)recordNotifyCallback:(id)arg1;
- (void)routeChangedNotifyCallback:(id)arg1;
- (void)sendLocalNotification:(id)arg1 lyricIndex:(long long)arg2;
- (void)endInterruptionWithFlags:(unsigned long long)arg1;
- (void)beginInterruption;
- (void)setAudioSession;
- (long long)indexOfDurationInTimeFramesWithDuration:(double)arg1 andForthLyric:(id)arg2;
- (long long)indexOfDurationInTimeFramesWithDuration:(double)arg1 andLyric:(id)arg2;
- (id)lyricsLineIndexOfTime:(double)arg1;
- (void)LyricViewKrcAnalysisFinish:(id)arg1;
- (_Bool)playListSameCompare:(id)arg1 withPlayList:(id)arg2;
- (void)checkIsNeedSaveNormalHistoryPlayList:(id)arg1;
- (void)checkIsGuessMyFavorModeAndSendPlayAnticnWithIsManual:(_Bool)arg1 isListSwitch:(_Bool)arg2;
- (void)SongLyricDownLoadLogicThread:(id)arg1 krcFileName:(id)arg2 andErrorCode:(int)arg3 andError:(id)arg4;
- (void)SongImageLogicThread:(id)arg1 image:(id)arg2 andError:(int)arg3 andDetailError:(id)arg4;
- (void)SetPlayViewTitle:(id)arg1 Image:(id)arg2;
- (void)updateKqLockImageWithImageUrl:(id)arg1;
- (void)setKuQunPlayViewInfo;
- (void)updatePlayViewInfoWhenGroupInfoChanged:(id)arg1;
- (_Bool)kgRemoteControlReceivedWithEvent:(id)arg1;
- (void)clearAllPriorityFlag;
- (long long)addSongs:(id)arg1 subPath:(id)arg2;
- (long long)playSongsLater:(id)arg1 subPath:(id)arg2;
- (long long)insertAndPlaySongs:(id)arg1 subPath:(id)arg2;
- (long long)playSong:(id)arg1 withIndex:(long long)arg2 subPath:(id)arg3;
- (long long)playLater:(id)arg1 subPath:(id)arg2;
- (void)setSongsPath:(id)arg1;
- (id)currentSong;
- (void)handleNotification:(id)arg1;
- (void)PlayOrPause;
- (_Bool)isPlayingAndListening;
- (_Bool)isPlaying;
- (struct StreamObjectAutoPtr)makeStream:(id)arg1;
- (void)playCurrent;
- (void)playPrevious:(_Bool)arg1;
- (void)playNext:(_Bool)arg1;
- (void)playNext:(_Bool)arg1 withGarbageFlag:(_Bool)arg2;
- (void)playSongWithIndex:(long long)arg1;
- (void)playSongWithIndex:(long long)arg1 andManual:(_Bool)arg2;
- (void)sendNotExsitNotification:(id)arg1 playlistCount:(unsigned long long)arg2;
- (void)play:(long long)arg1 px:(long long)arg2 isManual:(_Bool)arg3;
- (_Bool)localContinueErrorStop:(long long)arg1 songInfo:(id)arg2;
- (void)clearLocalErrorSongInfo;
- (long long)makePlayQueueIndex;
- (_Bool)checkNetWorkWithSong:(id)arg1;
- (_Bool)askUseWifiOnly:(id)arg1;
- (long long)setPlayListIsCan:(id)arg1;
- (id)allPathWithSubPath:(id)arg1;
- (_Bool)isSameAllPathWith:(id)arg1;
- (void)setSongs:(id)arg1 subPath:(id)arg2 ByPlayList:(id)arg3;
- (long long)setPlayListIsCanFromPagePath:(id)arg1 subPath:(id)arg2;
- (void)setPlayListFromPagePath:(id)arg1 subPath:(id)arg2;
- (id)krcFilePathWithFileName:(id)arg1;
- (void)setLocalLyrics:(id)arg1;
- (void)ShowTitleNoti:(id)arg1;
- (void)loadSongAblumImage;
- (void)loadSingerAlbumImage;
- (void)loadAlbumImage;
- (void)loadImageAndLyric;
- (void)postDatasourceNoti:(id)arg1;
- (void)PlayStateChange:(id)arg1;
- (_Bool)errorToStop;
- (void)showOriginalLyric:(long long)arg1 withTranslateLyricArray:(id)arg2 withLockDic:(id)arg3;
- (void)showOriginalLyric:(long long)arg1 withLockDic:(id)arg2;
- (void)setPlayLyricContent:(long long)arg1 withLockDic:(id)arg2;
- (long long)ifTranslateBtnOn;
- (void)playProgress:(double)arg1 duration:(double)arg2 isCarplay:(_Bool)arg3;
- (void)runGetTime;
- (_Bool)playQueueTypeCanShow;
- (void)OnDeleteSongEvent:(id)arg1;
- (_Bool)checkHasLocalMusicInPlayList:(id)arg1;
- (void)PlaySongs:(id)arg1 playIndex:(long long)arg2 andPlayQueueType:(int)arg3 subPath:(id)arg4;
- (void)PlaySongs:(id)arg1 playIndex:(long long)arg2 subPath:(id)arg3;
- (void)setPlayQueueType:(int)arg1;
- (void)setCommanEnable:(_Bool)arg1;
- (void)remoteTrackCommandReceived:(id)arg1;
- (void)configCommandCenterCommand;
- (id)init;
- (long long)getlyricHitlayerWithLyricDownLoadThread:(id)arg1 andErrorCode:(int)arg2;
- (void)sendLyricLoadingBIWithLyricHitlayer:(long long)arg1 AndLyricKrcAnalysis:(id)arg2 AndDownLoadCodeType:(int)arg3 AndIfDownloadFailUseStandardLyric:(_Bool)arg4 AndIsUgcLyric:(_Bool)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

