//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "TVKMediaViewController.h"

#import "KKAdsDelegate-Protocol.h"
#import "KKAdvertismentAddedProtocol-Protocol.h"
#import "KKMediaControllPlayerProtocol-Protocol.h"
#import "KKMediaPlayPrepareDelegate-Protocol.h"
#import "KKMediaPlayerDelegate-Protocol.h"
#import "KKMediaPlayerEventProtocol-Protocol.h"
#import "KKScreenLockDelegate-Protocol.h"
#import "KKbackAdvertismentAddedProtocol-Protocol.h"
#import "NetworkCheckerDelegate-Protocol.h"
#import "P_QLMPlayerControlDelegate-Protocol.h"
#import "QLAirPlaySearchDelegate-Protocol.h"
#import "QLBanabaViewControllerDataSource-Protocol.h"
#import "QLDLNADeviceChooseDelegate-Protocol.h"
#import "QLIPAppearButtonAction-Protocol.h"
#import "QLInteractiveVoteOperationDelegate-Protocol.h"
#import "QLJumpObjectOpenUrlDelegate-Protocol.h"
#import "QLMediaRootPlayerViewCtlDataSource-Protocol.h"
#import "QLPlayerCacheJusterDelegate-Protocol.h"
#import "QLPrivateProtocolPlayDelegate-Protocol.h"
#import "QLRemoteDeviceSearchDelegate-Protocol.h"
#import "QLShareDataSource-Protocol.h"
#import "QLTipButtonActionProtocol-Protocol.h"
#import "QlPlayersDelegate-Protocol.h"
#import "VRManagerDegelate-Protocol.h"

@class JumpMediaPlay, KKAdsFunnelReporter, KKAdsService, KKAdsViewController, KKDelayBox, KKJumpAdsController, KKMediaPlayCountReporter, KKMediaPlayInfo, KKMediaPlayPreparer, KKMediaPlayer, KKMediaPlayerEventSender, KKMediaRootHelper, KKMediaThumbImageLoader, KKPlayVaribles, KKPlayerSpeedReport, KKPlayerVolumeView, KKScreenLockView, KKVideoInfo, NSArray, NSData, NSDate, NSDictionary, NSError, NSMutableDictionary, NSObject, NSString, NSTimer, QLAdsWaterMarkViewController, QLBanabaViewController, QLFigerReportMgr, QLHollywoodTryWatchViewController, QLHotspotMovieControlView2, QLInteractiveVoteOperation, QLIpAppealingView, QLJCEMiniProgramInfo, QLLiveQueueViewController, QLLiveTryWatchViewController, QLMainLiveV3ViewController, QLMainMovieControlView, QLMainMovieLiveVoteController, QLMediaPlayerBusinessMgr, QLMobileNetworkThumbTipsView, QLMovieBaseControlView, QLMovieItem, QLPayVideoPlayAuthenticationViewController, QLPlayInfoAdapter, QLPlayerCacheJuster, QLPlayerLoadingManager, QLPlayerPreLoadingView, QLProgressHandler, QLRemoteFloatViewController, QLShareMomentItem, QLSimpleMovieControlView, QLTipShareToMomentMgr, QLUnityMovieView, QLVideoSplitingMgr, QLWaterMarkController, QQMediaPlayerController, StatusReportCtl, UIButton, UIImage, UITableView, UIView, UIViewController, VRManager, WaitingLoadingView, kkAdsBackAdvertismentService;
@protocol KKMediaHollywoodTabPlayerDelegate, KKMediaPlayerActionDelegate, KKMediaPlayerControlProtocol, KKMediaPlayerDataSource, KKMediaPlayerMutilCameraDelegate, KKMediaPlayerPayVideoPlayAuthDelegate, KKMediaPlayerTryWatchDelegate, OS_dispatch_queue;

@interface KKMediaRootViewController : TVKMediaViewController <KKMediaPlayerEventProtocol, VRManagerDegelate, KKScreenLockDelegate, QLBanabaViewControllerDataSource, QLInteractiveVoteOperationDelegate, QLAirPlaySearchDelegate, QLTipButtonActionProtocol, QLIPAppearButtonAction, QLPrivateProtocolPlayDelegate, QlPlayersDelegate, QLPlayerCacheJusterDelegate, P_QLMPlayerControlDelegate, KKMediaPlayPrepareDelegate, KKMediaPlayerDelegate, KKAdsDelegate, QLShareDataSource, QLJumpObjectOpenUrlDelegate, NetworkCheckerDelegate, KKbackAdvertismentAddedProtocol, KKAdvertismentAddedProtocol, KKMediaControllPlayerProtocol, QLRemoteDeviceSearchDelegate, QLDLNADeviceChooseDelegate, QLMediaRootPlayerViewCtlDataSource>
{
    UIView *dlnaSelectorView;
    UIView *noneDLNATipView;
    UITableView *dlnaTableView;
    UIView *dlnaSearchingView;
    UIView *dlnaPlayBkgView;
    UIButton *btnDLNAReturn;
    double lastDLNAPlayTime;
    long long iCurRenderIndex;
    _Bool _isCancel3GPlay;
    _Bool _backPlayerWhenEnterForegroundIn3G;
    _Bool _firstPlay;
    _Bool _showInitialPlayTimeTip;
    _Bool _isPreparingVideoInfo;
    _Bool _isCachingVideoAfterAdLoadFinish;
    NSString *_lastVideoWhichHasLoadHeadAds;
    KKAdsViewController *_adsViewController;
    _Bool _advertisementProcessFinished;
    _Bool _isNeedSpeedReport;
    KKPlayerSpeedReport *_playerSpeedReport;
    KKScreenLockView *_kkScreenLockView;
    _Bool _isViewVisible;
    _Bool _shouldShowControlsWhenDidAppear;
    _Bool _userForceChangeDevice;
    KKMediaThumbImageLoader *_thumbImageLoader;
    NSObject<OS_dispatch_queue> *_getTimeQueue;
    _Bool _needStartMediaPlayWhenAdDismiss;
    kkAdsBackAdvertismentService *_backAdsService;
    _Bool _playP2PFailed;
    _Bool _playP2PShouldAbort;
    struct CGRect frameSmallPlayer;
    struct CGRect frameFullPlayer;
    QLMovieBaseControlView *baseControlViewBefore;
    struct CGPoint startAppRootVCPointWhenPresent;
    _Bool _togglePresentFullScreen;
    _Bool _toggleTouch;
    _Bool _toggleSwitching;
    long long _lastLandscapeInterfaceOrientation;
    int _funcItemMask;
    _Bool _adLandingViewPressenting;
    _Bool _airplayDisconned;
    _Bool _noRotateWhileTopViewDismiss;
    _Bool _presentViewLockNoRotate;
    _Bool _isExposeRenderButton;
    _Bool _isRequestingPreAds;
    _Bool _isConfirm3GPlay;
    double _becameActiveTime;
    _Bool _isLoginForChangeFormat;
    _Bool _needSetToMSD;
    _Bool _isResetPlayer;
    _Bool _shouldPlayMediaAfterAd;
    int _resignActiveNetworkState;
    _Bool _isInFullscreen;
    _Bool _ugcKeyboardDidAppear;
    _Bool _isScreenLocked;
    _Bool _isFullScreenLocked;
    _Bool _shouldShowHelpView;
    _Bool _isDrawingViewShowed;
    _Bool _mediaRootViewControllerWasBacked;
    _Bool _shouldNotPlay;
    _Bool _canBePlayed;
    _Bool _bUserSeek;
    _Bool _bRenderingDLNA;
    _Bool _bRenderingAirplay;
    _Bool _isOpenOrCloseDlna;
    _Bool _bRenderingPPP;
    _Bool _firstCache;
    _Bool _hotspotCaching;
    _Bool _isFirstPullOutHeadset;
    _Bool _isFirstInsertHeadset;
    _Bool _isInsertHDMI;
    _Bool _isRequestBackAdvertisement;
    _Bool _needToPauseAfterReplay;
    _Bool _userChangedClarity;
    _Bool _isBackground;
    _Bool _isAppActive;
    _Bool _backgroundNetworkChanged;
    _Bool _modalIsDismissing;
    _Bool _presentFromKKPresent;
    _Bool _playerUIDisabled;
    _Bool _showTryWatchCutDown;
    _Bool _requestedAdvertisement;
    _Bool _isUserClickPlayBtnPause;
    _Bool _shouldHideLoadingViewWhenStartPrepareMediaToPlay;
    _Bool _tvStopedByAutoFinished;
    _Bool _isDirectPlayTv;
    _Bool _supportLiveV3Status;
    _Bool _bPreWatchFinishAndPauseState;
    _Bool _didShowAutoPlayUnicomToast;
    _Bool _didForcePortraitToHorizon;
    _Bool _isAutoPlayMode;
    _Bool _didstopContinueRenderPlay;
    _Bool _isShowingTipsView;
    _Bool _hasShowTipsView;
    _Bool _foreAdsIsPlaying;
    _Bool _shouldCheckADStatusWhenAppear;
    _Bool _shouldCheckPlayerStatusWhenAppear;
    _Bool _isChangeFormat;
    _Bool _shouldPauseAdCached;
    _Bool _isAddHotSpotKVO;
    _Bool _isFirstViewAppear;
    _Bool _shouldPlayAndDownloadAlert;
    _Bool _needToResumeAfterReturn;
    float _previousBroadcastVolume;
    float _previousHeadsetVolume;
    float _currentBroadcastVolume;
    float _currentHeadsetVolume;
    int _playerSequence;
    long long _playerMode;
    NSString *_loadingImgURL;
    long long _playStyle;
    JumpMediaPlay *qlJumpMediaPlayModel;
    QLMediaPlayerBusinessMgr *_businessMgr;
    QLProgressHandler *_progressHandler;
    QLMovieBaseControlView *_mainCtlView;
    QLMainMovieControlView *_fullCtlView;
    QLSimpleMovieControlView *_smallCtlView;
    QLHotspotMovieControlView2 *_hotspotCtlView;
    id <KKMediaPlayerActionDelegate> _actionDelegate;
    id <KKMediaPlayerDataSource> _dataSource;
    id <KKMediaPlayerMutilCameraDelegate> _mutilCametaDelegate;
    id <KKMediaPlayerTryWatchDelegate> _prewatchDelegate;
    id <KKMediaHollywoodTabPlayerDelegate> _hollywoodTabPlayerDelegate;
    id <KKMediaPlayerPayVideoPlayAuthDelegate> _playerPayVideoPlayAuthDelegate;
    QLHollywoodTryWatchViewController *_hollywoodTryWatchViewController;
    QLPayVideoPlayAuthenticationViewController *_payVideoPlayAuthenticationViewController;
    KKVideoInfo *_videoInfo;
    NSString *_playerTitle;
    NSString *_playerTitleMark;
    KKMediaPlayInfo *_mediaPlayInfo;
    KKMediaPlayer *_mediaPlayer;
    KKMediaPlayPreparer *_mediaPreparer;
    double _preloadPlaybackTime;
    NSString *_currentPlayID;
    NSString *_currentRequestID;
    StatusReportCtl *_reportCtl;
    long long _retryPlayerType;
    long long _cachingFileIndex;
    long long _fileCachedNums;
    long long _interfaceType;
    KKMediaRootHelper *_rootHelper;
    QLTipShareToMomentMgr *_shareTipsMgr;
    QLVideoSplitingMgr *_videoSplitMgr;
    QLPlayerLoadingManager *_playerLoadingMgr;
    QLMainMovieLiveVoteController *_mainMovieVoteCtl;
    long long _directPlayTvType;
    double _backGroundInternal;
    KKMediaPlayerEventSender *_playerEventSender;
    KKAdsFunnelReporter *_adsFunnelReporter;
    QLPlayerCacheJuster *_playerCacher;
    KKMediaPlayCountReporter *_playCountReporter;
    QLFigerReportMgr *_figerReportMgr;
    QLPlayInfoAdapter *_playInfoFlowAdapter;
    QLPlayInfoAdapter *_playInfoHitTagAdapter;
    QLPlayerPreLoadingView *_preLoadingView;
    WaitingLoadingView *_loadingView;
    QLIpAppealingView *_ipView;
    NSTimer *_prgTimer;
    long long _waitingNums;
    NSTimer *_slideToPlayTimer;
    NSTimer *_cachingToPlayTimer;
    KKPlayVaribles *_c_playing_varibles;
    id <KKMediaPlayerControlProtocol> _superHiberarchyDelegate;
    QLLiveTryWatchViewController *_tryWatchCtl;
    QLUnityMovieView *_unityMovieView;
    KKAdsService *_adsService;
    QLRemoteFloatViewController *_remoteFloatViewController;
    NSString *_playUUID;
    NSString *_reportParams;
    NSString *_reportKey;
    NSString *_reportCurKey;
    long long _playScene;
    long long _playerType;
    VRManager *_vrManager;
    long long _mediaCloseReason;
    NSString *_actionUrl;
    long long _playerViewStyle;
    double _screenRatio;
    QLMobileNetworkThumbTipsView *_networkThumbTipsView;
    KKPlayerVolumeView *_kkVolumeView;
    double _startToCacheTime;
    QLWaterMarkController *_waterMarkController;
    QLAdsWaterMarkViewController *_adsWaterMarkController;
    long long _normalBufferingReportLevent;
    NSMutableDictionary *_dicDLNARequest;
    QLBanabaViewController *_banabaViewController;
    KKDelayBox *_delayBoxInitObject;
    long long _playerPlayStateWhenDisappear;
    double _seekBeginTime;
    double _seekEndTime;
    NSTimer *_hideStatusTimer;
    NSError *_ipLimitError;
    UIViewController *_weakTagSuperHiberarchyViewController;
    NSDate *_backGroundDate;
    UIView *_customSimpleUIView;
    UIView *_customMainUIView;
    NSString *_lastErrorTips;
    KKJumpAdsController *_jumpAdsController;
    QLLiveQueueViewController *_liveQueueCtl;
    struct CGRect _smallPlayerAttachFrame;
    struct CGRect _hotspotRect;
}

+ (_Bool)JumpTVPlayerView:(id)arg1;
+ (_Bool)JumpMoviePlayerView:(id)arg1;
+ (_Bool)OpenJumpUrlWithobject;
+ (_Bool)jumpWhyMeLightPlayer:(id)arg1;
+ (_Bool)jumpWhyMeLightPlayerWithPid:(id)arg1 withPlayerViewStyle:(long long)arg2;
+ (_Bool)checkAirPlayView;
+ (_Bool)isDownloadAndPlayVideoFromPlayerController:(id)arg1;
+ (id)lastAirplayTime;
+ (long long)playSequence;
+ (id)launchFuellPlayerAndCheckPlayer:(id)arg1;
@property(nonatomic) _Bool needToResumeAfterReturn; // @synthesize needToResumeAfterReturn=_needToResumeAfterReturn;
@property(nonatomic) _Bool shouldPlayAndDownloadAlert; // @synthesize shouldPlayAndDownloadAlert=_shouldPlayAndDownloadAlert;
@property(nonatomic) _Bool isFirstViewAppear; // @synthesize isFirstViewAppear=_isFirstViewAppear;
@property(nonatomic) struct CGRect hotspotRect; // @synthesize hotspotRect=_hotspotRect;
@property(retain, nonatomic) QLLiveQueueViewController *liveQueueCtl; // @synthesize liveQueueCtl=_liveQueueCtl;
@property(nonatomic) _Bool isAddHotSpotKVO; // @synthesize isAddHotSpotKVO=_isAddHotSpotKVO;
@property(retain, nonatomic) KKJumpAdsController *jumpAdsController; // @synthesize jumpAdsController=_jumpAdsController;
@property(copy, nonatomic) NSString *lastErrorTips; // @synthesize lastErrorTips=_lastErrorTips;
@property(retain, nonatomic) UIView *customMainUIView; // @synthesize customMainUIView=_customMainUIView;
@property(retain, nonatomic) UIView *customSimpleUIView; // @synthesize customSimpleUIView=_customSimpleUIView;
@property(retain, nonatomic) NSDate *backGroundDate; // @synthesize backGroundDate=_backGroundDate;
@property(nonatomic) __weak UIViewController *weakTagSuperHiberarchyViewController; // @synthesize weakTagSuperHiberarchyViewController=_weakTagSuperHiberarchyViewController;
@property(retain, nonatomic) NSError *ipLimitError; // @synthesize ipLimitError=_ipLimitError;
@property(nonatomic) _Bool shouldPauseAdCached; // @synthesize shouldPauseAdCached=_shouldPauseAdCached;
@property(nonatomic) _Bool needStartMediaPlayWhenAdDismiss; // @synthesize needStartMediaPlayWhenAdDismiss=_needStartMediaPlayWhenAdDismiss;
@property(retain) KKMediaThumbImageLoader *thumbImageLoader; // @synthesize thumbImageLoader=_thumbImageLoader;
@property(nonatomic) _Bool advertisementProcessFinished; // @synthesize advertisementProcessFinished=_advertisementProcessFinished;
@property(retain, nonatomic) NSTimer *hideStatusTimer; // @synthesize hideStatusTimer=_hideStatusTimer;
@property(copy, nonatomic) NSString *lastVideoWhichHasLoadHeadAds; // @synthesize lastVideoWhichHasLoadHeadAds=_lastVideoWhichHasLoadHeadAds;
@property(retain, nonatomic) KKAdsViewController *adsViewController; // @synthesize adsViewController=_adsViewController;
@property(nonatomic) _Bool isChangeFormat; // @synthesize isChangeFormat=_isChangeFormat;
@property(nonatomic) double seekEndTime; // @synthesize seekEndTime=_seekEndTime;
@property(nonatomic) double seekBeginTime; // @synthesize seekBeginTime=_seekBeginTime;
@property(nonatomic) _Bool shouldCheckPlayerStatusWhenAppear; // @synthesize shouldCheckPlayerStatusWhenAppear=_shouldCheckPlayerStatusWhenAppear;
@property(nonatomic) long long playerPlayStateWhenDisappear; // @synthesize playerPlayStateWhenDisappear=_playerPlayStateWhenDisappear;
@property(nonatomic) _Bool shouldCheckADStatusWhenAppear; // @synthesize shouldCheckADStatusWhenAppear=_shouldCheckADStatusWhenAppear;
@property(retain, nonatomic) KKDelayBox *delayBoxInitObject; // @synthesize delayBoxInitObject=_delayBoxInitObject;
@property(retain, nonatomic) QLBanabaViewController *banabaViewController; // @synthesize banabaViewController=_banabaViewController;
@property(retain, nonatomic) NSMutableDictionary *dicDLNARequest; // @synthesize dicDLNARequest=_dicDLNARequest;
@property(readonly, nonatomic) _Bool foreAdsIsPlaying; // @synthesize foreAdsIsPlaying=_foreAdsIsPlaying;
@property(nonatomic) long long normalBufferingReportLevent; // @synthesize normalBufferingReportLevent=_normalBufferingReportLevent;
@property(nonatomic) _Bool hasShowTipsView; // @synthesize hasShowTipsView=_hasShowTipsView;
@property(nonatomic) _Bool isShowingTipsView; // @synthesize isShowingTipsView=_isShowingTipsView;
@property(retain, nonatomic) QLAdsWaterMarkViewController *adsWaterMarkController; // @synthesize adsWaterMarkController=_adsWaterMarkController;
@property(retain, nonatomic) QLWaterMarkController *waterMarkController; // @synthesize waterMarkController=_waterMarkController;
@property(nonatomic) double startToCacheTime; // @synthesize startToCacheTime=_startToCacheTime;
@property(retain, nonatomic) KKPlayerVolumeView *kkVolumeView; // @synthesize kkVolumeView=_kkVolumeView;
@property(retain, nonatomic) QLMobileNetworkThumbTipsView *networkThumbTipsView; // @synthesize networkThumbTipsView=_networkThumbTipsView;
@property(nonatomic) int playerSequence; // @synthesize playerSequence=_playerSequence;
@property(nonatomic) _Bool didstopContinueRenderPlay; // @synthesize didstopContinueRenderPlay=_didstopContinueRenderPlay;
@property(nonatomic) _Bool isAutoPlayMode; // @synthesize isAutoPlayMode=_isAutoPlayMode;
@property(nonatomic) double screenRatio; // @synthesize screenRatio=_screenRatio;
@property(nonatomic) _Bool didForcePortraitToHorizon; // @synthesize didForcePortraitToHorizon=_didForcePortraitToHorizon;
@property(nonatomic) long long playerViewStyle; // @synthesize playerViewStyle=_playerViewStyle;
@property(nonatomic) _Bool didShowAutoPlayUnicomToast; // @synthesize didShowAutoPlayUnicomToast=_didShowAutoPlayUnicomToast;
@property(retain, nonatomic) NSString *actionUrl; // @synthesize actionUrl=_actionUrl;
@property(nonatomic) long long mediaCloseReason; // @synthesize mediaCloseReason=_mediaCloseReason;
@property(retain, nonatomic) VRManager *vrManager; // @synthesize vrManager=_vrManager;
@property(nonatomic) long long playerType; // @synthesize playerType=_playerType;
@property(nonatomic) long long playScene; // @synthesize playScene=_playScene;
@property(nonatomic) _Bool bPreWatchFinishAndPauseState; // @synthesize bPreWatchFinishAndPauseState=_bPreWatchFinishAndPauseState;
@property(copy, nonatomic) NSString *reportCurKey; // @synthesize reportCurKey=_reportCurKey;
@property(copy, nonatomic) NSString *reportKey; // @synthesize reportKey=_reportKey;
@property(copy, nonatomic) NSString *reportParams; // @synthesize reportParams=_reportParams;
@property(copy, nonatomic) NSString *playUUID; // @synthesize playUUID=_playUUID;
@property(nonatomic) _Bool supportLiveV3Status; // @synthesize supportLiveV3Status=_supportLiveV3Status;
@property(nonatomic) _Bool isDirectPlayTv; // @synthesize isDirectPlayTv=_isDirectPlayTv;
@property(nonatomic) _Bool tvStopedByAutoFinished; // @synthesize tvStopedByAutoFinished=_tvStopedByAutoFinished;
@property(retain, nonatomic) QLRemoteFloatViewController *remoteFloatViewController; // @synthesize remoteFloatViewController=_remoteFloatViewController;
@property(nonatomic) _Bool shouldHideLoadingViewWhenStartPrepareMediaToPlay; // @synthesize shouldHideLoadingViewWhenStartPrepareMediaToPlay=_shouldHideLoadingViewWhenStartPrepareMediaToPlay;
@property(nonatomic) _Bool isUserClickPlayBtnPause; // @synthesize isUserClickPlayBtnPause=_isUserClickPlayBtnPause;
@property(retain, nonatomic) KKAdsService *adsService; // @synthesize adsService=_adsService;
@property(retain, nonatomic) QLUnityMovieView *unityMovieView; // @synthesize unityMovieView=_unityMovieView;
@property(readonly, nonatomic) _Bool toggleSwitching; // @synthesize toggleSwitching=_toggleSwitching;
@property(nonatomic) _Bool requestedAdvertisement; // @synthesize requestedAdvertisement=_requestedAdvertisement;
@property(nonatomic) _Bool showTryWatchCutDown; // @synthesize showTryWatchCutDown=_showTryWatchCutDown;
@property(retain, nonatomic) QLLiveTryWatchViewController *tryWatchCtl; // @synthesize tryWatchCtl=_tryWatchCtl;
@property(readonly, nonatomic) _Bool playerUIDisabled; // @synthesize playerUIDisabled=_playerUIDisabled;
@property(nonatomic) id <KKMediaPlayerControlProtocol> superHiberarchyDelegate; // @synthesize superHiberarchyDelegate=_superHiberarchyDelegate;
@property(nonatomic) _Bool presentFromKKPresent; // @synthesize presentFromKKPresent=_presentFromKKPresent;
@property(nonatomic) _Bool modalIsDismissing; // @synthesize modalIsDismissing=_modalIsDismissing;
@property(nonatomic) _Bool togglePresentFullScreen; // @synthesize togglePresentFullScreen=_togglePresentFullScreen;
@property(nonatomic) struct CGRect smallPlayerAttachFrame; // @synthesize smallPlayerAttachFrame=_smallPlayerAttachFrame;
@property(readonly, nonatomic) _Bool backgroundNetworkChanged; // @synthesize backgroundNetworkChanged=_backgroundNetworkChanged;
@property(nonatomic) _Bool isAppActive; // @synthesize isAppActive=_isAppActive;
@property(nonatomic) _Bool isBackground; // @synthesize isBackground=_isBackground;
@property(nonatomic) _Bool userChangedClarity; // @synthesize userChangedClarity=_userChangedClarity;
@property(retain, nonatomic) KKPlayVaribles *c_playing_varibles; // @synthesize c_playing_varibles=_c_playing_varibles;
@property(retain, nonatomic) NSTimer *cachingToPlayTimer; // @synthesize cachingToPlayTimer=_cachingToPlayTimer;
@property(retain, nonatomic) NSTimer *slideToPlayTimer; // @synthesize slideToPlayTimer=_slideToPlayTimer;
@property(nonatomic) long long waitingNums; // @synthesize waitingNums=_waitingNums;
@property(retain, nonatomic) NSTimer *prgTimer; // @synthesize prgTimer=_prgTimer;
@property(retain, nonatomic) QLIpAppealingView *ipView; // @synthesize ipView=_ipView;
@property(retain, nonatomic) WaitingLoadingView *loadingView; // @synthesize loadingView=_loadingView;
@property(retain, nonatomic) QLPlayerPreLoadingView *preLoadingView; // @synthesize preLoadingView=_preLoadingView;
@property(retain, nonatomic) QLPlayInfoAdapter *playInfoHitTagAdapter; // @synthesize playInfoHitTagAdapter=_playInfoHitTagAdapter;
@property(retain, nonatomic) QLPlayInfoAdapter *playInfoFlowAdapter; // @synthesize playInfoFlowAdapter=_playInfoFlowAdapter;
@property(retain, nonatomic) QLFigerReportMgr *figerReportMgr; // @synthesize figerReportMgr=_figerReportMgr;
@property(retain, nonatomic) KKMediaPlayCountReporter *playCountReporter; // @synthesize playCountReporter=_playCountReporter;
@property(retain, nonatomic) QLPlayerCacheJuster *playerCacher; // @synthesize playerCacher=_playerCacher;
@property(retain, nonatomic) KKAdsFunnelReporter *adsFunnelReporter; // @synthesize adsFunnelReporter=_adsFunnelReporter;
@property(retain, nonatomic) KKMediaPlayerEventSender *playerEventSender; // @synthesize playerEventSender=_playerEventSender;
@property(nonatomic) double backGroundInternal; // @synthesize backGroundInternal=_backGroundInternal;
@property(nonatomic) long long directPlayTvType; // @synthesize directPlayTvType=_directPlayTvType;
@property(retain, nonatomic) QLMainMovieLiveVoteController *mainMovieVoteCtl; // @synthesize mainMovieVoteCtl=_mainMovieVoteCtl;
@property(retain, nonatomic) QLPlayerLoadingManager *playerLoadingMgr; // @synthesize playerLoadingMgr=_playerLoadingMgr;
@property(retain, nonatomic) QLVideoSplitingMgr *videoSplitMgr; // @synthesize videoSplitMgr=_videoSplitMgr;
@property(retain, nonatomic) QLTipShareToMomentMgr *shareTipsMgr; // @synthesize shareTipsMgr=_shareTipsMgr;
@property(retain, nonatomic) KKMediaRootHelper *rootHelper; // @synthesize rootHelper=_rootHelper;
@property(nonatomic) _Bool needToPauseAfterReplay; // @synthesize needToPauseAfterReplay=_needToPauseAfterReplay;
@property(nonatomic) _Bool isRequestBackAdvertisement; // @synthesize isRequestBackAdvertisement=_isRequestBackAdvertisement;
@property(nonatomic) _Bool isInsertHDMI; // @synthesize isInsertHDMI=_isInsertHDMI;
@property(nonatomic) float currentHeadsetVolume; // @synthesize currentHeadsetVolume=_currentHeadsetVolume;
@property(nonatomic) float currentBroadcastVolume; // @synthesize currentBroadcastVolume=_currentBroadcastVolume;
@property(nonatomic) float previousHeadsetVolume; // @synthesize previousHeadsetVolume=_previousHeadsetVolume;
@property(nonatomic) float previousBroadcastVolume; // @synthesize previousBroadcastVolume=_previousBroadcastVolume;
@property(nonatomic) _Bool isFirstInsertHeadset; // @synthesize isFirstInsertHeadset=_isFirstInsertHeadset;
@property(nonatomic) _Bool isFirstPullOutHeadset; // @synthesize isFirstPullOutHeadset=_isFirstPullOutHeadset;
@property(nonatomic) long long interfaceType; // @synthesize interfaceType=_interfaceType;
@property(readonly, nonatomic) _Bool isCachingVideoAfterAdLoadFinish; // @synthesize isCachingVideoAfterAdLoadFinish=_isCachingVideoAfterAdLoadFinish;
@property(nonatomic) _Bool hotspotCaching; // @synthesize hotspotCaching=_hotspotCaching;
@property(nonatomic) long long fileCachedNums; // @synthesize fileCachedNums=_fileCachedNums;
@property(nonatomic) long long cachingFileIndex; // @synthesize cachingFileIndex=_cachingFileIndex;
@property(nonatomic) long long retryPlayerType; // @synthesize retryPlayerType=_retryPlayerType;
@property(nonatomic) _Bool firstCache; // @synthesize firstCache=_firstCache;
@property(retain) StatusReportCtl *reportCtl; // @synthesize reportCtl=_reportCtl;
@property(copy) NSString *currentRequestID; // @synthesize currentRequestID=_currentRequestID;
@property(copy) NSString *currentPlayID; // @synthesize currentPlayID=_currentPlayID;
@property(nonatomic) double preloadPlaybackTime; // @synthesize preloadPlaybackTime=_preloadPlaybackTime;
@property _Bool bRenderingPPP; // @synthesize bRenderingPPP=_bRenderingPPP;
@property(nonatomic) _Bool isOpenOrCloseDlna; // @synthesize isOpenOrCloseDlna=_isOpenOrCloseDlna;
@property(nonatomic) _Bool bRenderingAirplay; // @synthesize bRenderingAirplay=_bRenderingAirplay;
@property _Bool bRenderingDLNA; // @synthesize bRenderingDLNA=_bRenderingDLNA;
@property(nonatomic) _Bool bUserSeek; // @synthesize bUserSeek=_bUserSeek;
@property _Bool canBePlayed; // @synthesize canBePlayed=_canBePlayed;
@property(nonatomic) _Bool shouldNotPlay; // @synthesize shouldNotPlay=_shouldNotPlay;
@property(nonatomic) _Bool mediaRootViewControllerWasBacked; // @synthesize mediaRootViewControllerWasBacked=_mediaRootViewControllerWasBacked;
@property(retain) KKMediaPlayPreparer *mediaPreparer; // @synthesize mediaPreparer=_mediaPreparer;
@property(retain) KKMediaPlayer *mediaPlayer; // @synthesize mediaPlayer=_mediaPlayer;
@property(retain) KKMediaPlayInfo *mediaPlayInfo; // @synthesize mediaPlayInfo=_mediaPlayInfo;
@property(copy) NSString *playerTitleMark; // @synthesize playerTitleMark=_playerTitleMark;
@property(copy) NSString *playerTitle; // @synthesize playerTitle=_playerTitle;
@property(retain) KKVideoInfo *videoInfo; // @synthesize videoInfo=_videoInfo;
@property(nonatomic) _Bool isDrawingViewShowed; // @synthesize isDrawingViewShowed=_isDrawingViewShowed;
@property(nonatomic) _Bool shouldShowHelpView; // @synthesize shouldShowHelpView=_shouldShowHelpView;
@property(nonatomic) _Bool isFullScreenLocked; // @synthesize isFullScreenLocked=_isFullScreenLocked;
@property(nonatomic) _Bool isScreenLocked; // @synthesize isScreenLocked=_isScreenLocked;
@property(retain, nonatomic) QLPayVideoPlayAuthenticationViewController *payVideoPlayAuthenticationViewController; // @synthesize payVideoPlayAuthenticationViewController=_payVideoPlayAuthenticationViewController;
@property(retain, nonatomic) QLHollywoodTryWatchViewController *hollywoodTryWatchViewController; // @synthesize hollywoodTryWatchViewController=_hollywoodTryWatchViewController;
@property __weak id <KKMediaPlayerPayVideoPlayAuthDelegate> playerPayVideoPlayAuthDelegate; // @synthesize playerPayVideoPlayAuthDelegate=_playerPayVideoPlayAuthDelegate;
@property __weak id <KKMediaHollywoodTabPlayerDelegate> hollywoodTabPlayerDelegate; // @synthesize hollywoodTabPlayerDelegate=_hollywoodTabPlayerDelegate;
@property __weak id <KKMediaPlayerTryWatchDelegate> prewatchDelegate; // @synthesize prewatchDelegate=_prewatchDelegate;
@property __weak id <KKMediaPlayerMutilCameraDelegate> mutilCametaDelegate; // @synthesize mutilCametaDelegate=_mutilCametaDelegate;
@property __weak id <KKMediaPlayerDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property __weak id <KKMediaPlayerActionDelegate> actionDelegate; // @synthesize actionDelegate=_actionDelegate;
@property(nonatomic) _Bool ugcKeyboardDidAppear; // @synthesize ugcKeyboardDidAppear=_ugcKeyboardDidAppear;
@property(nonatomic) _Bool isInFullscreen; // @synthesize isInFullscreen=_isInFullscreen;
@property(retain, nonatomic) QLHotspotMovieControlView2 *hotspotCtlView; // @synthesize hotspotCtlView=_hotspotCtlView;
@property(retain, nonatomic) QLSimpleMovieControlView *smallCtlView; // @synthesize smallCtlView=_smallCtlView;
@property(retain, nonatomic) QLMainMovieControlView *fullCtlView; // @synthesize fullCtlView=_fullCtlView;
@property(nonatomic) __weak QLMovieBaseControlView *mainCtlView; // @synthesize mainCtlView=_mainCtlView;
@property(retain, nonatomic) QLProgressHandler *progressHandler; // @synthesize progressHandler=_progressHandler;
@property(retain, nonatomic) QLMediaPlayerBusinessMgr *businessMgr; // @synthesize businessMgr=_businessMgr;
@property(retain, nonatomic) JumpMediaPlay *qlJumpMediaPlayModel; // @synthesize qlJumpMediaPlayModel;
- (void).cxx_destruct;
- (unsigned long long)currentScenesID;
- (void)hiddenToast;
- (void)enableP2pDownloadInDownloadAndPlay:(_Bool)arg1;
- (void)enableP2pDownloadInDownloadAndPlay;
- (void)setAllowsExternalPlayBack:(_Bool)arg1;
- (_Bool)shouldAddHeadThumbNailForAds;
- (void)forceShowPlayerHeaderImg;
- (void)hiddenHeadViewImageThumb;
- (void)hiddenTadAdsViewControllder:(_Bool)arg1;
- (void)resendPlayerUrlToPlayer;
- (void)notifyPlayerSlideOutScreen:(_Bool)arg1;
- (long long)preloadNextVideo;
- (_Bool)isRetryToPlay;
- (long long)needShareFunctionFeture;
- (void)enableMomentFunction:(_Bool)arg1;
- (long long)getPlayerViewStyle:(long long)arg1;
- (void)reloadVideoUrlsWhenVkeyWillInvalid;
- (void)changeFullUiInfullScreen;
- (void)changeToPortraitInfullScreen:(_Bool)arg1;
- (_Bool)stopContinueRenderPlayInPortraitStyle:(long long)arg1;
- (_Bool)shouldStopContinuePlay:(long long)arg1;
- (void)enablePortraitFunction;
- (void)changeDirectionInFullWithStyle:(long long)arg1;
- (void)setFullScreenModeInContinuePlay:(_Bool)arg1 previewUpdate:(_Bool)arg2;
- (void)notifyStartToPlay;
- (_Bool)isInFullScreen;
- (id)mpc_currentBusinessMgr;
- (struct CGRect)mgc_getCurrentPlayViewFrame;
- (id)mpc_getMediaPlayInfo;
- (id)mpc_getVideoInfo;
- (id)mpcMgrHelperObject;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)initDelayBoxWithSprayModel:(id)arg1;
- (_Bool)shouldResponseForbidenShowInteractiveh5:(_Bool)arg1;
- (void)forbidenShowInteractiveh5:(_Bool)arg1;
- (_Bool)isPlyerViewVisible;
- (id)getPPPCastReportParamsWithErrorCode:(long long)arg1;
- (void)reportPPPCastCastWithIsSuccess:(_Bool)arg1 errorCode:(long long)arg2;
- (id)getRemoteProjectTypeParams:(id)arg1;
- (void)reportRemoteUrlRequestResult:(_Bool)arg1 errorCodeStr:(id)arg2;
- (void)reportRemoteEntryClickWithOperationType:(long long)arg1;
- (void)reportRemoteRetryPlay;
- (void)reportRemoteExitPlay;
- (void)reportRemoteChangeTV;
- (void)reportRemoteButtonExposure;
- (void)showDeviceListViewController:(int)arg1;
- (void)forbidenShowInteractive:(_Bool)arg1;
- (void)updateRemoteControlRenderButton;
- (_Bool)isDataSourceModelLoaded;
- (_Bool)shouldShowDLNA;
- (void)hideRemoteControlRenderButton:(_Bool)arg1;
- (void)checkTheDlnaTips;
- (void)enableRemoteControlRenderButton:(_Bool)arg1;
- (void)changeRemoteControlViewStatus:(int)arg1 tips:(id)arg2;
- (void)onClarityBtnClicked;
- (void)onRemoteRetryConnectBtnClicked;
- (void)onRemoteChangedDeviceBtnClicked;
- (void)stopAirplay;
- (void)onRemoteExitBtnClicked;
- (void)playerRemoteDidClickRightButton:(int)arg1;
- (void)playerRemoteDidClickLeftButton:(int)arg1;
- (void)handle3gButtonHidden:(_Bool)arg1;
- (void)onRemoteControlButtonClick;
- (void)didAirPlayMenuChoosed;
- (void)mediaPlayerFrozen:(_Bool)arg1;
- (void)airplayChangeRemoteControlViewStatusWithParams:(id)arg1;
- (void)airplayChangeRemoteControlViewStatus:(int)arg1 tips:(id)arg2;
- (void)didAirPlayStopToPlay;
- (void)didAirPlayFailToPlayWithError:(id)arg1;
- (void)didAirPlayReadyToPlay;
- (void)didAirPlayPrepareToPlay;
- (void)didAirPlayStartToPlay;
- (void)delaySeekDLNA:(id)arg1;
- (void)cleanDLNAState;
- (void)stopDLNAPlay;
- (void)startDLNAPlayDelay;
- (void)startDLNAPlayWithDevice:(id)arg1;
- (void)cleanPrivateProjcetState;
- (void)stopPrivatePlay;
- (void)onPPPUnbindedCurrentTV:(id)arg1;
- (void)onPPPVideoChanged:(id)arg1 video:(id)arg2;
- (void)onPPPTvClarityChanged;
- (void)onPPPStatusChanged:(id)arg1 status:(int)arg2;
- (void)onPPPFailToPlay:(id)arg1 videoInfo:(id)arg2;
- (void)onPPPStopToPlay:(id)arg1 videoInfo:(id)arg2;
- (void)onPPPStartToPlay:(id)arg1 videoInfo:(id)arg2;
- (void)dlnaRenderStatusChange:(id)arg1 status:(int)arg2;
- (void)dlnaStopToPlay:(id)arg1;
- (void)resetDlnaInitialPlayTime;
- (void)dlnaFailToPlay:(id)arg1 error:(id)arg2;
- (void)showPlaySuccessToastTip;
- (void)dlnaStartToPlay:(id)arg1;
- (void)dlnaPrepareToPlay:(id)arg1;
- (void)didDeviceStateUpdated:(int)arg1;
- (id)getCurrentVideoInfo;
- (void)continueStartPPP;
- (void)startPPPDelay;
- (void)startPlayVideoOnPrivateDevice;
- (_Bool)didChoosePrivateDevice;
- (void)delayShowAirPlayMenu;
- (_Bool)isShowAirPlay;
- (_Bool)didChooseAirplay;
- (_Bool)didChooseDLNADevice:(id)arg1;
- (void)resumeAfterReturn;
- (void)setneedToResumeAfterReturn:(_Bool)arg1;
- (_Bool)isVideoFeed;
- (id)tipOfPayVideo;
- (void)showPaySingleVideoTips;
- (void)showHollywoodJumpAdsTips;
- (void)clearJumpAdsController;
- (void)showHollywoodJumpAdsTipsIfNeed;
- (void)loadJumpAdsController;
- (long long)getLiveStatus;
- (id)shareDataSource;
- (long long)getOnlineNumber;
- (_Bool)isShowPresentEntry;
- (long long)keyType;
- (id)getVideoCoverId;
- (id)pid;
- (void)clickButton:(id)arg1;
- (_Bool)isJustTaJumpDragging;
- (long long)getCountDownForSleepMode;
- (double)getLastPlayTime;
@property(readonly, nonatomic) QLInteractiveVoteOperation *interactiveVoteOperation;
- (id)lightPlayer;
@property(readonly, nonatomic) QLMainLiveV3ViewController *mainLiveCtrl;
- (void)cleanUnityMovieView;
- (void)createUnityMovieView;
- (void)handleExceptionForPayVideo;
- (_Bool)hasRightToWatchLive;
- (void)playLiveWithGetPreviewInfo:(_Bool)arg1;
- (id)getPlayerPosterUrl;
- (void)disablePlayerControlUI;
- (void)enablePlayerControlUI;
- (void)setMediaPlayMode:(_Bool)arg1;
- (id)getBanabaSwitchState;
- (_Bool)isPlayAds;
- (void)setMediaPlayVolume:(float)arg1;
- (void)setSeekPlayTime:(double)arg1;
- (void)startPlayNextVideo;
- (void)changeMediaFormat:(id)arg1;
- (void)showAllControlViews;
- (void)hiddenAllListView;
- (void)hidAllControlViews;
- (_Bool)hasCurrentVid:(id)arg1;
- (void)jumpVideoWithLid:(id)arg1 cid:(id)arg2 vid:(id)arg3 watchTime:(double)arg4 notPlayAds:(_Bool)arg5;
- (void)seekTo:(double)arg1 needPauseAfterSeek:(_Bool)arg2;
- (void)seekTo:(double)arg1;
- (void)continueMediaPlay:(_Bool)arg1;
- (void)pauseMediaPlayWithPauseAd;
- (void)pauseMediaPlay;
- (id)getPropsDatakey;
- (long long)getLiveType;
- (void)setPresentButtonShow:(_Bool)arg1 withImage:(id)arg2;
- (void)setShareMomentTipsHide:(_Bool)arg1;
- (void)clearInteractiveDelegate;
- (void)enterLightPlayerWithLiveModel:(id)arg1;
- (id)remotePlayDisabledReason;
- (_Bool)isRemotePlayDisabled;
- (_Bool)isPPPActive;
- (_Bool)isAirPlayActive;
- (_Bool)isDLNAActive;
- (_Bool)isRemoteRendering;
- (void)removeBackAdvertisement;
- (void)notifyMiddleTypeId:(unsigned long long)arg1 serviceState:(unsigned long long)arg2;
- (_Bool)shouldLoadMiddleAds;
- (void)removeAdvertisement;
- (void)playAdvertisement;
- (void)loadAdvertisementWithType:(unsigned long long)arg1;
- (_Bool)isAdsViewConrollerIsPresent;
- (void)playBackAdvertisement;
- (void)loadBackAdvertisement;
- (_Bool)isPauseToPlayAdvertisement:(unsigned long long)arg1;
- (void)clearBackAdsService;
- (void)cleanAdsService;
- (void)createAdsService;
- (void)createBackAdsService;
- (void)createHitTagAdapter;
- (void)removePlayUrlExchage;
- (void)addPlayUrlExchange:(id)arg1;
- (void)removeMediaPlayerEventObserver:(id)arg1;
- (void)addMediaPlayerEventObserver:(id)arg1;
@property(readonly, nonatomic) int mediaPlayerState;
- (void)saveHdmiPlayLastTime;
- (void)updateCurrentViewController:(id)arg1;
- (void)uncomOrderStateChangeToInvalid:(id)arg1;
- (void)openBanabaByGesture;
- (_Bool)isPlayerPlayingAD;
- (double)getCurrentSeeBackTimestamp;
- (_Bool)isLiveSeeBackStatus;
- (_Bool)isLiveVideo;
- (_Bool)isWhymeLiveVideo;
- (_Bool)isPortraitPlayerScreen;
- (_Bool)playerUIHiddenStatus;
- (_Bool)shouldOpenBanaba;
- (double)banabaSynchTimestampForPlayer;
- (void)updateBanabaItem:(id)arg1;
- (void)checkAndSetBanabaPlaying;
- (void)delayCheckBanabaStatus;
- (void)banabaCommitNewMessage:(id)arg1 withImageURL:(id)arg2 withPresentCount:(long long)arg3;
- (void)flashBanabaAnimate;
- (_Bool)banabaContentAllowClick;
- (void)updateBanabaButtonStatusByBanabaStatus:(_Bool)arg1 whenIsAutoPlayBanaba:(_Bool)arg2;
- (void)updateBanabaStatus;
- (void)cleanBanabaResourceWhenClosePlayer;
- (void)cleanBanabaResource;
- (void)flushBanabaViewStyle;
- (void)refreshBanabaDMViewStatus;
- (unsigned long long)getBanabaDMViewType;
- (_Bool)isHeadphone;
- (void)setAdMediaViewNoMuted:(_Bool)arg1;
- (void)setAdMediaViewNoMuted:(_Bool)arg1 userChanged:(_Bool)arg2;
- (float)getHardVolume;
- (void)clearPauseAdCached;
- (void)loadAdvertisementForHotspotReport;
- (void)momentDidLoginSuccess:(id)arg1;
- (void)action:(id)arg1 didPressMomentButton:(id)arg2;
- (void)action:(id)arg1 didShowMenuView:(id)arg2;
- (void)action:(id)arg1 didPressCaptionButton:(id)arg2;
- (void)action:(id)arg1 didPressShareButton:(unsigned long long)arg2;
- (void)actionMenuDidDismissFromSuperView:(id)arg1;
- (void)action:(id)arg1 didShareActionFinish:(_Bool)arg2 actionType:(unsigned long long)arg3;
- (unsigned long long)actionShouldSupportActionTypeMask:(id)arg1;
@property(readonly, nonatomic) NSString *shareCircleDataKey;
@property(readonly, nonatomic) QLShareMomentItem *shareMomentItem;
@property(readonly, nonatomic) QLJCEMiniProgramInfo *shareMiniProgramInfo;
@property(readonly, nonatomic) NSString *shareActionUrl;
@property(readonly, nonatomic) NSArray *sharePictureList;
@property(readonly, nonatomic) NSDictionary *shareExtendInfo;
@property(readonly, nonatomic) NSString *shareContentTail;
@property(readonly, nonatomic) NSString *shareContent;
@property(readonly, nonatomic) NSString *shareSingleTitle;
@property(readonly, nonatomic) unsigned long long shareStyle;
@property(readonly, nonatomic) NSDictionary *shareReportInfo;
@property(readonly, nonatomic) QLMovieItem *shareVideoInfo;
@property(readonly, nonatomic) unsigned long long sharePlatformMask;
@property(readonly, nonatomic) NSString *shareFromPage;
@property(readonly, nonatomic) unsigned long long shareDataType;
@property(readonly, nonatomic) NSString *shareURL;
@property(readonly, nonatomic) UIImage *shareImage;
@property(readonly, nonatomic) NSString *shareImageURL;
@property(readonly, nonatomic) NSString *shareSubTitle;
@property(readonly, nonatomic) NSString *shareTitle;
@property(readonly, nonatomic) NSString *shareID;
- (id)pageDescription;
- (void)updateAdPlayTimeAndTotalTime;
- (void)enableShare:(_Bool)arg1;
@property(readonly) NSString *firstURLString;
- (void)setReportPublicStatus;
- (void)reportBeforePlayerCloseOrSwitch;
- (_Bool)playerCacheIsPlayingLive;
- (_Bool)playerCacheIsUserControlPaused;
- (long long)playerCacheLoadState;
- (long long)playerCachePlaybackState;
- (double)playerCacheCurrentPlaybackTime;
- (void)showHelperTips;
- (void)showBanabaHelperTipsWasOverdueOfHandle;
- (_Bool)isShowingWWANTips;
- (_Bool)hasVipClarityResulution;
- (void)hideStatusBarTimer:(id)arg1;
- (void)onKKAdsShareClicked;
- (_Bool)ifAdsCanSkipForHuaNa;
- (void)jumpAdsPlayVideo;
- (void)showProjectionExperienceTips;
- (void)showAdaSkipResultWithTips:(id)arg1;
- (void)showOpeningHollywoodView;
- (id)getAdsBreakPoint;
- (void)checkIfHideControlView;
- (void)onKKAdsStateNotify:(int)arg1 adViewController:(id)arg2;
- (void)onKKAdsFaileWithError:(id)arg1;
- (void)cleanAdvertisementWhenUserSkip:(_Bool)arg1;
- (void)cleanAdvertisement:(_Bool)arg1;
- (void)loadPauseAdvertisement;
- (id)getFeedsPageInfo;
- (id)getLid;
- (_Bool)loadAdvertisement;
- (void)closePauseADView;
- (_Bool)isMutilCameraADMode;
- (int)getPlayAdModeWhileBulletinBoarV2Live;
- (int)getPlayAdMode;
- (_Bool)shouldLoadHeadAdvertisement;
- (_Bool)hasLoadHeadAdsThisVideo;
- (_Bool)isAdvertisementEnabled;
- (void)didAdvertisementProcessFinished;
- (void)configChatRoomEntry;
- (void)tryToShowMutilCameraTip;
@property(readonly, nonatomic) _Bool isPlayingAds;
- (_Bool)isShowingErrorTipDuringPlayingAds;
- (void)onMediaDidContinuePlay;
- (void)onMediaDidUserPause;
- (void)onMediaDidPauseOrStop;
- (void)onMediaDidStartPlay;
- (void)newReportForVid:(id)arg1 cmd:(long long)arg2;
- (void)playCtlWithVideo:(id)arg1 index:(long long)arg2 lastPlay:(double)arg3 resolution:(id)arg4 vids:(id)arg5 titles:(id)arg6 infoList:(id)arg7 screenshots:(id)arg8 fullTags:(id)arg9;
- (void)screenLockViewDidHide;
- (void)delayForceChangeDeviceOrientation:(id)arg1;
- (void)screenLockStateChanged:(_Bool)arg1;
- (void)ToFullMediaScreen:(id)arg1;
- (void)ToSmallMediaScreen:(id)arg1;
- (void)OnInterfaceOrientationsDetect:(id)arg1;
- (void)hideScreenLock;
- (void)showScreenLock;
@property(readonly, nonatomic) _Bool isPlayerVisible;
- (void)playerControlPlayerDidSinggleTag:(id)arg1;
- (void)playerControlActionStatus:(unsigned long long)arg1;
- (void)playerDidClickBackButton:(id)arg1;
- (void)playerDidClickBackButton:(id)arg1 withAnimation:(_Bool)arg2;
- (void)showLiveMutilCameraButtonAction;
- (void)configFullScreenMutilCamera;
- (void)playerControlDidClickPlay:(id)arg1;
- (void)playerControlDidClickRender:(id)arg1;
- (void)playerControlDidClickShare:(id)arg1;
- (void)playerControlDidClickDownload:(id)arg1;
- (void)playerControlDidClickFavorite:(_Bool)arg1;
- (id)detailMovieItem;
- (_Bool)userAllowPlayAndDownload;
- (_Bool)didShowPlayAndDownloadAlertWithTime:(double)arg1;
- (_Bool)shouldSeekEndWhenPlayerControlSeekEndDownloadAndPlay:(double)arg1;
- (void)downloadAndPlayAlertViewConfirmActionWithTime:(double)arg1;
- (void)downloadAndPlayAlertViewCancelAction;
- (void)tapSliderViewLeftTimeLabel;
- (void)playerControlSeekEnd:(double)arg1 duration:(double)arg2;
- (void)resetBUserSeekValue;
- (void)playerControlSeekTo:(double)arg1 duration:(double)arg2;
- (void)preWatchAutoFinish__bridge:(_Bool)arg1;
- (void)preWatchAutoFinish:(_Bool)arg1;
- (void)playerControlSeekBegin:(double)arg1 duration:(double)arg2;
- (_Bool)palyAtLast5Min;
- (_Bool)isHDMIMode;
- (void)playerEndBuffering;
- (void)playerStartBuffering;
- (void)mediaPlayerAirplayState:(_Bool)arg1;
- (void)mediaPlayerDidExitFullscreen:(id)arg1;
- (void)mediaPlayerDidEnterFullscreen:(id)arg1;
- (_Bool)cancelAssetLoading;
- (void)changePlayerToRetryPlay:(id)arg1 playerType:(int)arg2;
- (void)offlineChangeToOnlinePlay;
- (void)mediaPlayerStateNotify:(id)arg1 withState:(long long)arg2 withError:(id)arg3 withFileCacheOrder:(long long)arg4 withIsCurrentFile:(_Bool)arg5;
- (void)mediaPlayerCheckMediaUrlError:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerRequestStateChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)applyDLNAFuncItem;
- (void)applyAirPlayFuncItem;
- (_Bool)isFinalVarietyVideo;
- (void)startToPlayNextVideo;
- (long long)getP2PDataID;
- (void)mediaPlayerPlaybackDidFinish:(id)arg1;
- (void)mediaPlayerPlaybackStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerLoadStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerNaturalSizeAvailable:(id)arg1;
- (void)onClarityInfoUpdated;
- (_Bool)isNeedDetailData;
- (_Bool)isPlayHDMI;
- (_Bool)isPlayP2PShouldAbort;
- (_Bool)isPlayP2PFailed;
- (void)onVideoIDPrepared:(id)arg1;
- (void)onVideoDetailDataReady;
- (void)onVideoInfoUpdated:(int)arg1;
- (_Bool)needReadFromCache;
- (_Bool)needSaveCache;
- (void)requestJsonVideoListFailed;
- (void)onVideoInfoPrepareFailed:(id)arg1;
- (void)playLiveAfterQueue;
- (void)didRequestFailedWithPrepare:(id)arg1 withkey:(id)arg2 error:(id)arg3 isNetError:(_Bool)arg4;
- (long long)getDataRequestCachePolicy;
- (_Bool)isInVideoPreviewPage;
- (_Bool)isInLiveQueue;
- (_Bool)isLiveWatchback;
- (id)getSeeBackState;
- (id)getLastSessionKey;
- (void)delayShowQueueJumpToast;
- (void)checkQueueJumpToast;
- (void)onVideoLiveQueue:(id)arg1 withGetProVInfo:(unsigned long long)arg2;
- (void)onVideoNoPurchaseForPaidMedia:(id)arg1 withGetProVInfo:(unsigned long long)arg2;
- (void)onVideoInfoPrepared:(id)arg1;
- (id)playerVersion;
- (_Bool)shouldSendReport;
- (void)applicationActive;
- (_Bool)checkActiveShouldPlayStatus;
- (void)stopQQMediaPlayer;
- (void)stopPlayerWhileBackgroundChangeTo3G;
- (void)reachabilityChanged;
- (_Bool)isCachingData;
- (_Bool)canDownloadRuning;
- (id)topViewControlObjEx;
- (id)topViewControlObj;
- (void)onNetworkChanged;
- (void)checkBackPlayerWhenEnterForegroundIn3G;
- (_Bool)show3GAlertWithConfirmBlock:(CDUnknownBlockType)arg1 cancelBlock:(CDUnknownBlockType)arg2;
- (void)network3GPromptWithConfirmBlock:(CDUnknownBlockType)arg1 cancelBlock:(CDUnknownBlockType)arg2;
- (_Bool)mediaDownloadInfoLocal;
- (_Bool)checkExist3GPrompt:(_Bool)arg1;
- (id)getplayTimeTip;
- (id)getInitialPlayTimeTip;
- (void)loadPreviewPoster;
- (void)cleanPreloadingImage;
- (void)resetPreloadingImage;
- (void)showInitialPlayTimeTip;
- (void)showCachingPrompt:(_Bool)arg1 withImageIsHide:(_Bool)arg2;
- (void)setMediaplayerNoControllByMute;
- (void)routeChange:(id)arg1;
- (void)audioRouteChange:(id)arg1;
- (void)systemRouteChange:(id)arg1;
- (void)volumeChange:(id)arg1;
- (void)systemVolumeChange:(id)arg1;
- (void)RemoveAudioRouteChangeListener;
- (void)AddAudioRouteChangeListener;
- (_Bool)checkResolutionIfLoadSlowAndPrompt;
- (_Bool)checkCachingTimeWithDuration;
- (double)checkCachingTimeThanPlayingTime;
- (_Bool)checkMediaPlayerStateIsPlayed;
- (void)updateSmallCtlViewStatus;
- (void)getVideoThumbImages:(double)arg1 count:(long long)arg2 interval:(double)arg3 completedHandler:(CDUnknownBlockType)arg4;
- (_Bool)isFormatExist:(id)arg1;
- (void)didClarityChanged:(id)arg1 shouldReload:(_Bool)arg2;
- (id)videoClarities;
- (double)currentVideoDuration;
- (double)currentVideoPlayableDuration;
- (double)currentVideoPlayTime;
- (id)getCurrentVideoScreenShot;
- (void)openStatusBar:(id)arg1;
- (void)resetRightListView;
- (id)getPlayingSubTitle;
- (id)getPlayingTitle;
- (void)updatePlayViewWhenAutoPlayADS;
- (void)refreshListButton;
- (_Bool)localFileHasPermissionPlay;
- (_Bool)isLocalFile;
- (int)currentItemInfo;
- (id)refreshMainCtlVideoTitle;
- (void)updatePlayNextButtonClickEnable;
- (void)controlDownButtonAndClarityButton:(_Bool)arg1;
- (void)controlHiddenMrakLableImage:(_Bool)arg1;
- (void)controlDownButtonAndMoreButtonWithTVLive;
- (void)makeDetailData;
- (void)mannlyPlayAction:(id)arg1;
- (void)mannlyPerformPlayAction:(id)arg1;
- (void)delayCheckPortraitFullMode;
- (void)setPlayerHorizontalFullMode;
- (void)setPlayerPortraitFullMode;
- (void)setToPortrait;
- (void)performRotationAnimation:(_Bool)arg1;
- (void)toggleFullscreen:(_Bool)arg1 animated:(_Bool)arg2 toggleTouch:(_Bool)arg3;
- (void)recoverPlayerUI;
- (id)customViewWithLayerID:(int)arg1 smallOrMainPlayer:(_Bool)arg2;
- (void)removeCustomViewWithLayerID:(int)arg1 smallOrMainPlayer:(_Bool)arg2;
- (_Bool)addCustomView:(id)arg1 withLayerID:(int)arg2 smallOrMainPlayer:(_Bool)arg3;
- (id)customPlayerUI:(_Bool)arg1;
- (void)removeCustomPlayerUI:(_Bool)arg1;
- (void)setCustomMainUI:(id)arg1;
- (void)setCustomSimpleUI:(id)arg1;
- (void)updatePlayerFrame:(_Bool)arg1 needDrawUI:(_Bool)arg2;
@property(nonatomic) struct CGRect playerFrame;
- (void)setSystemVolumeHUDStatus:(_Bool)arg1;
- (void)setSystemVolumeHUDStatus;
@property long long playerMode; // @synthesize playerMode=_playerMode;
- (_Bool)canBecomeFirstResponder;
- (void)setPlayCountReporterTriggerType;
- (void)recordPlayerSpeed:(double)arg1 withCDN:(long long)arg2;
- (void)watchHollywoodPositiveVideo;
- (void)returnFromFullScreen;
- (void)returnFromIPShowingView;
- (void)resetIPAppealing:(_Bool)arg1 needForceUpdate:(_Bool)arg2;
- (void)removeIPAppealing;
- (void)handlePlayViewWhenShowIPAppear;
- (void)showIpAppealingView;
- (_Bool)isIPLimitVideo;
- (void)retryAction;
- (_Bool)isShowingIpView;
- (void)showIPAppealing:(id)arg1;
- (void)motionCancelled:(long long)arg1 withEvent:(id)arg2;
- (void)motionEnded:(long long)arg1 withEvent:(id)arg2;
- (void)onMotionTimer;
- (void)motionBegan:(long long)arg1 withEvent:(id)arg2;
- (void)configErrorTipWithString:(id)arg1 withButtonType:(long long)arg2;
- (void)showErrorTip:(id)arg1;
- (void)showErrorTip:(id)arg1 withButtonType:(long long)arg2;
- (void)showErrorTip:(id)arg1 withButtonType:(long long)arg2 withErrData:(id)arg3;
- (long long)buttonActionEnableTypeMask;
- (void)buttonActionWithType:(long long)arg1;
- (void)removeMutilCameraView;
- (_Bool)recheckIPLimit;
- (void)showErrorTip:(long long)arg1 withError:(id)arg2;
@property(copy, nonatomic) NSString *loadingImgURL; // @synthesize loadingImgURL=_loadingImgURL;
- (long long)currentInterfaceType;
@property(copy, nonatomic) NSString *currentVideoFormat;
@property(retain) NSError *lastPlayerError;
- (void)cancelPreviousDelaySelector;
- (void)resetMediaAndPlayer;
- (void)adjustVideoDataType;
- (void)configVideoDataTypeWithInterfaceType:(long long)arg1;
- (long long)makeNextEpisodeIndexWithNetworkCheck;
- (long long)makeNextEpisodeIndex;
- (_Bool)getVideoPayState:(long long)arg1;
- (id)makeVideoFileID:(long long)arg1;
- (void)setSkipStartTimeAndEndTime;
- (void)makeMediaStartTimeAndEndTime:(double)arg1;
- (double)getVideoStartTime;
- (double)getVideoJumpEndTime;
- (id)getMediaStartTimeAndEndTime:(long long)arg1;
- (_Bool)isVideoDownloadedAtSubIndex:(long long)arg1 subName:(id)arg2;
- (void)backPlayInitialTime;
- (void)updateDownloadTaskPlaybackRecordWithLastPlayTime:(double)arg1;
- (void)saveRecordWithPlaybackTime:(double)arg1;
- (void)aysnSaveRecord;
- (_Bool)shouldSaveRecord;
- (id)getTimeQueue;
- (void)saveRecord;
- (void)willLeaveFullMediaViewController:(id)arg1;
- (void)willEnterFullMediaViewController:(id)arg1;
- (void)didEnterPlayViewControllerWithInfo:(id)arg1 renderDelegate:(id)arg2;
- (void)willEnterPlayViewControllerWithInfo:(id)arg1;
- (void)didLeavePlayViewControllerWithInfo:(id)arg1;
- (void)willLeavePlayViewControllerWithInfo:(id)arg1;
- (_Bool)isRenderingWithControllerInfo:(id)arg1;
- (void)closeAdvertisement;
- (void)p2pDownloadFacadeStopPlay;
- (void)closeMediaRootViewController;
- (void)lightcloseMediaRootViewController:(id)arg1;
- (void)pausePlayerIfShouldPaused;
- (void)playMediaAndModifyStatusWithBackPlayTime:(_Bool)arg1;
- (long long)getCurrentVideoOfflineTypeInP2PMode;
- (_Bool)isUseP2PHlsDownloadCurrentVideo;
- (void)bottomControlPlayStateFromBackground;
- (_Bool)isDownloadAndPlayVideo;
- (_Bool)isAdsVideoPaused;
- (_Bool)isAdsInCacheMode;
- (_Bool)isAdsPlaying;
- (_Bool)isAdsLoading;
- (void)controlAdsPlayOrPause:(_Bool)arg1;
- (void)controlMediaPlayStop;
- (void)controlMediaPlayOrPause:(_Bool)arg1;
- (void)slideToPlay:(double)arg1 needToPauseAfterSlide:(_Bool)arg2;
- (void)slideToPlay:(double)arg1;
- (_Bool)isFuncItemEnabled:(int)arg1;
- (void)setFuncItem:(int)arg1 enable:(_Bool)arg2;
- (void)startToPlayOtherFormat:(id)arg1;
- (void)handleIapViewWhenPlayLocalVideo;
- (void)startMediaPlayToPlayAgainWithReason:(long long)arg1 withError:(id)arg2;
- (_Bool)playNextEpisode:(_Bool)arg1;
- (_Bool)startToPlayNextEpisode:(_Bool)arg1;
- (void)playNextButtonClick;
- (_Bool)canPrewatchPlayIndex:(long long)arg1 locTopViewControlObj:(id)arg2;
- (void)startMediaPlayToPlayWithIndex:(long long)arg1 withNeedMoveButton:(_Bool)arg2;
- (_Bool)videoIndexPayCanBePlayed:(long long)arg1;
- (void)forceStartMediaPlayToPlay:(_Bool)arg1;
- (void)startMediaPlayToPlay;
- (void)dealPreCache;
- (_Bool)shouldLoadPreviewPoster;
@property(readonly, nonatomic) _Bool isInCacheMode;
- (void)jumpToWebPlay;
- (_Bool)checkAdsPlayableType;
- (void)readyToPlayAds;
- (void)configInitialPlayedTime;
- (void)readyToPlayVideo;
- (_Bool)canReadyToPlayVideo;
- (void)updateSmallPlayViewWhenCancelPlayIn3GNet;
- (void)setSmallCtlViewTapEnabled:(_Bool)arg1;
- (void)check3GMediaPlay:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isConfirmed3GPlay;
- (void)configUnicomModeVideoPlay;
- (_Bool)shouldToPrepareVideo;
- (void)startPrepareMediaToPlay;
- (void)startPrepareHlsForAirplay;
- (void)loadInteractive;
- (id)getAdsVideoInfo;
- (void)handleIapViewAndProgressWhenNoPlayCopyRightVideo;
- (void)startPlayMedia:(_Bool)arg1;
- (id)tipStringForErrorType:(int)arg1;
- (id)circleShareKey;
- (id)itemExtra;
- (id)posterForPlayCopyRightVideo;
- (id)webUrlForPlayCopyRightVideo;
- (int)copyRightErrorType;
- (_Bool)hasPlayCopyRightWithCurrentVideo;
- (void)startPlayMedia;
- (void)updateVideoDetailInfoFromJceModel:(id)arg1;
- (_Bool)getShowInitialPlayTimeTipValue;
- (void)makeMediaPlayWithVideoInfo:(id)arg1 withPlayedTime:(double)arg2 withEpisodeIndex:(long long)arg3 withVideoList:(id)arg4 withInterfaceTye:(long long)arg5;
@property(readonly) _Bool startedPlay;
- (void)setPauseAdsFlag:(_Bool)arg1;
@property(readonly) QQMediaPlayerController *moviePlayerController;
- (void)hideContentController:(id)arg1;
- (void)displayContentController:(id)arg1;
- (struct CGRect)frameForContentController;
- (void)removeCustomObserver;
- (void)releaseCustomObject;
- (void)removeCustomSubViews;
- (void)removeAllRelationshipObject;
- (void)addCustomObserver;
- (void)addCustomUnlongLiveSubViews;
- (void)addCustomeSubViews;
- (_Bool)isExistWaterMark:(id)arg1;
- (void)removeWaterMark:(id)arg1;
- (void)showWaterMark:(id)arg1;
- (void)createCustomViews;
- (void)addAllRelatioinShipObject;
- (void)checkSubViewStatus;
- (void)checkPortraitVideoToast;
- (void)resetPlayerViewForPortraitVideo;
- (void)smallPlayerComplectedDelegate;
- (void)endChangePlayerFlush:(_Bool)arg1;
- (void)didLoadOnSmallPlayerMode;
- (void)didLoadOnFullPlayerMode;
- (void)willLoadOnSmallPlayerMode;
- (void)willLoadOnFullPlayerMode;
- (void)launchSmallPlayer;
- (void)launchFullPlayerWithiOS7:(_Bool)arg1;
- (void)launchFullPlayer;
@property(nonatomic) long long playStyle; // @synthesize playStyle=_playStyle;
- (void)calculatorPlayerZoneWhenInit;
- (void)n_KeyboardWillShow:(id)arg1;
- (void)afterChangeKeyboard;
- (void)n_KeyboardDidChange:(id)arg1;
- (void)n_KeyboardWillAutoShow:(id)arg1;
- (void)n_KeyboardDidShow:(id)arg1;
- (void)n_UgcInputViewWillShow:(id)arg1;
- (void)n_MomentInputViewWillShow:(id)arg1;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (_Bool)presentNewFullPlayer;
- (void)viewWillLayoutSubviews;
- (void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (unsigned long long)supportedInterfaceOrientations;
- (void)setPresentViewLockNoRotate:(id)arg1;
- (_Bool)shouldAutorotate;
- (void)ugcEditInputViewDisappear:(id)arg1;
- (void)ugcEditInputViewAppear:(id)arg1;
- (void)didReceiveMemoryWarning;
- (_Bool)prefersHomeIndicatorAutoHidden;
- (void)viewDidUnload;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)unRegisterNotificationWhenViewWillDisAppear;
- (void)registerNotificationWhenViewWillAppear;
- (_Bool)isOnlyFullScreenMode;
- (void)onPlayerToPlay:(id)arg1;
- (void)onPlayerToPause:(id)arg1;
- (void)onPlayerShouldPausePlay:(id)arg1;
- (void)onPlayerWillStartToPlay:(id)arg1;
- (void)onAppWillEnterForeground:(id)arg1;
- (void)onAppDidEnterBackground:(id)arg1;
- (void)onAppDidBecomeActive:(id)arg1;
- (void)onAppWillResignActive:(id)arg1;
- (void)jumpAdRefreshNotification:(id)arg1;
- (void)switchClarityFormat;
- (void)removeAllObserver;
- (void)dealloc;
- (void)resumePlayerToStateWhenEnterIntoDetailPageIfNecessary;
- (_Bool)checkPagePlayerStatus;
- (void)checkPageAdStatus;
- (void)destoryFloatRender;
- (void)vipStateChanged;
- (void)loginStateChange;
- (void)resetSequenceNum;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)getPlayerReportParams;
- (void)handleMediaPlayerExit;
- (id)superHiberarchyViewController;
- (void)hiddenMediaRootViewController;
- (void)displayMediaRootViewControllerBySuperHiberarchyViewController:(id)arg1 OnSuperView:(id)arg2 withSetFrameBlock:(CDUnknownBlockType)arg3;
- (void)unregisterRotationFunctionBySuperHiberarchyViewController;
- (void)registerRotationFunctionBySuperHiberarchyViewController:(id)arg1;
- (void)forceChangeDeviceOrientation:(_Bool)arg1;
- (void)kkDismissViewControllerAnimated:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setModalDismissing:(id)arg1;
- (void)kkDismissViewControllerAnimated:(_Bool)arg1 isCloseMediaPlayer:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)kkPresentViewControlleByFarthestVC:(id)arg1 animated:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (void)presentViewController:(id)arg1 animated:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)voucherLoadFinish;
- (void)vipStateLoadFinish;
- (void)refreshPayStatus;
- (void)updateNotificationStatus:(long long)arg1;
- (void)inquireVideoPayAuth:(_Bool)arg1;
- (long long)payStatusOfCurrentVideo;
- (void)payStatusRefreshFinish;
- (void)vipStateChangedRefreshDetail;
- (void)resetHeaderPlayerView;
- (void)refreshDetailPayStatus;
- (void)payStatusChangeRefreshDetail;
- (_Bool)playerCanbePlayed;
- (void)refreshconcertPayState;
- (void)userAccountAuthorizeForceCheck:(_Bool)arg1;
- (id)getCurrentVideoMainID;
- (void)offlineVideoTimeoutError;
- (_Bool)offlinePlayTimeout;
- (_Bool)offlineAuthTryPlayOfNetBroken;
- (_Bool)shouldConfigPreWatch;
- (_Bool)offlinePlayAuthPass;
- (_Bool)hiddenPreWatchHandleForDownloadFinishVideo;
- (_Bool)shouldConfigPayViewOfOfflineTaskVideo;
- (id)authController;
- (void)createPayVideoAuthHander;
- (void)setIsWaitingForVideoBillState:(_Bool)arg1;
- (_Bool)isWaitingForVideoBillState;
- (void)setPayActionHander:(id)arg1;
- (id)payActionHander;
- (void)showBanabaTips;
- (void)didMediaPlayerProgressUpdated:(double)arg1 duration:(double)arg2;
- (void)didMediaPlayerStateChanged:(int)arg1 error:(id)arg2 playerCtl:(id)arg3;
- (void)didMediaPlayerScreenChanged:(_Bool)arg1;
- (void)didMediaPlayerEventOccur:(int)arg1 userInfo:(id)arg2;
- (void)setNeedNotResponseNetWorkChangeTo3G:(_Bool)arg1;
- (_Bool)needNotResponseNetWorkChangeTo3G;
@property(nonatomic) _Bool kkNeedNotResponseStatusChangeTo3G; // @dynamic kkNeedNotResponseStatusChangeTo3G;
- (void)showSmallPlayerPlayBtn:(_Bool)arg1;
- (void)updateNetworkTipsWhenNetworkChanged;
- (_Bool)isLiveVideo;
- (void)handleWWANTipsSlideOut:(_Bool)arg1;
- (void)handleWWANTipsDisappear;
- (void)handleWWANClickToPlay;
- (_Bool)isWWANTipsShowing;
- (void)afterWWANTipsClick;
- (void)reportWWANTipsClick;
- (void)reportWWANTipsShowUp;
- (double)getFileSizeForFormat:(id)arg1;
- (void)showTipsWithViewController:(id)arg1;
- (void)showTips;
- (void)forceShowWWANToast;
- (void)showWWANToastWithViewController:(id)arg1;
- (void)showWWANToast;
- (id)getWWANTipsText;
- (id)getCurrentPlayingVideoItemPosterImgUrl;
- (double)getCurrentPlayingVideoItemVideoFileSize;
- (void)removeNetworkTipsViewWithPlayBlock:(CDUnknownBlockType)arg1;
- (void)removeNetworkTipsViewClose;
- (void)removeNetworkTipsViewStart;
- (void)updateNetworkTipsViewData;
- (void)updatePosterImgWithDefaultUrl:(id)arg1;
- (void)updateNetworkTipsViewFrame;
- (void)showNetworkTipsViewForData:(double)arg1 imageUrl:(id)arg2 actionBlock:(CDUnknownBlockType)arg3;
- (void)syncReportKeyAndParams;
- (id)createPlayCacheReportParams;
- (void)setPlayCacheValue;
- (void)enterQLVRssViewNotify;
- (void)flushPageNotify;
- (void)resetPlayerSequence;
- (double)getCurrentTime;
- (id)reportMtaDictionary;
- (id)playerExpansionReportParams;
- (_Bool)checkOfflineVideoPayState;
- (unsigned long long)reportPayState;
- (unsigned long long)reportLivePayState;
- (long long)mainLoginType;
- (void)endCacheAndPlayProcess;
- (void)startPlayProcess;
- (void)reportBeforePlayerCloseOrSwitch2;
- (void)setPublicStatusOfReports;
- (long long)reportEnumFromDataType:(long long)arg1;
- (id)getReportDataDicWithParam1:(id)arg1 Val1:(id)arg2 Param2:(id)arg3 Val2:(id)arg4;
- (id)getBaseReportDataDic;
- (void)mediaPlayerCachedState:(long long)arg1 withStepType:(long long)arg2;
- (long long)changeVideoDataTypeToFileType:(long long)arg1;
- (void)mediaPlayerCachedState:(long long)arg1 withCachFileIndex:(long long)arg2 withIsFirstCache:(_Bool)arg3 withCurrentFileCachedNums:(long long)arg4 withFileType:(long long)arg5 withFileUrl:(id)arg6 stepType:(long long)arg7;
- (long long)countMP4Order:(double)arg1;
- (id)currentPlayingAddress;
- (id)currentPlayingMP4Address;
- (long long)currentPlayingMP4Index;
- (void)removeRateTips;
- (_Bool)willPlayMiddleAds;
- (void)countSeekForward:(_Bool)arg1;
- (void)updatePlayerRateAndProgressInterval;
- (void)enableSystemVolumeHUD:(_Bool)arg1;
- (void)requestChangedForEmptyPixelBuffer;
- (id)createReportDic;
- (void)reportVRSwitch:(_Bool)arg1;
- (void)reportVRPlay;
- (void)notifyPlayVRVideo;
- (void)responseVrButtonClickAction;
- (void)switchToSmallScreenInVRVideo;
- (void)configPlayerType;
- (void)removeVRTips;
- (void)showVRTips;
- (BOOL)videoFlag;
- (void)updateVideoFlagInVideoInfo;
- (void)tryShowAlertViewOfPaySingle;
- (void)prewtachForDownloadAndPlayVideoFinish;
- (void)loadBigBangInfo;
- (void)resetPlayStateWhenplayAuthorizeChange;
- (void)configtryWatchNaviBtnHidden:(_Bool)arg1 shouldReport:(_Bool)arg2;
- (void)jumpPayH5ForSeries;
- (void)forceRereshPayBillForPayVideo;
- (void)updateNaviBarHidden:(_Bool)arg1;
- (void)setBecomeVipButtonHidden:(_Bool)arg1;
- (void)preWatchIapViewHidden:(_Bool)arg1;
- (_Bool)iapViewIsShowing;
- (void)handleVipBttonMiddleTypeId:(unsigned long long)arg1 serviceState:(unsigned long long)arg2;
- (void)updateIAPViewShouldHiddenBlock;
- (void)configFullPlayIapViewQLPayStateBigBang;
- (void)configFullPlayIapViewQLPayStatePayOnly;
- (void)configFullPlayIapView;
- (void)vipLoginedConfigTopViewWithVideoPayType:(long long)arg1;
- (void)setOperationalActivityTryWatch;
- (void)configFullPlayTopViewTryWatchType:(long long)arg1;
- (_Bool)shouldShowOpenVIPBtn;
- (id)titleForPlayerRightTopBecomeVIPBtn;
- (_Bool)shouldConfigInitialPlayedTimeToZero;
- (void)handleDownloadFinishVideo;
- (_Bool)errorFromPlayDownloadFinishVideo;
- (void)reloadPlayerViewWhenInPreWatchPagePayCouponSuccess;
- (void)reloadPlayerViewOfInDownloadPageHasTask;
- (void)iapViewActionWithButton:(id)arg1;
- (void)reloadPlayerViewWhenInPreWatchPageLoginVIPOrSwitchVideo;
- (void)configPreWatchOfNoneTVStation;
- (void)updatePreWatchTime;
- (void)configIAPView;
- (void)hiddenIapViewWhenSwitchPreWatchVideoPlay;
- (double)preWatchTime;
- (_Bool)isPreWatchVideo;
- (void)createTryWatchViewHander;
- (id)getAppEnterBackgroundMessageInfo;
- (id)getAppDidBecomeActiveMessageInfoWithReason:(long long)arg1;
- (id)getAppWillResignActiveMessageInfoWithReason:(long long)arg1;
- (id)generatePlayerErrorCodeStrWithError:(id)arg1;
- (id)getvbkeyReportKey;
- (id)getSeekMessageInfoWithSeekBeginTime:(double)arg1 seekEndTime:(double)arg2;
- (id)getPlayerVideoBufferingMessageInfoWithErrorCode:(id)arg1;
- (id)getPlayerChangeFormatActionMessageInfo;
- (id)getPlayerVideoLoadMessageInfo:(id)arg1;
- (id)getPlayerFinishPlaybackReportMessageWithErrorcode:(id)arg1 reason:(long long)arg2;
- (id)getRequestGetvbkeyPlayerQualityMessageInfoWithErrorCode:(id)arg1 vinfoModel:(id)arg2;
- (id)getPlayerGetvinfoRequestMessageInfoWithErrorCode:(id)arg1 vinfoModel:(id)arg2;
- (id)getPlayerEnterDetailPageMessageInfoWithErrorCode:(id)arg1;
- (id)getPlayerCreateMessageInfoWithErrorCode:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool needShare;
@property(readonly, nonatomic) _Bool notUpdateShareItem;
@property(readonly, nonatomic) UIViewController *shareController;
@property(readonly, nonatomic) NSString *shareCopyContent;
@property(readonly, nonatomic) NSString *shareDataKey;
@property(readonly, nonatomic) NSData *shareGifData;
@property(readonly, nonatomic) NSData *shareOriImgData;
@property(readonly) Class superclass;

@end

