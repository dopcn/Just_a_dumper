//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "CPContentLayoutManager-Protocol.h"
#import "GPEventDelegate-Protocol.h"
#import "GeneralPlayerFeature-Protocol.h"
#import "MediaPlayerFeature-Protocol.h"
#import "YYMediaPlayerNetworkParamsDelegate-Protocol.h"

@class Advs, CPContentView, EmbedPlayerEventManager, EmbedPlayerNetworkManager, GPEventObservation, GPModuleManager, GPRequestParamProvider, MPSetting, NSDictionary, NSString, UIView, UIViewController, VideoPlayInfo, YKJSONClient, YYMediaPlayer;
@protocol EmbedPlayerEventDelegate;

@interface EmbedPlayer : NSObject <CPContentLayoutManager, MediaPlayerFeature, GeneralPlayerFeature, GPEventDelegate, YYMediaPlayerNetworkParamsDelegate>
{
    double _initWidth;
    _Bool _statisticsCacheTypeFlag;
    long long _seekBeginTime;
    long long _seekEndTime;
    long long _totalPlayedTime;
    _Bool scaleFill;
    _Bool _disableAutoplay;
    _Bool _withoutSavingHistory;
    _Bool _showWWANForRecommend;
    _Bool _rtmpeVideo;
    _Bool _rtmpePlay;
    _Bool _isMute;
    int _cpuType;
    long long _err;
    long long _videoSubjectType;
    id <EmbedPlayerEventDelegate> _delegate;
    YYMediaPlayer *_player;
    UIViewController *_ownerController;
    EmbedPlayerNetworkManager *_netWorkManager;
    EmbedPlayerEventManager *_eventManager;
    long long _embedPlayerType;
    long long _embedAutoPlayType;
    long long _playState;
    NSString *_playingVid;
    NSDictionary *_vvStatisticsDataSource;
    GPModuleManager *_moduleManager;
    GPEventObservation *_playerObserve;
    CPContentView *_contentView;
    UIView *_customContentView;
    UIView *_suspendContentView;
    GPRequestParamProvider *_requestParamProvider;
    MPSetting *_mpsetting;
    VideoPlayInfo *_videoPlayInfo;
    NSString *_currentPlayingVideoId;
    YKJSONClient *_jsonclient;
    double _playerDefaultHeight;
    long long _playerMode;
}

@property(nonatomic) long long playerMode; // @synthesize playerMode=_playerMode;
@property(nonatomic) double playerDefaultHeight; // @synthesize playerDefaultHeight=_playerDefaultHeight;
@property(retain, nonatomic) YKJSONClient *jsonclient; // @synthesize jsonclient=_jsonclient;
@property(nonatomic) _Bool isMute; // @synthesize isMute=_isMute;
@property(copy, nonatomic) NSString *currentPlayingVideoId; // @synthesize currentPlayingVideoId=_currentPlayingVideoId;
@property(nonatomic) _Bool rtmpePlay; // @synthesize rtmpePlay=_rtmpePlay;
@property(nonatomic) _Bool rtmpeVideo; // @synthesize rtmpeVideo=_rtmpeVideo;
@property(nonatomic) int cpuType; // @synthesize cpuType=_cpuType;
@property(retain, nonatomic) VideoPlayInfo *videoPlayInfo; // @synthesize videoPlayInfo=_videoPlayInfo;
@property(retain, nonatomic) MPSetting *mpsetting; // @synthesize mpsetting=_mpsetting;
@property(retain, nonatomic) GPRequestParamProvider *requestParamProvider; // @synthesize requestParamProvider=_requestParamProvider;
@property(retain, nonatomic) UIView *suspendContentView; // @synthesize suspendContentView=_suspendContentView;
@property(retain, nonatomic) UIView *customContentView; // @synthesize customContentView=_customContentView;
@property(retain, nonatomic) CPContentView *contentView; // @synthesize contentView=_contentView;
@property(retain, nonatomic) GPEventObservation *playerObserve; // @synthesize playerObserve=_playerObserve;
@property(retain, nonatomic) GPModuleManager *moduleManager; // @synthesize moduleManager=_moduleManager;
@property(retain, nonatomic) NSDictionary *vvStatisticsDataSource; // @synthesize vvStatisticsDataSource=_vvStatisticsDataSource;
@property(nonatomic) _Bool showWWANForRecommend; // @synthesize showWWANForRecommend=_showWWANForRecommend;
@property(nonatomic) _Bool withoutSavingHistory; // @synthesize withoutSavingHistory=_withoutSavingHistory;
@property(nonatomic) _Bool disableAutoplay; // @synthesize disableAutoplay=_disableAutoplay;
@property(retain, nonatomic) NSString *playingVid; // @synthesize playingVid=_playingVid;
@property(nonatomic) long long playState; // @synthesize playState=_playState;
@property(nonatomic) long long embedAutoPlayType; // @synthesize embedAutoPlayType=_embedAutoPlayType;
@property(nonatomic) long long embedPlayerType; // @synthesize embedPlayerType=_embedPlayerType;
@property(retain, nonatomic) EmbedPlayerEventManager *eventManager; // @synthesize eventManager=_eventManager;
@property(retain, nonatomic) EmbedPlayerNetworkManager *netWorkManager; // @synthesize netWorkManager=_netWorkManager;
@property(readonly, nonatomic) __weak UIViewController *ownerController; // @synthesize ownerController=_ownerController;
@property(retain, nonatomic) YYMediaPlayer *player; // @synthesize player=_player;
@property(nonatomic) __weak id <EmbedPlayerEventDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long videoSubjectType; // @synthesize videoSubjectType=_videoSubjectType;
@property(nonatomic) long long err; // @synthesize err=_err;
@property(nonatomic) _Bool scaleFill; // @synthesize scaleFill;
- (void).cxx_destruct;
- (void)contentsTouchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)contentsTouchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)contentsTouchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)contentsTouchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)contentsLayout:(id)arg1;
- (void)saveHistoryForVIPTrials;
- (void)saveLocalHistoryWithPlayed:(double)arg1 duration:(double)arg2;
- (void)saveHistory;
@property(nonatomic) long long autoPlayType;
- (void)didClickZoomButtonEventForControlsModuleView:(id)arg1;
- (void)moduleControlView:(id)arg1 controllsViewDidShow:(_Bool)arg2;
- (void)moduleControlView:(id)arg1 isPausingInitiative:(_Bool)arg2;
- (void)playFrom:(double)arg1;
- (void)playViaWWAN;
- (void)videoReplayForEndModuleView:(id)arg1;
@property(nonatomic) float volume;
- (void)moduleSeekerView:(id)arg1 DidSeekToTime:(double)arg2 isContinuePlay:(_Bool)arg3;
- (id)videoTimeTrackPointDataForModuleView:(id)arg1;
- (long long)videoStreamTypeForModuleView:(id)arg1;
- (id)videoTitleForModuleView:(id)arg1;
- (id)videoIdForModuleView:(id)arg1;
- (_Bool)playerTypeRecommendForModuleView:(id)arg1;
- (_Bool)playerTypeTopicForModuleView:(id)arg1;
- (_Bool)isCacheVideoCompleted;
- (_Bool)isSupportStereoAudio;
- (_Bool)isSupportBackgroundAudioVideo;
- (_Bool)isPanoramaVideo;
- (long long)getScreenMode;
- (_Bool)isGeneralPlayer;
- (_Bool)isFullScreen;
- (id)nocopyrightLink;
- (id)errorLink;
- (id)errorMessage;
- (void)pauseOnlyVideo;
- (id)AVPlayer;
- (id)playerView;
@property(retain, nonatomic) UIView *view;
- (void)play;
- (void)dpause;
- (void)pause;
- (_Bool)isDirectPause;
- (_Bool)isAirplaying;
- (_Bool)isFinish;
- (_Bool)isPlaying;
- (_Bool)isSeekHeading;
- (_Bool)isSeeking;
- (_Bool)isPending;
- (long long)playstate;
- (id)getCurrentVideoTitle;
- (id)getCurrentVideoId;
- (double)played;
- (double)duration;
- (id)cpu;
- (void)seekToEnd;
- (void)endSeek:(double)arg1;
- (void)seekTo:(double)arg1;
- (void)beginSeek:(double)arg1;
- (void)videoEndWithUcStatistics:(id)arg1;
- (void)played:(double)arg1;
- (void)playerDidStartPlay;
- (void)pauseVideo;
- (int)playVideoType:(long long)arg1;
- (void)playEndReason:(long long)arg1;
- (void)playInfoReady;
- (id)reproducePoints:(id)arg1;
- (id)initWithModuleManager:(Class)arg1 width:(double)arg2 height:(double)arg3 embedPlayerType:(long long)arg4;
- (void)setOwnerController:(id)arg1;
- (_Bool)isViewOnScreen;
- (long long)saveTotleFlowSize;
- (long long)willSaveFlowSize;
- (void)matchCurrentReslutionWithQuality;
- (void)matchCurrentSoundTrackWithLanguage:(id)arg1;
- (void)convertedCPURLType:(long long)arg1;
- (void)error:(long long)arg1;
- (_Bool)isWWANInterrupted;
- (id)qualityWithResolution:(long long)arg1;
- (id)adaptResolution;
- (void)positivePlayEnd;
- (void)isWillPurchaseUnicomView:(_Bool)arg1;
- (_Bool)updatePlayState:(long long)arg1;
- (void)setupModulesAccordingToPlayerMode;
- (id)embedPlayerSuspendView;
- (id)captureScreenWithSavePath:(id)arg1;
- (void)configViewFrame:(struct CGRect)arg1;
- (void)willChangePlayerScreenWithPlayerMode:(long long)arg1;
- (void)hideViewModulesWithAnimated:(_Bool)arg1;
- (void)showViewModulesWithAnimated:(_Bool)arg1;
- (_Bool)isControllsOn;
- (void)setEmbedPlayerMuteVolume:(_Bool)arg1;
- (void)deinit;
- (void)removeWWANInterruptedView;
- (void)passiveStopVideo;
- (void)enableLoadData;
- (void)disableLoadData;
- (_Bool)isRTMPEVideo;
- (_Bool)canPlayViaWWAN;
- (long long)getPlayerShowType;
- (long long)getPlayErrorCode;
- (void)playVideoWithVid:(id)arg1 from:(float)arg2;
- (void)playVideoWithVid:(id)arg1;
- (void)replayVideo;
- (void)playVideo;
- (void)dpauseVideo;
- (void)pausedVideo;
- (void)playEndReasonForStopVideo;
- (void)stopVideo;
- (id)embedPlayerView;
- (id)initWithController:(id)arg1 width:(double)arg2 height:(double)arg3 embedPlayerType:(long long)arg4;
- (id)initWithController:(id)arg1 width:(double)arg2 embedPlayerType:(long long)arg3;
- (void)dealloc;
@property(nonatomic) _Bool YKF_muted;
@property(nonatomic) long long YKF_playState;
@property(nonatomic) _Bool YKF_isFullScreen;

// Remaining properties
@property(copy, nonatomic) NSString *adext;
@property(retain, nonatomic) NSDictionary *app_buy_info;
@property(readonly, nonatomic) UIViewController *controller;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(nonatomic) _Bool fullScreen;
@property(readonly) unsigned long long hash;
@property(nonatomic, getter=isLocal) _Bool local;
@property(nonatomic) _Bool lockScreen;
@property(retain, nonatomic) Advs *preadvs;
@property(nonatomic) long long screenMode;
@property(nonatomic) long long sequence;
@property(nonatomic) _Bool showFloatChamber;
@property(nonatomic) unsigned long long style;
@property(copy, nonatomic) NSString *subscribeOwnFansCount;
@property(copy, nonatomic) NSString *subscribeOwnName;
@property(copy, nonatomic) NSString *subscribeOwnPhoto;
@property(copy, nonatomic) NSString *subscribeOwnUid;
@property(retain, nonatomic) Advs *sufadvs;
@property(readonly) Class superclass;
@property(nonatomic, getter=isUpdateAddress) _Bool updateAddress;
@property(copy, nonatomic) NSString *videoOwner;
@property(retain, nonatomic) NSDictionary *vipPayInfo;

@end

