//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MttCommonDatabaseHandler.h"

#import "DPreDownloaderDelegate-Protocol.h"
#import "MttUpgradationDelegate-Protocol.h"

@class NSMutableDictionary, NSString;

@interface MttMyVideoManager : MttCommonDatabaseHandler <MttUpgradationDelegate, DPreDownloaderDelegate>
{
    long long _myVideoVersion;
    NSMutableDictionary *_videoInfoCache;
    NSMutableDictionary *_preDownloaderDic;
}

+ (id)getFullPathForCoverImage:(id)arg1;
+ (id)getOtherRecommendVideos:(long long)arg1 videoSetNum:(long long)arg2 currentSrc:(long long)arg3;
+ (void)handleMemory;
+ (id)shareInstance;
@property(retain, nonatomic) NSMutableDictionary *preDownloaderDic; // @synthesize preDownloaderDic=_preDownloaderDic;
@property(retain, nonatomic) NSMutableDictionary *videoInfoCache; // @synthesize videoInfoCache=_videoInfoCache;
- (void).cxx_destruct;
- (void)upgrade;
- (void)responseFileInfo:(id)arg1 fromPreDownloader:(id)arg2;
- (id)regulatePageUrl:(id)arg1;
- (long long)getVieoIDByPageUrl:(id)arg1;
- (void)deleteVideoRecord:(id)arg1;
- (void)excuteUpdateVideoInfo:(id)arg1 videoInfo:(id)arg2;
- (void)updateVideoInfo:(id)arg1;
- (void)saveVideoHistoryForExtension;
- (void)notifyVideoUpdate:(id)arg1;
- (void)saveVideoRecord:(long long)arg1 dramaDatas:(id)arg2;
- (void)collectVideoRecord:(id)arg1 reqOpt:(int)arg2;
- (void)addPushWithVideoRecord:(id)arg1;
- (void)reportVideoStatInfo:(id)arg1 videoUrl:(id)arg2 videoTitle:(id)arg3 playbackProgress:(long long)arg4 videoTotalTime:(double)arg5;
- (void)remoteGetVideoInfoByPageUrl:(id)arg1 pageTitle:(id)arg2 videoId:(long long)arg3 completeBlock:(CDUnknownBlockType)arg4;
- (void)getVideoInfoByPageUrl:(id)arg1 pageTitle:(id)arg2 videoId:(long long)arg3 completeBlock:(CDUnknownBlockType)arg4;
- (void)addMyVideoRecordWithPageUrl:(id)arg1 videoUrl:(id)arg2 videoTitle:(id)arg3 playbackProgress:(long long)arg4 videoTotalTime:(double)arg5 managerType:(int)arg6;
- (void)addMyVideoRecord:(id)arg1 withIsLocalFile:(_Bool)arg2;
- (id)getThumbnailFilePathByPageUrl:(id)arg1;
- (_Bool)saveThumbnailOfMP4:(id)arg1 toPngFile:(id)arg2;
- (_Bool)saveThumbnailOfM3u8:(id)arg1 toPngFile:(id)arg2;
- (_Bool)saveThumbnailOfVideo:(id)arg1 toPngFile:(id)arg2;
- (void)saveThumbnailFromOrigin:(id)arg1 toPngFile:(id)arg2;
- (void)saveThumbnailOfUrl:(id)arg1 toPngFile:(id)arg2;
- (void)saveCoverImageWithVideoUrl:(id)arg1 toLocalFilePath:(id)arg2;
- (void)saveThumbnailFromDownloadTask:(id)arg1;
- (void)saveThumbNailFormVideoInfo:(id)arg1;
- (id)getDownloadTasksWithVideoRecord:(id)arg1;
- (id)getDownloadInfoByPageUrl:(id)arg1;
- (id)getDownloadInfoByVideoID:(long long)arg1;
- (void)deleteMyVideoLocal:(id)arg1;
- (_Bool)isNotSuccessUpdateVideoInfo:(id)arg1 withDataBase:(id)arg2;
- (_Bool)isNotSuccessInsertVideoInfo:(id)arg1 withDataBase:(id)arg2;
- (long long)isNotExistVideoIDInVideoInfo:(long long)arg1 withDataBase:(id)arg2;
- (void)addDownloadVideoRecord:(id)arg1;
- (id)getCurrentAndTotalPlaytimeByPageurl:(id)arg1;
- (void)updateCollectionOrder:(id)arg1;
- (void)getCollectedStateByVideoId:(long long)arg1 pageUrl:(id)arg2;
- (_Bool)isVideoCollectedByPageUrl:(id)arg1 videoId:(long long)arg2;
- (_Bool)isVideoCollectedByPageUrl:(id)arg1;
- (void)updateVideoRecordMaxID:(long long)arg1 withVideoID:(long long)arg2;
- (id)getDownloadVideo;
- (id)getVideoInfoDownloadWithPageUrl:(id)arg1;
- (id)getVideoInfoByVideoId:(long long)arg1;
- (id)getVideoInfoForFolderByVideoId:(long long)arg1;
- (id)getVideoInfoForPlayerByVideoId:(long long)arg1;
- (long long)getVideoCollectionNumber;
- (id)getCollectionVideo;
- (void)addVideoInfo:(id)arg1;
- (void)updateInCollectionVideoInfo:(id)arg1 withDataBase:(id)arg2;
- (id)getHistoryVideo;
- (void)videoInfoToArray:(id)arg1 byRs:(id)arg2;
- (id)videoInfoByRs:(id)arg1;
- (void)recordsToArray:(id)arg1 byRS:(id)arg2;
- (id)recordByRS:(id)arg1;
- (void)updateVideoInfoByVideoId:(long long)arg1 newMaxid:(long long)arg2 videoFrom:(long long)arg3;
- (void)updateRecordsWithPushInfo:(id)arg1;
- (void)deleteRadarCacheData;
- (void)removeVideoInfoCacheByPageUrl:(id)arg1;
- (void)removeVideoInfoCacheByVideoID:(long long)arg1;
- (void)removeCoverImage:(id)arg1;
- (void)deleteMyVideoRecordByVideoID:(long long)arg1 managerType:(long long)arg2;
- (void)deleteMyVideoRecordByURL:(id)arg1 managerType:(long long)arg2;
- (void)deleteAllMyVideoHistoryRecord;
- (void)deleteMyVideoRecord:(id)arg1 managerType:(long long)arg2;
- (void)deleteMyVideoRecords:(id)arg1 managerType:(long long)arg2;
- (id)getVideoRecordByPageUrl:(id)arg1;
- (id)getVideoRecordByVideoId:(long long)arg1 setNum:(long long)arg2;
- (id)getVideoRecordByVideoId:(long long)arg1 setNum:(long long)arg2 managerType:(int)arg3;
- (id)getLastPlaySetNumberForDramaTypeVideo:(long long)arg1;
- (void)updateRecord:(id)arg1 videoId:(long long)arg2 setNum:(long long)arg3;
- (_Bool)setMyVideoRecord:(id)arg1 collectedState:(long long)arg2;
- (void)updateRecord:(id)arg1 withPlaybackProgress:(double)arg2 videoTotalTime:(double)arg3;
- (void)updateMyVideoRecord:(long long)arg1 playbackProgress:(long long)arg2 videoTotalTime:(double)arg3 currentSetnum:(long long)arg4;
- (void)updateMyVideoRecord:(long long)arg1 pageUrl:(id)arg2 playbackProgress:(long long)arg3 videoTotalTime:(double)arg4 currentSetnum:(long long)arg5;
- (double)timeIntervalForDateDescription:(id)arg1;
- (double)timeIntervalForDate:(id)arg1;
- (id)dateFromInterval:(double)arg1;
- (long long)myVideoVersion;
- (void)updateVersion;
- (void)initMyVideoVersionTable;
- (void)createMyVideoVersionTable;
- (void)createVideoInfoTable;
- (void)createMyVideoTable;
- (void)backup;
- (void)insertRecord:(id)arg1;
- (void)recoveryTable:(id)arg1;
- (id)getAllVideoRecords;
- (void)recoveryVideoRecordFromMyvideo;
- (void)createTableIfNotExist;
- (void)initMyVideoDB;
- (void)dealloc;
- (id)containCurrentsetnum:(id)arg1;
- (id)init;
- (void)upgradeAfterSingletonInit;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

