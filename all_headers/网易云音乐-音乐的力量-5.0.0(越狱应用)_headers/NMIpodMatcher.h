//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NMID3MatchJobDelegate-Protocol.h"
#import "NMIpodAddToPlaylistJobDelegate-Protocol.h"
#import "NMIpodMatchJobDelegate-Protocol.h"

@class NMIpodMatchJob, NMIpodQueue, NSCondition, NSMutableArray, NSString, NSThread;
@protocol NMIpodID3MatchDelegate;

@interface NMIpodMatcher : NSObject <NMIpodMatchJobDelegate, NMID3MatchJobDelegate, NMIpodAddToPlaylistJobDelegate>
{
    NSThread *_jobThread;
    NMIpodQueue *_jobQeueue;
    NMIpodQueue *_finishQueue;
    NMIpodQueue *_addToListQueue;
    unsigned long long _finishCount;
    NSMutableArray *_currentMatchedSongArray;
    NSMutableArray *_persistIdList;
    _Bool _threadIsExit;
    NSObject *_statusLock;
    _Bool _resetWasRequested;
    _Bool _newThreadRequiredFlag;
    NSCondition *_condition;
    _Bool _isPaused;
    _Bool _jobFromStorage;
    long long _successCount;
    NSMutableArray *_id3JobArray;
    long long _id3JobFinishCount;
    _Bool _addRequestFinished;
    NSMutableArray *_playlistJobList;
    _Bool _needDisplayResult;
    _Bool _isWorking;
    _Bool _jobStorageLoaded;
    id <NMIpodID3MatchDelegate> _delegate;
    unsigned long long _currentMatchType;
    unsigned long long _ipodState;
    unsigned long long _resultType;
    NSMutableArray *_displaySongArray;
    double _progress;
    NMIpodMatchJob *_ipodMatchJob;
}

+ (void)startIpodMatcher;
+ (id)defaultMatcher;
@property(retain, nonatomic) NMIpodMatchJob *ipodMatchJob; // @synthesize ipodMatchJob=_ipodMatchJob;
@property(nonatomic) _Bool jobStorageLoaded; // @synthesize jobStorageLoaded=_jobStorageLoaded;
@property(nonatomic) double progress; // @synthesize progress=_progress;
@property(retain, nonatomic) NSMutableArray *displaySongArray; // @synthesize displaySongArray=_displaySongArray;
@property(nonatomic) unsigned long long resultType; // @synthesize resultType=_resultType;
@property(nonatomic) unsigned long long ipodState; // @synthesize ipodState=_ipodState;
@property(nonatomic) unsigned long long currentMatchType; // @synthesize currentMatchType=_currentMatchType;
@property(readonly, nonatomic) _Bool isWorking; // @synthesize isWorking=_isWorking;
@property(nonatomic) id <NMIpodID3MatchDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool isPaused; // @synthesize isPaused=_isPaused;
@property(nonatomic) _Bool needDisplayResult; // @synthesize needDisplayResult=_needDisplayResult;
- (void).cxx_destruct;
- (void)dealloc;
- (void)removeInvalidSong:(id)arg1;
- (void)stopQuickMatch;
- (void)startQuickMatch;
- (void)id3MatchJob:(id)arg1 matchFinished:(id)arg2;
- (void)ipodMatchJob:(id)arg1 matchFinished:(id)arg2;
- (void)ipodAddToPlaylistJob:(id)arg1 jobFinished:(id)arg2;
- (void)threadWillTerminate;
- (void)resetInit;
- (void)commitMatchResultToPlaylist;
- (void)refreshMyMusic;
- (void)sendMatchResultNotication;
- (void)sendMatchProgressNotification;
- (id)getNextAddToPlaylistJob;
- (void)doAddToPlaylistJob;
- (id)getNextNeedMatch;
- (void)doMatchJob;
- (_Bool)threadCanExit;
- (void)doCleanUp;
- (void)startMatchJobInternal;
- (void)restartMatchTask;
- (void)setupJobQeueue:(id)arg1 matchType:(unsigned long long)arg2;
- (void)setupJobQueue:(id)arg1;
- (void)startMatchTaskWithList:(id)arg1 matchType:(unsigned long long)arg2;
- (id)loadJobStorage;
- (void)saveCurrentJobStatus;
- (void)resumeMatchTask;
- (void)netPauseMatchTask;
- (void)userPauseMatchTask;
- (void)stopMatchTask;
- (id)currentMatchedSongArray;
@property(readonly, nonatomic) _Bool isMatching; // @dynamic isMatching;
@property(readonly, nonatomic) long long finishCount; // @dynamic finishCount;
@property(readonly, nonatomic) long long totalCount; // @dynamic totalCount;
@property(readonly, nonatomic) long long successCount; // @dynamic successCount;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

