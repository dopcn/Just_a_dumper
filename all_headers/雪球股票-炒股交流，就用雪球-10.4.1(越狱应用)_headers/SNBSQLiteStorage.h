//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class FMDatabaseQueue, NSCache;

@interface SNBSQLiteStorage : NSObject
{
    _Bool isOpen;
    NSCache *_userCache;
    NSCache *_groupCache;
    FMDatabaseQueue *_databaseQueue;
}

+ (void)addIndexToDataBase:(id)arg1;
+ (void)_snb_updateUserTableInDB:(id)arg1;
+ (void)_snb_updateTimelineTableInDB:(id)arg1;
+ (void)alterTablesInDataBase:(id)arg1;
+ (void)addMoreTables:(id)arg1;
+ (void)upgradeTables:(id)arg1;
+ (void)_snb_addStatusTableInDB:(id)arg1;
+ (void)createTables:(id)arg1;
+ (void)removeInvalidDBFile:(id)arg1;
+ (id)dbFilePath;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedInstance;
+ (id)_snb_statusFromDescriptionWithTimeline:(int)arg1;
@property(retain, nonatomic) FMDatabaseQueue *databaseQueue; // @synthesize databaseQueue=_databaseQueue;
@property(retain, nonatomic) NSCache *groupCache; // @synthesize groupCache=_groupCache;
@property(retain, nonatomic) NSCache *userCache; // @synthesize userCache=_userCache;
- (void).cxx_destruct;
- (void)debug:(id)arg1;
- (void)destroyDB;
- (void)clearDB;
- (void)removeDBFile;
- (_Bool)closeDB;
- (int)openDB;
- (void)dealloc;
- (id)init;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)updateStatusCard:(id)arg1 intoDB:(id)arg2;
- (_Bool)insertStatusCard:(id)arg1 intoDB:(id)arg2;
- (_Bool)addStatusCard:(id)arg1 intoDB:(id)arg2;
- (id)statusCard:(long long)arg1 fromDB:(id)arg2;
- (_Bool)isStatusCard:(long long)arg1 existInDB:(id)arg2;
- (id)getUserById:(long long)arg1;
- (id)getAllUsers;
- (_Bool)deleteUser:(long long)arg1;
- (_Bool)updateUser:(id)arg1 expireTime:(long long)arg2;
- (_Bool)updateUser:(id)arg1;
- (_Bool)addUsersBatch:(id)arg1 expireTime:(long long)arg2;
- (_Bool)addUsersBatch:(id)arg1;
- (_Bool)addUser:(id)arg1 expireTime:(long long)arg2;
- (_Bool)addUser:(id)arg1;
- (id)userByScreenName:(id)arg1;
- (id)usersByIDs:(id)arg1;
- (id)userByID:(long long)arg1;
- (_Bool)isUserExist:(long long)arg1;
- (_Bool)updateUser:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)insertUser:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (id)userByScreenName:(id)arg1 fromDB:(id)arg2;
- (id)user:(long long)arg1 fromDB:(id)arg2;
- (_Bool)isUserScreenName:(id)arg1 existInDB:(id)arg2;
- (_Bool)isUserId:(long long)arg1 existInDB:(id)arg2;
- (_Bool)updatePaidMention:(id)arg1 statusId:(long long)arg2 inDB:(id)arg3;
- (id)paidMentionsByStatusId:(long long)arg1 fromDB:(id)arg2;
- (_Bool)deletePaidMentionsByStatusId:(long long)arg1 fromDB:(id)arg2;
- (_Bool)insertPaidMention:(id)arg1 statusId:(long long)arg2 intoDB:(id)arg3;
- (_Bool)addPaidMentionBatch:(id)arg1 statusId:(long long)arg2 intoDB:(id)arg3;
- (_Bool)addPaidMention:(id)arg1 statusId:(long long)arg2 intoDB:(id)arg3;
- (_Bool)removeGroupMapCube:(id)arg1;
- (_Bool)clearCubesForType:(long long)arg1;
- (_Bool)deleteCubeByCode:(id)arg1;
- (_Bool)insertCubeSymbol:(id)arg1 WithType:(long long)arg2 groupType:(int)arg3 filterType:(int)arg4 Order:(long long)arg5 expireTime:(long long)arg6 intoDB:(id)arg7;
- (id)cubeByCode:(id)arg1 fromDB:(id)arg2;
- (id)cubesByCodes:(id)arg1;
- (id)cubesInGroup:(long long)arg1 filterType:(long long)arg2;
- (id)cubesOfType:(long long)arg1;
- (_Bool)addCubes:(id)arg1;
- (_Bool)addCube:(id)arg1;
- (_Bool)updateCube:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)updateCubeFollowCount:(id)arg1;
- (_Bool)insertCube:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)isCubeExist:(id)arg1 inDB:(id)arg2;
- (_Bool)removeGroupMapPortfolio:(id)arg1;
- (_Bool)removePortfoliosFromGroup:(long long)arg1 filterType:(long long)arg2 withCategory:(long long)arg3;
- (_Bool)addPortfolioCodes:(id)arg1 toGroup:(long long)arg2 filterType:(long long)arg3 withCategory:(long long)arg4;
- (_Bool)addPortfolios:(id)arg1 toGroup:(long long)arg2 filterType:(long long)arg3 withCategory:(long long)arg4;
- (_Bool)insertPortfolio:(id)arg1 IntoGroup:(long long)arg2 filterType:(long long)arg3 withCategory:(long long)arg4 Order:(long long)arg5 expireTime:(long long)arg6 intoDB:(id)arg7;
- (id)portfoliosInGroup:(long long)arg1 filterType:(long long)arg2;
- (id)portfoliosByCodes:(id)arg1;
- (id)portfolioByCode:(id)arg1;
- (_Bool)addPortfolios:(id)arg1;
- (_Bool)addPortfolio:(id)arg1;
- (_Bool)updatePortfolio:(id)arg1;
- (_Bool)deletePortfolioByCode:(id)arg1;
- (_Bool)updatePortfolio:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)insertPortfolio:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (id)portfosliosByCodes:(id)arg1 fromDB:(id)arg2;
- (id)portfolioByCode:(id)arg1 fromDB:(id)arg2;
- (_Bool)isPortfolioCode:(id)arg1 existInDB:(id)arg2;
- (_Bool)isPortfolioExist:(id)arg1;
- (_Bool)updateStatesFromStatuses:(id)arg1 place:(long long)arg2;
- (_Bool)deleteStatus:(long long)arg1 orderId:(long long)arg2 place:(long long)arg3;
- (_Bool)deleteStatus:(long long)arg1;
- (_Bool)updateStatus:(id)arg1 place:(id)arg2 expireTime:(long long)arg3;
- (_Bool)updateStatus:(id)arg1 place:(id)arg2;
- (_Bool)insertOrUpdateStatus:(id)arg1 place:(id)arg2 expireTime:(long long)arg3 intDB:(id)arg4;
- (_Bool)addStatusesBatch:(id)arg1 place:(long long)arg2 expireTime:(long long)arg3;
- (_Bool)addStatusesBatch:(id)arg1 place:(long long)arg2;
- (_Bool)addStatus:(id)arg1 place:(long long)arg2 expireTime:(long long)arg3;
- (_Bool)addStatus:(id)arg1 place:(long long)arg2;
- (id)_snb_statusesByIDs:(id)arg1 orderID:(long long)arg2 place:(id)arg3;
- (id)statusByID:(long long)arg1 orderID:(long long)arg2 place:(long long)arg3;
- (id)statusByID:(long long)arg1 place:(long long)arg2;
- (_Bool)_snb_updateStatus:(id)arg1 place:(id)arg2 expireTime:(long long)arg3 intoDB:(id)arg4;
- (_Bool)_snb_insertStatus:(id)arg1 place:(id)arg2 expireTime:(long long)arg3 intoDB:(id)arg4;
- (id)statusFromResultSet:(id)arg1;
- (id)_snb_status:(long long)arg1 fromDB:(id)arg2 orderID:(long long)arg3 place:(id)arg4;
- (_Bool)_snb_isStatusId:(long long)arg1 existInDB:(id)arg2 orderID:(long long)arg3 place:(id)arg4;
- (_Bool)_snb_insertTimeline:(long long)arg1 orderId:(long long)arg2 timelineType:(long long)arg3 groupId:(long long)arg4 intoDB:(id)arg5;
- (id)statusesByTimeline:(int)arg1 groupId:(long long)arg2 by:(long long)arg3;
- (id)statusesByTimeline:(int)arg1 groupId:(long long)arg2;
- (_Bool)deleteStatusesByTimeline:(int)arg1 groupId:(long long)arg2 beforeStatus:(long long)arg3;
- (_Bool)deleteStatusesByTimeline:(int)arg1 groupId:(long long)arg2;
- (_Bool)deleteStatusesByTimeline:(int)arg1;
- (_Bool)addStatusesBatch:(id)arg1 expireTime:(long long)arg2 intoTimeline:(int)arg3 groupId:(long long)arg4;
- (_Bool)addStatusesBatch:(id)arg1 intoTimeline:(int)arg2 groupId:(long long)arg3;
- (_Bool)_snb_insertStock:(id)arg1 IntoGroup:(long long)arg2 filterType:(long long)arg3 withCategory:(unsigned long long)arg4 Order:(long long)arg5 expireTime:(long long)arg6 intoDB:(id)arg7;
- (_Bool)removeGroupMapStock:(id)arg1;
- (_Bool)removeStocksFromGroup:(long long)arg1 filterType:(long long)arg2 withCategory:(unsigned long long)arg3;
- (_Bool)addStocksSymbols:(id)arg1 toGroup:(long long)arg2 filterType:(long long)arg3 withCategory:(unsigned long long)arg4;
- (_Bool)addStocks:(id)arg1 toGroup:(long long)arg2 filterType:(long long)arg3 withCategory:(unsigned long long)arg4;
- (_Bool)_snb_updateStock:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)_snb_insertStock:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (id)_snb_stcokBySymbol:(id)arg1 fromDB:(id)arg2;
- (_Bool)_snb_isStockSymbol:(id)arg1 existInDB:(id)arg2;
- (_Bool)deleteStockBySymbol:(id)arg1;
- (_Bool)updateStock:(id)arg1;
- (_Bool)addStocks:(id)arg1;
- (_Bool)addStock:(id)arg1;
- (id)stocksInGroupCategory:(unsigned long long)arg1 groupId:(long long)arg2 filterType:(long long)arg3;
- (id)stocksBySymbols:(id)arg1;
- (id)getStockBySymbol:(id)arg1;
- (_Bool)isStockExist:(id)arg1;
- (_Bool)deleteContact:(long long)arg1;
- (_Bool)isContactExist:(long long)arg1 database:(id)arg2;
- (_Bool)isContactExist:(long long)arg1;
- (_Bool)addContactBatch:(id)arg1;
- (_Bool)addContact:(id)arg1;
- (id)searchContactByText:(id)arg1;
- (long long)getContactsCount;
- (id)getAllContacts;
- (id)getAllPhoneContacts;
- (_Bool)removePhoneContacts;
- (_Bool)removePhoneContact:(id)arg1;
- (_Bool)isPhoneContactExist:(id)arg1;
- (_Bool)addPhoneContactBatch:(id)arg1;
- (_Bool)addPhoneContact:(id)arg1 recordId:(id)arg2;
- (_Bool)clearProfit;
- (id)allProfits;
- (_Bool)addProfits:(id)arg1;
- (_Bool)updateProfit:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)insertProfit:(id)arg1 expireTime:(long long)arg2 intoDB:(id)arg3;
- (_Bool)isProfitExist:(id)arg1 inDB:(id)arg2;
- (void)clearMessageTable;
- (_Bool)updateLastReadTimestampByTargetId:(long long)arg1 targetGroup:(_Bool)arg2;
- (_Bool)resetUnreadCountByTargetId:(long long)arg1 targetGroup:(_Bool)arg2;
- (unsigned long long)getUnreadCount;
- (_Bool)deleteGroupById:(long long)arg1;
- (void)flushGroups;
- (id)getHistoricalMessagesBySession:(id)arg1 until:(long long)arg2 limit:(unsigned long long)arg3;
- (_Bool)deleteMessage:(id)arg1;
- (_Bool)deleteMessagesBySession:(id)arg1;
- (unsigned long long)insertOrUpdateMessages:(id)arg1;
- (_Bool)isLocalMessageExists:(id)arg1;
- (_Bool)isMessageExists:(long long)arg1;
- (id)getMessageSessionsByExamples:(id)arg1;
- (id)getMessageSessionByExample:(id)arg1;
- (id)getAllMessageSessions;
- (unsigned long long)insertOrUpdateMessageSessions:(id)arg1;
- (_Bool)insertOrUpdateGroup:(id)arg1;
- (void)insertOrUpdateGroups:(id)arg1;
- (id)getAllGroups;
- (id)groupsByIDs:(id)arg1;
- (id)groupById:(long long)arg1;

@end

