//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSLock, NSMutableData;

@interface AudioRecorderCallback : NSObject
{
    _Bool _isAudioEnd;
    _Bool _enableVAD;
    _Bool _isListenDBLevelMeter;
    int _iCurrentSampleRate;
    struct AudioRecorder *_audioRecorder;
    double _recordDurationTime;
    unsigned long long _audioRunStatus;
    NSMutableData *_mutableAudioData;
    NSLock *_audioLock;
    unsigned long long _wakeupAudioLength;
    unsigned long long _wakeupWordAudioLength;
    unsigned long long _recognitionAudioLength;
}

+ (id)sharedInstance;
@property(nonatomic) _Bool isListenDBLevelMeter; // @synthesize isListenDBLevelMeter=_isListenDBLevelMeter;
@property(nonatomic) _Bool enableVAD; // @synthesize enableVAD=_enableVAD;
@property(nonatomic) unsigned long long recognitionAudioLength; // @synthesize recognitionAudioLength=_recognitionAudioLength;
@property(nonatomic) unsigned long long wakeupWordAudioLength; // @synthesize wakeupWordAudioLength=_wakeupWordAudioLength;
@property(nonatomic) unsigned long long wakeupAudioLength; // @synthesize wakeupAudioLength=_wakeupAudioLength;
@property(nonatomic) _Bool isAudioEnd; // @synthesize isAudioEnd=_isAudioEnd;
@property(retain, nonatomic) NSLock *audioLock; // @synthesize audioLock=_audioLock;
@property(retain, nonatomic) NSMutableData *mutableAudioData; // @synthesize mutableAudioData=_mutableAudioData;
@property(nonatomic) unsigned long long audioRunStatus; // @synthesize audioRunStatus=_audioRunStatus;
@property(nonatomic) int iCurrentSampleRate; // @synthesize iCurrentSampleRate=_iCurrentSampleRate;
@property(nonatomic) double recordDurationTime; // @synthesize recordDurationTime=_recordDurationTime;
@property(readonly) struct AudioRecorder *audioRecorder; // @synthesize audioRecorder=_audioRecorder;
- (void).cxx_destruct;
- (void)dealloc;
- (void)audioRouteChangeListenerCallback:(id)arg1;
- (void)stopRunAudio;
- (void)resumeRunAudio;
- (void)suspendRunAudio;
- (id)getAudioLengthDict;
- (int)deleteDataWithLength:(unsigned long long)arg1;
- (int)sendDataToThreadSafeQueue:(void *)arg1 length:(unsigned long long)arg2 isEnd:(_Bool)arg3;
- (void)recorderNewDataCallback:(void *)arg1 length:(unsigned long long)arg2 isUserData:(_Bool)arg3;
- (void)recorderNewDataCallback:(void *)arg1 length:(unsigned long long)arg2;
- (id)getAudioRecordDictDataAtLocation:(unsigned long long)arg1 isDelete:(_Bool)arg2;
- (int)getCurrentDBLevelMeter;
- (_Bool)isRecorderRunning;
- (void)enableLevelMetering;
- (void)listenCurrentDBLevelMeter;
- (int)getRecordBufferSize;
- (void)stopRecord;
- (int)startRecord:(double)arg1;
- (void)updateSampleRate:(int)arg1;
- (void)tryDeactivateAudioSession;
- (_Bool)whetherToEnableVAD;
- (int)getCurrentSampleRate;
- (void)initParams;
- (void)checkMicrophonePermission:(CDUnknownBlockType)arg1;
- (_Bool)isHeadsetPluggedIn;
- (id)init;

@end

