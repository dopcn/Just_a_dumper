//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MTBaseViewController.h"

#import "SAKPortalable-Protocol.h"
#import "UIWebViewDelegate-Protocol.h"
#import "WKNavigationDelegate-Protocol.h"
#import "WKScriptMessageHandler-Protocol.h"
#import "WKUIDelegate-Protocol.h"

@class NSArray, NSDictionary, NSString, NSURL, SAKWebErrorClewViewProxy, SAKWebViewControllerJavascriptBridgeHelper, SAKWebViewControllerProgressProxy, SAKWebViewPullToRefershProxy, UIActivityIndicatorView, UIBarButtonItem, UIButton, UIColor, UIImage, UIView, WKWebViewConfiguration;
@protocol SAKWebViewControllerDelegate, SAKWebViewProtocol;

@interface SAKWebViewController : MTBaseViewController <WKNavigationDelegate, WKUIDelegate, WKScriptMessageHandler, SAKPortalable, UIWebViewDelegate>
{
    UIBarButtonItem *_backButtonItem;
    UIBarButtonItem *_backAndCloseButtonItem;
    _Bool _showTitleFromWebContent;
    _Bool _showBackAndCloseButtonItem;
    _Bool _shouldPortalFromSelf;
    _Bool _shouldHaveLeftBarButtonItem;
    _Bool _enableWebViewJavascriptBridge;
    _Bool _enableMTNBBridge;
    _Bool _activityViewHidden;
    _Bool _progressHidden;
    _Bool _errorClewViewHidden;
    _Bool _needUseWKWebView;
    _Bool _originBounces;
    _Bool _originScrollEnabled;
    _Bool _notShowNavigationBar;
    _Bool _notShowCloseBtn;
    _Bool __webPageBacking;
    UIView<SAKWebViewProtocol> *_webView;
    double _webViewContentWidth;
    double _webViewContentHeight;
    NSString *_HTTPMethod;
    NSURL *_URL;
    NSDictionary *_iMeituanContent;
    id <SAKWebViewControllerDelegate> _delegate;
    SAKWebViewControllerJavascriptBridgeHelper *_webViewControllerJavascriptBridgeHelper;
    CDUnknownBlockType _exitBlock;
    UIColor *_leftButtonNormalTextColor;
    UIColor *_leftButtonHighlightedTextColor;
    UIImage *_backButtonImageForStateNormal;
    UIImage *_backButtonImageForStateHighlighted;
    UIButton *_llButton;
    UIButton *_lrButton;
    NSString *_javascriptBridgeGoBackHandlerName;
    UIActivityIndicatorView *_activityView;
    SAKWebViewControllerProgressProxy *_progressProxy;
    SAKWebErrorClewViewProxy *_errorClewViewProxy;
    WKWebViewConfiguration *_configuration;
    UIColor *_originBackground;
    NSArray *_originLeftBarButtonItems;
    NSArray *_originRightBarButtonItems;
    NSString *_originTitle;
    UIView *_originTitleView;
    UIView *_originLLView;
    UIView *_originLRView;
}

+ (void)addWKWebViewURLHandler:(CDUnknownBlockType)arg1;
+ (void)setConfigCenterHandler:(CDUnknownBlockType)arg1;
+ (id)instanceWithURL:(id)arg1 shouldTransfer:(_Bool)arg2 fromViewController:(id)arg3;
+ (void)load;
+ (void)initialize;
+ (id)spk_webViewController;
+ (id)spk_webViewControllerWithURL:(id)arg1;
+ (void)enableErrorClewView:(_Bool)arg1;
+ (_Bool)ErrorClewViewEnabled;
+ (void)enableProgress:(_Bool)arg1;
+ (_Bool)progressEnabled;
@property(nonatomic) _Bool _webPageBacking; // @synthesize _webPageBacking=__webPageBacking;
@property(nonatomic) _Bool notShowCloseBtn; // @synthesize notShowCloseBtn=_notShowCloseBtn;
@property(nonatomic) _Bool notShowNavigationBar; // @synthesize notShowNavigationBar=_notShowNavigationBar;
@property(retain, nonatomic) UIView *originLRView; // @synthesize originLRView=_originLRView;
@property(retain, nonatomic) UIView *originLLView; // @synthesize originLLView=_originLLView;
@property(retain, nonatomic) UIView *originTitleView; // @synthesize originTitleView=_originTitleView;
@property(retain, nonatomic) NSString *originTitle; // @synthesize originTitle=_originTitle;
@property(retain, nonatomic) NSArray *originRightBarButtonItems; // @synthesize originRightBarButtonItems=_originRightBarButtonItems;
@property(retain, nonatomic) NSArray *originLeftBarButtonItems; // @synthesize originLeftBarButtonItems=_originLeftBarButtonItems;
@property(nonatomic) _Bool originScrollEnabled; // @synthesize originScrollEnabled=_originScrollEnabled;
@property(nonatomic) _Bool originBounces; // @synthesize originBounces=_originBounces;
@property(retain, nonatomic) UIColor *originBackground; // @synthesize originBackground=_originBackground;
@property(nonatomic) _Bool needUseWKWebView; // @synthesize needUseWKWebView=_needUseWKWebView;
@property(retain, nonatomic) WKWebViewConfiguration *configuration; // @synthesize configuration=_configuration;
@property(retain, nonatomic) SAKWebErrorClewViewProxy *errorClewViewProxy; // @synthesize errorClewViewProxy=_errorClewViewProxy;
@property(retain, nonatomic) SAKWebViewControllerProgressProxy *progressProxy; // @synthesize progressProxy=_progressProxy;
@property(retain, nonatomic) UIActivityIndicatorView *activityView; // @synthesize activityView=_activityView;
@property(retain, nonatomic) NSString *javascriptBridgeGoBackHandlerName; // @synthesize javascriptBridgeGoBackHandlerName=_javascriptBridgeGoBackHandlerName;
@property(retain, nonatomic) UIButton *lrButton; // @synthesize lrButton=_lrButton;
@property(retain, nonatomic) UIButton *llButton; // @synthesize llButton=_llButton;
@property(retain, nonatomic) UIImage *backButtonImageForStateHighlighted; // @synthesize backButtonImageForStateHighlighted=_backButtonImageForStateHighlighted;
@property(retain, nonatomic) UIImage *backButtonImageForStateNormal; // @synthesize backButtonImageForStateNormal=_backButtonImageForStateNormal;
@property(retain, nonatomic) UIColor *leftButtonHighlightedTextColor; // @synthesize leftButtonHighlightedTextColor=_leftButtonHighlightedTextColor;
@property(retain, nonatomic) UIColor *leftButtonNormalTextColor; // @synthesize leftButtonNormalTextColor=_leftButtonNormalTextColor;
@property(copy, nonatomic) CDUnknownBlockType exitBlock; // @synthesize exitBlock=_exitBlock;
@property(nonatomic) _Bool errorClewViewHidden; // @synthesize errorClewViewHidden=_errorClewViewHidden;
@property(nonatomic) _Bool progressHidden; // @synthesize progressHidden=_progressHidden;
@property(nonatomic) _Bool activityViewHidden; // @synthesize activityViewHidden=_activityViewHidden;
@property(nonatomic) _Bool enableMTNBBridge; // @synthesize enableMTNBBridge=_enableMTNBBridge;
@property(nonatomic) _Bool enableWebViewJavascriptBridge; // @synthesize enableWebViewJavascriptBridge=_enableWebViewJavascriptBridge;
@property(nonatomic) _Bool shouldHaveLeftBarButtonItem; // @synthesize shouldHaveLeftBarButtonItem=_shouldHaveLeftBarButtonItem;
@property(nonatomic) _Bool shouldPortalFromSelf; // @synthesize shouldPortalFromSelf=_shouldPortalFromSelf;
@property(nonatomic) _Bool showBackAndCloseButtonItem; // @synthesize showBackAndCloseButtonItem=_showBackAndCloseButtonItem;
@property(nonatomic) _Bool showTitleFromWebContent; // @synthesize showTitleFromWebContent=_showTitleFromWebContent;
@property(retain, nonatomic) SAKWebViewControllerJavascriptBridgeHelper *webViewControllerJavascriptBridgeHelper; // @synthesize webViewControllerJavascriptBridgeHelper=_webViewControllerJavascriptBridgeHelper;
@property(nonatomic) __weak id <SAKWebViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSDictionary *iMeituanContent; // @synthesize iMeituanContent=_iMeituanContent;
@property(retain, nonatomic) NSURL *URL; // @synthesize URL=_URL;
@property(copy, nonatomic) NSString *HTTPMethod; // @synthesize HTTPMethod=_HTTPMethod;
@property(nonatomic) double webViewContentHeight; // @synthesize webViewContentHeight=_webViewContentHeight;
@property(nonatomic) double webViewContentWidth; // @synthesize webViewContentWidth=_webViewContentWidth;
@property(retain, nonatomic) UIView<SAKWebViewProtocol> *webView; // @synthesize webView=_webView;
- (void).cxx_destruct;
- (void)clearWebsiteData;
- (void)fetchAndClearWebsiteData;
- (void)fetchWebsiteData;
- (id)pageDescription;
- (void)stopActivity;
- (_Bool)isPermissiveHostURL:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)backAction;
- (void)loadWebView;
- (void)setH5WebGLFeatureEnable:(_Bool)arg1;
- (void)webViewWebProcessDidCrash;
- (void)_webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)recordWebViewContentSize;
- (void)_webViewDidFinishLoad:(id)arg1;
- (void)_webViewDidStartLoad:(id)arg1;
- (void)updateLeftCustomViewArea;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)webViewDidFinishLoad:(id)arg1;
- (void)webViewDidStartLoad:(id)arg1;
- (_Bool)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(long long)arg3;
- (void)_loadRequest:(id)arg1;
- (_Bool)handleURLRequest:(id)arg1;
- (void)webViewGoBackAction;
- (void)didClickLeftBarButtonItem;
- (void)resumeNativeInitStatus;
- (void)recordNativeInitStatus;
- (void)didSetupUI;
- (void)setupUI;
- (void)viewDidLoad;
- (id)defaultBackgroundColor;
- (void)resumeLeftBarButtonItems;
- (void)layoutLeftBarButtonItems;
- (void)setupLeftCustomView;
- (id)pageParameter;
- (void)dealloc;
- (void)_setupWKConfiguration;
- (id)initWithURL:(id)arg1 needUseWKWebView:(_Bool)arg2 forced:(_Bool)arg3;
- (id)initWithURL:(id)arg1 needUseWKWebView:(_Bool)arg2;
- (id)initWithURL:(id)arg1;
- (void)setWithURL:(id)arg1;
- (id)init;
@property(readonly, nonatomic) SAKWebViewPullToRefershProxy *refreshProxy; // @dynamic refreshProxy;
- (void)userContentController:(id)arg1 didReceiveScriptMessage:(id)arg2;
- (void)webView:(id)arg1 runJavaScriptTextInputPanelWithPrompt:(id)arg2 defaultText:(id)arg3 initiatedByFrame:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)webView:(id)arg1 runJavaScriptConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)webView:(id)arg1 runJavaScriptAlertPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)webViewDidClose:(id)arg1;
- (id)webView:(id)arg1 createWebViewWithConfiguration:(id)arg2 forNavigationAction:(id)arg3 windowFeatures:(id)arg4;
- (void)webViewWebContentProcessDidTerminate:(id)arg1;
- (void)webView:(id)arg1 didFailNavigation:(id)arg2 withError:(id)arg3;
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;
- (void)webView:(id)arg1 didStartProvisionalNavigation:(id)arg2;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 decisionHandler:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

