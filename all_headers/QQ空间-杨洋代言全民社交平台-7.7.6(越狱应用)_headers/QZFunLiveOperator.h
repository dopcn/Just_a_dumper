//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "MCDataOutputDelegate-Protocol.h"
#import "MCFaceDetectFilterDelegate-Protocol.h"
#import "MCFilterDelegate-Protocol.h"
#import "MCKeyFilterManagerDelegate-Protocol.h"

@class GPUImageCropFilter, GPUImageOutput, MCDataOutput, MCKeyFilterManager, MCOrientationFilter, MCSampleBuffer, MyCamGPUFilter, NSDictionary, NSString, UIImageOrientationFilter;
@protocol GPUImageInput, QZFunLiveOperatorDelegate;

@interface QZFunLiveOperator : NSObject <MCDataOutputDelegate, MCFaceDetectFilterDelegate, MCFilterDelegate, MCKeyFilterManagerDelegate>
{
    struct opaqueCMSampleBuffer *_currentSampleBuffer;
    struct _opaque_pthread_mutex_t _mutex;
    _Bool _needOutputRotateLeft;
    _Bool _needMirrorFlip;
    _Bool _isInactive;
    _Bool _liveVideoOpened;
    _Bool _outputResetting;
    _Bool _hasSetupFilter;
    id <QZFunLiveOperatorDelegate> _delegate;
    NSDictionary *_effectParam;
    long long _curFilterID;
    NSDictionary *_curFilterParam;
    double _faceDetectShortBorder;
    NSString *_detectorPath;
    NSString *_ufaPath;
    NSString *_poseestPath;
    NSString *_RPSegmenterPath;
    MCOrientationFilter *_rotationOutputFilter;
    MCDataOutput *_dataOutput;
    MCSampleBuffer *_mcSample;
    UIImageOrientationFilter *_rotationInputFilter;
    GPUImageCropFilter *_cropFilter;
    MyCamGPUFilter *_effectFilter;
    MCKeyFilterManager *_keyFilterManager;
    GPUImageOutput<GPUImageInput> *_lastFilter;
    double _usedMemory;
    struct CGSize _renderSize;
    struct CGSize _videoSize;
    struct CGSize _lastRenderSize;
}

+ (id)effectVideoMotionRootPath;
+ (id)pituSDKVersion;
+ (id)shareInstance;
@property(nonatomic) double usedMemory; // @synthesize usedMemory=_usedMemory;
@property(nonatomic) __weak GPUImageOutput<GPUImageInput> *lastFilter; // @synthesize lastFilter=_lastFilter;
@property(retain, nonatomic) MCKeyFilterManager *keyFilterManager; // @synthesize keyFilterManager=_keyFilterManager;
@property(retain, nonatomic) MyCamGPUFilter *effectFilter; // @synthesize effectFilter=_effectFilter;
@property(retain, nonatomic) GPUImageCropFilter *cropFilter; // @synthesize cropFilter=_cropFilter;
@property(retain, nonatomic) UIImageOrientationFilter *rotationInputFilter; // @synthesize rotationInputFilter=_rotationInputFilter;
@property(retain) MCSampleBuffer *mcSample; // @synthesize mcSample=_mcSample;
@property(retain, nonatomic) MCDataOutput *dataOutput; // @synthesize dataOutput=_dataOutput;
@property(retain, nonatomic) MCOrientationFilter *rotationOutputFilter; // @synthesize rotationOutputFilter=_rotationOutputFilter;
@property(retain, nonatomic) NSString *RPSegmenterPath; // @synthesize RPSegmenterPath=_RPSegmenterPath;
@property(retain, nonatomic) NSString *poseestPath; // @synthesize poseestPath=_poseestPath;
@property(retain, nonatomic) NSString *ufaPath; // @synthesize ufaPath=_ufaPath;
@property(retain, nonatomic) NSString *detectorPath; // @synthesize detectorPath=_detectorPath;
@property(nonatomic) double faceDetectShortBorder; // @synthesize faceDetectShortBorder=_faceDetectShortBorder;
@property(retain, nonatomic) NSDictionary *curFilterParam; // @synthesize curFilterParam=_curFilterParam;
@property(nonatomic) long long curFilterID; // @synthesize curFilterID=_curFilterID;
@property(retain, nonatomic) NSDictionary *effectParam; // @synthesize effectParam=_effectParam;
@property(nonatomic) struct CGSize lastRenderSize; // @synthesize lastRenderSize=_lastRenderSize;
@property(nonatomic) struct CGSize videoSize; // @synthesize videoSize=_videoSize;
@property(nonatomic) struct CGSize renderSize; // @synthesize renderSize=_renderSize;
@property(nonatomic) _Bool hasSetupFilter; // @synthesize hasSetupFilter=_hasSetupFilter;
@property(nonatomic) _Bool outputResetting; // @synthesize outputResetting=_outputResetting;
@property(nonatomic) _Bool liveVideoOpened; // @synthesize liveVideoOpened=_liveVideoOpened;
@property _Bool isInactive; // @synthesize isInactive=_isInactive;
@property(nonatomic) _Bool needMirrorFlip; // @synthesize needMirrorFlip=_needMirrorFlip;
@property(nonatomic) _Bool needOutputRotateLeft; // @synthesize needOutputRotateLeft=_needOutputRotateLeft;
@property(nonatomic) __weak id <QZFunLiveOperatorDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)MCKeyFilterManager:(id)arg1 faceFeatureUpdated:(id)arg2;
- (void)MCKeyFilterManagerUpdateFilterChainInQueue:(id)arg1;
- (void)MCFilterNeedHideTips:(id)arg1;
- (void)MCFilterNeedShowTips:(id)arg1 text:(id)arg2 withDuration:(double)arg3;
- (void)MCDataOutputProcessedSampleBuffer:(id)arg1;
- (id)imageWithSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (id)getDisplayImage;
- (double)increasedMemory;
- (void)storeMemUsageBeforeMotion;
- (_Bool)hasStoredMemoryOfBeginning;
- (double)getFps;
- (_Bool)isValidFilterConfig:(id)arg1;
- (long long)validBeautyLevel:(long long)arg1;
- (_Bool)beautyEnabled;
- (long long)beautyLevel;
- (void)releaseFaceTipsView;
- (void)setupEffectFilter:(long long)arg1 withParam:(id)arg2;
- (void)rebuildFilterChain:(id)arg1;
- (struct CGSize)ensureCropFilter:(struct CGSize)arg1;
- (void)resetFilters;
- (void)updateVideoSize:(struct CGSize)arg1;
- (void)setupPitu;
- (_Bool)hasPituFilter;
- (id)defaultEffectParam;
- (void)resetPituOutput;
- (void)renewOutputData;
- (void)resetPituOutputFinished;
- (void)disconnectPituOuput;
- (void)setAnimEffectConfig:(id)arg1;
- (void)setFilterConfig:(id)arg1;
- (void)setBeautyEnabled:(_Bool)arg1;
- (void)setBeautyLevel:(long long)arg1;
- (struct opaqueCMSampleBuffer *)onCameraSamplePreProcess:(struct opaqueCMSampleBuffer *)arg1;
- (void)flushLiveVideo;
- (void)closeLiveVideo;
- (void)openLiveVideo;
- (void)didBecomeActive:(id)arg1;
- (void)willResignActive:(id)arg1;
- (id)getPituFilters;
- (void)handleAVAudioSessionNotification:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

