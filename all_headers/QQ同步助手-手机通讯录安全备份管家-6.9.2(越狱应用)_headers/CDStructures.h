//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Accessbility {
    int _field1;
    struct vector<MSensorInsight::ClickableButton, std::__1::allocator<MSensorInsight::ClickableButton>> _field2;
};

struct AppInfo {
    basic_string_075b6133 _field1;
    basic_string_075b6133 _field2;
    basic_string_075b6133 _field3;
    basic_string_075b6133 _field4;
    basic_string_075b6133 _field5;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field6;
};

struct AppSession {
    basic_string_075b6133 _field1;
    struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> _field2;
};

struct Attachment {
    char _field1;
    basic_string_075b6133 _field2;
    vector_a7fb0c12 _field3;
};

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CSGroupRecord {
    long long _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct vector<MSensorInsight::ScenesUnit, std::__1::allocator<MSensorInsight::ScenesUnit>> _field3;
    int _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    int _field6;
    int _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field12;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field13;
    int _field14;
    int _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    int _field17;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field18;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field19;
    int _field20;
    struct ClientInfo _field21;
    struct EmulatorInfo _field22;
    struct Accessbility _field23;
    int _field24;
};

struct CSRSA {
    vector_a7fb0c12 _field1;
};

struct ClickableButton;

struct ClientInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
};

struct ClientPush {
    long long _field1;
};

struct ClientSashimi {
    int _field1;
    int _field2;
    int _field3;
    vector_a7fb0c12 _field4;
    long long _field5;
    int _field6;
    int _field7;
    struct ClientPush _field8;
    int _field9;
};

struct EmulatorInfo {
    int _field1;
    long long _field2;
    long long _field3;
};

struct ExceptionUpload {
    basic_string_075b6133 _field1;
    long long _field2;
    basic_string_075b6133 _field3;
    basic_string_075b6133 _field4;
    basic_string_075b6133 _field5;
    basic_string_075b6133 _field6;
    basic_string_075b6133 _field7;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field8;
    basic_string_075b6133 _field9;
    struct AppSession _field10;
    int _field11;
    basic_string_075b6133 _field12;
    basic_string_075b6133 _field13;
    struct AppInfo _field14;
    struct vector<rqd::AppInfo, std::allocator<rqd::AppInfo>> _field15;
    struct vector<rqd::AppInfo, std::allocator<rqd::AppInfo>> _field16;
    struct vector<rqd::Attachment, std::allocator<rqd::Attachment>> _field17;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field18;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field19;
};

struct ExceptionUploadPackage {
    struct vector<rqd::ExceptionUpload, std::allocator<rqd::ExceptionUpload>> _field1;
};

struct GpsItem;

struct IosUserInfo {
    int guidVersion;
    int phoneType;
    int subPlatform;
    int product;
    basic_string_075b6133 uuid;
    basic_string_075b6133 identifierForVendor;
    basic_string_075b6133 advertisingIdentifier;
    basic_string_075b6133 mac;
    struct ProductVersion version;
    basic_string_075b6133 deviceModel;
    basic_string_075b6133 firmware;
    short breakFlag;
    basic_string_075b6133 channel;
    basic_string_075b6133 lc;
    basic_string_075b6133 token;
    basic_string_075b6133 udid;
};

struct JceInputStream<analyticstaf::BufferReader> {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct JceOutputStream<analyticstaf::BufferWriter> {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct LOT_Subpath {
    int _field1;
    double _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    struct CGPoint _field5;
    struct LOT_Subpath *_field6;
};

struct Mat {
    int flags;
    int dims;
    int rows;
    int cols;
    char *data;
    char *datastart;
    char *dataend;
    char *datalimit;
    struct MatAllocator *allocator;
    struct UMatData *u;
    struct MatSize size;
    struct MatStep step;
};

struct MatAllocator;

struct MatSize {
    int *p;
};

struct MatStep {
    unsigned long long *p;
    unsigned long long buf[2];
};

struct MixPkg {
    struct map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>>> _field1;
};

struct NSDictionary {
    Class _field1;
};

struct NSMutableArray {
    Class _field1;
};

struct Node;

struct ProductVersion {
    int pversion;
    int cversion;
    int hotfix;
};

struct Ptr<cv::ximgproc::StructuredEdgeDetection> {
    struct PtrOwner *owner;
    struct StructuredEdgeDetection *stored;
};

struct PtrOwner;

struct QQPimOCRProFrameDifferencer {
    int thres;
    struct vector<cv::Mat, std::__1::allocator<cv::Mat>> frameVector;
    struct Mat lastDiffMat;
};

struct QQPimOCRProRetangleDetector {
    struct Ptr<cv::ximgproc::StructuredEdgeDetection> PEdgeDetection;
};

struct RequestPkg {
    int _field1;
    basic_string_075b6133 _field2;
    basic_string_075b6133 _field3;
    basic_string_075b6133 _field4;
    basic_string_075b6133 _field5;
    basic_string_075b6133 _field6;
    int _field7;
    vector_a7fb0c12 _field8;
    basic_string_075b6133 _field9;
    basic_string_075b6133 _field10;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field11;
    basic_string_075b6133 _field12;
};

struct ResponsePkg {
    char _field1;
    int _field2;
    vector_a7fb0c12 _field3;
    basic_string_075b6133 _field4;
    long long _field5;
};

struct SCRSA {
    basic_string_075b6133 _field1;
};

struct ScenesUnit {
    long long _field1;
    struct vector<MSensorInsight::StateUnit, std::__1::allocator<MSensorInsight::StateUnit>> _field2;
    int _field3;
    int _field4;
    double _field5;
    double _field6;
};

struct SensorEventSnapshot {
    long long _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct ServerPush {
    long long _field1;
};

struct ServerSashimi {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    vector_a7fb0c12 _field6;
    struct ServerPush _field7;
    int _field8;
};

struct StateUnit {
    long long _field1;
    struct map<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>>> _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
};

struct StructuredEdgeDetection;

struct SummaryInfo {
    long long _field1;
    char _field2;
    basic_string_075b6133 _field3;
    basic_string_075b6133 _field4;
    basic_string_075b6133 _field5;
};

struct SyncObserver {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct TccDeque<TccSyncmlAction *, TccPtrTraits<TccSyncmlAction *>> {
    struct Node *_field1;
    struct Node *_field2;
    int _field3;
};

struct TccList<TccTelNumLocation::CLocCacheItem *, TccTraits<TccTelNumLocation::CLocCacheItem *>> {
    struct Node *_field1;
    struct Node *_field2;
    int _field3;
};

struct TccRemoteSync {
    struct TccSyncmlInfo _field1;
    struct TccSyncmlDbCtrl *_field2[10];
    int _field3;
    struct TccSyncObject _field4;
    int _field5;
    struct TccSyncmlParser _field6;
    struct TccSyncmlEncode _field7;
    struct TccStr8 _field8;
    struct TccSyncmlStanza _field9;
    int _field10;
    int _field11;
    int _field12;
    _Bool _field13;
    struct TccRemoteSyncOberser *_field14;
    unsigned int _field15;
    int _field16;
    struct TccVector<TccSyncmlAction *, TccSyncmlAction> _field17;
    struct TccVector<TccSyncmlAction *, TccSyncmlAction> _field18;
    struct TccVector<TccSyncmlAction *, TccSyncmlAction> _field19;
    struct TccVector<int, TccTraits<int>> _field20;
    struct TccVector<unsigned int, TccTraits<unsigned int>> _field21;
    struct TccVector<TccStr8, TccTraits<TccStr8>> _field22;
};

struct TccRemoteSyncOberser;

struct TccStr16 {
    unsigned int _field1;
    unsigned int _field2;
    int *_field3;
};

struct TccStr8 {
    unsigned int _field1;
    unsigned int _field2;
    char *_field3;
};

struct TccSyncDbAdapter {
    CDUnknownFunctionPointerType *_field1;
};

struct TccSyncObject {
    struct TccStr8 _field1;
    struct TccStr8 _field2;
    struct TccStr8 _field3;
    struct TccStr8 _field4;
    int _field5;
    int _field6;
    int _field7;
    unsigned int _field8;
};

struct TccSyncmlAction;

struct TccSyncmlDbCtrl;

struct TccSyncmlEncode {
    unsigned int _field1;
    unsigned int _field2;
    char *_field3;
};

struct TccSyncmlInfo {
    struct TccStr8 _field1;
    struct TccStr8 _field2;
    struct TccStr8 _field3;
    struct TccStr8 _field4;
    struct TccStr8 _field5;
    struct TccStr8 _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
};

struct TccSyncmlParser {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    int _field3;
    int _field4;
    unsigned char _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct TccWxStr _field9;
    struct TccWxTag _field10[12];
    short _field11;
    unsigned char _field12;
    int _field13;
    int _field14;
    int _field15[12];
    struct TccSyncmlStanza _field16;
    struct TccSyncmlAction *_field17;
};

struct TccSyncmlStanza {
    unsigned int _field1;
    struct TccWxStr _field2;
    struct TccWxStr _field3;
    struct TccWxStr _field4;
    struct TccWxStr _field5;
    struct TccWxStr _field6;
    struct TccWxStr _field7;
    struct TccWxStr _field8;
    struct TccWxStr _field9;
    struct TccWxStr _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    unsigned int _field16;
    unsigned int _field17;
    struct TccDeque<TccSyncmlAction *, TccPtrTraits<TccSyncmlAction *>> _field18;
};

struct TccTelNumLocation {
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field1;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field2;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field3;
    struct TccStr8 _field4;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field5;
    struct TccStr8 _field6;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field7;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field8;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field9;
    struct TccStr8 _field10;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field11;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field12;
    struct TccStr8 _field13;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field14;
    struct TccVector<unsigned short, TccTraits<unsigned short>> _field15;
    int _field16;
    int _field17;
    struct TccStr16 _field18;
    struct TccVector<GpsItem, TccTraits<GpsItem>> _field19;
    int _field20;
    struct TccYellowPageTels _field21;
    struct TccList<TccTelNumLocation::CLocCacheItem *, TccTraits<TccTelNumLocation::CLocCacheItem *>> _field22;
    char _field23;
};

struct TccVector<GpsItem, TccTraits<GpsItem>> {
    struct GpsItem *_field1;
    int _field2;
    int _field3;
};

struct TccVector<TccStr8, TccTraits<TccStr8>> {
    struct TccStr8 *_field1;
    int _field2;
    int _field3;
};

struct TccVector<TccSyncmlAction *, TccSyncmlAction> {
    struct TccSyncmlAction **_field1;
    int _field2;
    int _field3;
};

struct TccVector<TccYellowPageTels::YellowGroup, TccTraits<TccYellowPageTels::YellowGroup>> {
    struct YellowGroup *_field1;
    int _field2;
    int _field3;
};

struct TccVector<int, TccTraits<int>> {
    int *_field1;
    int _field2;
    int _field3;
};

struct TccVector<unsigned int, TccTraits<unsigned int>> {
    unsigned int *_field1;
    int _field2;
    int _field3;
};

struct TccVector<unsigned short, TccTraits<unsigned short>> {
    unsigned short *_field1;
    int _field2;
    int _field3;
};

struct TccWxStr {
    char *_field1;
    int _field2;
};

struct TccWxTag {
    unsigned short _field1;
    struct TccWxStr _field2;
};

struct TccYellowPageTels {
    struct TccVector<TccYellowPageTels::YellowGroup, TccTraits<TccYellowPageTels::YellowGroup>> _field1;
    struct TccStr16 _field2;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UMatData;

struct UserInfoPackage {
    char _field1;
    basic_string_075b6133 _field2;
    basic_string_075b6133 _field3;
    struct vector<rqd::SummaryInfo, std::allocator<rqd::SummaryInfo>> _field4;
    struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field5;
};

struct YellowGroup;

struct _Alloc_hider {
    char *_M_p;
};

struct _DDRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _IplImage {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    char _field6[4];
    char _field7[4];
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    struct _IplROI *_field13;
    struct _IplImage *_field14;
    void *_field15;
    struct _IplTileInfo *_field16;
    int _field17;
    char *_field18;
    int _field19;
    int _field20[4];
    int _field21[4];
    char *_field22;
};

struct _IplROI;

struct _IplTileInfo;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _QQPimEngineVIPServiceInfo {
    long long _field1;
    _Bool _field2;
    long long _field3;
    long long _field4;
};

struct _Rb_tree<int, std::pair<const int, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const int, std::vector<char, std::allocator<char>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>>> {
    struct _Rb_tree_impl<std::less<int>, false> _field1;
};

struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::basic_string<char>>, std::_Select1st<std::pair<const std::basic_string<char>, std::basic_string<char>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> {
    struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> _field1;
};

struct _Rb_tree_impl<std::less<int>, false> {
    struct less<int> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned long long _field3;
};

struct _Rb_tree_impl<std::less<std::basic_string<char>>, false> {
    struct less<std::basic_string<char>> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned long long _field3;
};

struct _Rb_tree_node_base {
    int _field1;
    struct _Rb_tree_node_base *_field2;
    struct _Rb_tree_node_base *_field3;
    struct _Rb_tree_node_base *_field4;
};

struct ___PEMD5Number {
    unsigned long long high;
    unsigned long long low;
    unsigned char valid;
};

struct ___PEMapItem {
    int clientid;
    int serverid;
    int checksum;
    int lasttime;
    struct ___PEMD5Number md5;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct _Alloc_hider _M_dataplus;
};

struct bignum_st;

struct bn_blinding_st;

struct bn_mont_ctx_st;

struct crypto_ex_data_st {
    struct stack_st_void *_field1;
    int _field2;
};

struct engine_st;

struct in6_addr {
    union {
        unsigned char _field1[16];
        unsigned short _field2[8];
        unsigned int _field3[4];
    } _field1;
};

struct in_addr {
    unsigned int _field1;
};

struct internal_state;

struct less<int>;

struct less<std::basic_string<char>>;

struct map<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>>> {
    struct __tree<std::__1::__value_type<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<MSensorInsight::SensorEventSnapshot, std::__1::allocator<MSensorInsight::SensorEventSnapshot>>>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, std::vector<char, std::allocator<char>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>>> {
    struct _Rb_tree<int, std::pair<const int, std::vector<char, std::allocator<char>>>, std::_Select1st<std::pair<const int, std::vector<char, std::allocator<char>>>>, std::less<int>, std::allocator<std::pair<const int, std::vector<char, std::allocator<char>>>>> _field1;
};

struct map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> {
    struct _Rb_tree<std::basic_string<char>, std::pair<const std::basic_string<char>, std::basic_string<char>>, std::_Select1st<std::pair<const std::basic_string<char>, std::basic_string<char>>>, std::less<std::basic_string<char>>, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char>>>> _field1;
};

struct rsa_meth_st;

struct rsa_st {
    int _field1;
    long long _field2;
    struct rsa_meth_st *_field3;
    struct engine_st *_field4;
    struct bignum_st *_field5;
    struct bignum_st *_field6;
    struct bignum_st *_field7;
    struct bignum_st *_field8;
    struct bignum_st *_field9;
    struct bignum_st *_field10;
    struct bignum_st *_field11;
    struct bignum_st *_field12;
    struct crypto_ex_data_st _field13;
    int _field14;
    int _field15;
    struct bn_mont_ctx_st *_field16;
    struct bn_mont_ctx_st *_field17;
    struct bn_mont_ctx_st *_field18;
    char *_field19;
    struct bn_blinding_st *_field20;
    struct bn_blinding_st *_field21;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_dl {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
    char _field8[12];
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct sockaddr_in6 {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned int _field4;
    struct in6_addr _field5;
    unsigned int _field6;
};

struct sockaddr_un {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[104];
};

struct stack_st_void;

struct timeval {
    long long tv_sec;
    int tv_usec;
};

struct vector<MSensorInsight::ClickableButton, std::__1::allocator<MSensorInsight::ClickableButton>> {
    struct ClickableButton *_field1;
    struct ClickableButton *_field2;
    struct __compressed_pair<MSensorInsight::ClickableButton *, std::__1::allocator<MSensorInsight::ClickableButton>> {
        struct ClickableButton *_field1;
    } _field3;
};

struct vector<MSensorInsight::ScenesUnit, std::__1::allocator<MSensorInsight::ScenesUnit>> {
    struct ScenesUnit *_field1;
    struct ScenesUnit *_field2;
    struct __compressed_pair<MSensorInsight::ScenesUnit *, std::__1::allocator<MSensorInsight::ScenesUnit>> {
        struct ScenesUnit *_field1;
    } _field3;
};

struct vector<MSensorInsight::StateUnit, std::__1::allocator<MSensorInsight::StateUnit>> {
    struct StateUnit *_field1;
    struct StateUnit *_field2;
    struct __compressed_pair<MSensorInsight::StateUnit *, std::__1::allocator<MSensorInsight::StateUnit>> {
        struct StateUnit *_field1;
    } _field3;
};

struct vector<char, std::allocator<char>> {
    struct _Vector_impl {
        char *_field1;
        char *_field2;
        char *_field3;
    } _field1;
};

struct vector<cv::Mat, std::__1::allocator<cv::Mat>> {
    struct Mat *__begin_;
    struct Mat *__end_;
    struct __compressed_pair<cv::Mat *, std::__1::allocator<cv::Mat>> {
        struct Mat *__first_;
    } __end_cap_;
};

struct vector<rqd::AppInfo, std::allocator<rqd::AppInfo>> {
    struct _Vector_impl {
        struct AppInfo *_field1;
        struct AppInfo *_field2;
        struct AppInfo *_field3;
    } _field1;
};

struct vector<rqd::Attachment, std::allocator<rqd::Attachment>> {
    struct _Vector_impl {
        struct Attachment *_field1;
        struct Attachment *_field2;
        struct Attachment *_field3;
    } _field1;
};

struct vector<rqd::ExceptionUpload, std::allocator<rqd::ExceptionUpload>> {
    struct _Vector_impl {
        struct ExceptionUpload *_field1;
        struct ExceptionUpload *_field2;
        struct ExceptionUpload *_field3;
    } _field1;
};

struct vector<rqd::SummaryInfo, std::allocator<rqd::SummaryInfo>> {
    struct _Vector_impl {
        struct SummaryInfo *_field1;
        struct SummaryInfo *_field2;
        struct SummaryInfo *_field3;
    } _field1;
};

struct vector<std::basic_string<char>, std::allocator<std::basic_string<char>>> {
    struct _Vector_impl {
        basic_string_075b6133 *_field1;
        basic_string_075b6133 *_field2;
        basic_string_075b6133 *_field3;
    } _field1;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    struct _Vector_impl {
        unsigned long long *_M_start;
        unsigned long long *_M_finish;
        unsigned long long *_M_end_of_storage;
    } _M_impl;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned short wCmd;
    unsigned short wSubCmd;
    short wRst;
    unsigned int dwUsed;
    unsigned int dwCalUsed;
    unsigned short wTry;
    unsigned char acHostName[32];
    unsigned char acHostIp[32];
    unsigned short wPort;
    unsigned char cConn;
    unsigned char cNetType;
    unsigned char cNetwork;
    unsigned char cEncryptType;
    unsigned char acErrorStr[64];
    unsigned short wSendDataLen;
    unsigned short wResvDataLen;
} CDStruct_7a5a57b9;

typedef struct {
    char acHostName[32];
    unsigned short wPort;
    unsigned short wTimeout;
} CDStruct_93d23b61;

typedef struct {
    long long version;
    void *info;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
} CDStruct_4210025a;

typedef struct {
    long long _field1;
    int _field2;
} CDStruct_87dc826d;

typedef struct {
    long long location;
    long long length;
} CDStruct_627e0f85;

// Template types
typedef struct JceInputStream<analyticstaf::BufferReader> {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
} JceInputStream_f07640a9;

typedef struct JceOutputStream<analyticstaf::BufferWriter> {
    char *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
} JceOutputStream_31132a5e;

typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct _Alloc_hider _M_dataplus;
} basic_string_075b6133;

typedef struct vector<char, std::allocator<char>> {
    struct _Vector_impl {
        char *_field1;
        char *_field2;
        char *_field3;
    } _field1;
} vector_a7fb0c12;

