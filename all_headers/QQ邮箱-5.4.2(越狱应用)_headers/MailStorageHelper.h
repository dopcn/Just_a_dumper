//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class FMDatabase, FMDatabaseQueue, NSMutableDictionary, NSRecursiveLock;

@interface MailStorageHelper : NSObject
{
    FMDatabase *usingdb;
    FMDatabaseQueue *bindingQueue;
    NSRecursiveLock *threadLock;
    NSMutableDictionary *cacheDict;
    NSMutableDictionary *ormDict;
    NSMutableDictionary *seqDict;
    NSMutableDictionary *typeDict;
    NSMutableDictionary *propertyDict;
    NSMutableDictionary *fastCache;
}

+ (id)shareInstance:(id)arg1;
+ (void)createIndex:(id)arg1 withModel:(Class)arg2;
+ (id)fromStorageByte:(id)arg1;
+ (id)toStorageByte:(id)arg1;
+ (id)parse:(Class)arg1 WithDictionary:(id)arg2;
+ (_Bool)isColoumExistInTable:(Class)arg1 withColomn:(id)arg2;
+ (id)executeSQL:(Class)arg1 sql:(id)arg2;
+ (void)closeAllConnection;
+ (id)searchWithFastCache:(Class)arg1 keys:(id)arg2 values:(id)arg3;
+ (void)fastCache:(Class)arg1 keys:(id)arg2;
+ (id)dbPath:(Class)arg1;
+ (void)reopen:(Class)arg1;
+ (void)rebuildDb:(Class)arg1;
+ (void)clearDb:(Class)arg1;
+ (void)clearCache:(Class)arg1;
+ (void)searchUnion:(Class)arg1 withAnotherModel:(Class)arg2 columns:(id)arg3 mappings:(id)arg4 wheremappings:(id)arg5 callback:(CDUnknownBlockType)arg6;
+ (void)syncSearchDb:(Class)arg1 wheres:(id)arg2 orderBy:(id)arg3 offset:(int)arg4 limit:(int)arg5 callback:(CDUnknownBlockType)arg6;
+ (void)syncSearchDb:(Class)arg1 where:(id)arg2 orderBy:(id)arg3 offset:(int)arg4 limit:(int)arg5 callback:(CDUnknownBlockType)arg6;
+ (void)searchDb:(Class)arg1 wheres:(id)arg2 orderBy:(id)arg3 offset:(int)arg4 limit:(int)arg5 callback:(CDUnknownBlockType)arg6;
+ (void)searchDb:(Class)arg1 where:(id)arg2 orderBy:(id)arg3 offset:(int)arg4 limit:(int)arg5 callback:(CDUnknownBlockType)arg6;
+ (void)searchCacheWithPrimaryKey:(Class)arg1 wheres:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)searchCacheWithPrimaryKey:(Class)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)searchCache:(Class)arg1 wheres:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)searchCache:(Class)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)searchWithPrimaryKey:(Class)arg1 wheres:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)searchWithPrimaryKey:(Class)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)search:(Class)arg1 wheres:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)search:(Class)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
+ (void)search:(Class)arg1 callback:(CDUnknownBlockType)arg2;
+ (void)dellist:(id)arg1 withModel:(Class)arg2 withCallback:(id)arg3;
+ (void)del:(Class)arg1 wheres:(id)arg2 withCallback:(id)arg3;
+ (void)del:(Class)arg1 where:(id)arg2 withCallback:(id)arg3;
+ (void)del:(id)arg1 withCallback:(id)arg2;
+ (void)update:(Class)arg1 columns:(id)arg2 wheres:(id)arg3 withCallback:(id)arg4;
+ (void)update:(Class)arg1 columns:(id)arg2 where:(id)arg3 withCallback:(id)arg4;
+ (void)batchsave:(id)arg1 withModel:(Class)arg2 withCallback:(id)arg3;
+ (void)save:(id)arg1 withCallback:(id)arg2;
+ (void)batchcreatetable:(id)arg1;
+ (void)createtable:(Class)arg1;
- (void).cxx_destruct;
- (void)initWithDb:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)didReceiveMemoryWarning;
- (void)rebuildDb:(Class)arg1;
- (void)clearDb:(Class)arg1;
- (void)clearCache:(Class)arg1;
- (id)getOper:(id)arg1;
- (id)doMappings:(Class)arg1 withAnotherModel:(Class)arg2 mappings:(id)arg3;
- (id)doColumns:(Class)arg1 withAnotherModel:(Class)arg2 columns:(id)arg3;
- (void)doReflectWithClass:(Class)arg1 withCacheKey:(id)arg2;
- (void)doReflect:(id)arg1 withCacheKey:(id)arg2;
- (void)doCheckCache:(Class)arg1;
- (id)convertPropertyType:(id)arg1;
- (id)doPropertyType:(id)arg1;
- (void)createIndex:(id)arg1 withModel:(Class)arg2;
- (void)createTableWithModel:(Class)arg1 issync:(_Bool)arg2;
- (void)executeSQL:(id)arg1 arguments:(id)arg2 withCallback:(CDUnknownBlockType)arg3 batch:(_Bool)arg4 issync:(_Bool)arg5;
- (void)doBatchExecuteDB:(CDUnknownBlockType)arg1;
- (void)doExecuteDB:(CDUnknownBlockType)arg1 batch:(_Bool)arg2;
- (void)waitBatchExecuteDB:(CDUnknownBlockType)arg1;
- (void)batchExecuteDB:(CDUnknownBlockType)arg1 issync:(_Bool)arg2;
- (void)waitExecuteDB:(id)arg1;
- (void)executeDB:(CDUnknownBlockType)arg1 batch:(_Bool)arg2 issync:(_Bool)arg3;
- (void)rollbackCacheList:(id)arg1 withCacheKey:(id)arg2 withCallback:(id)arg3;
- (void)rollbackCache:(id)arg1 withCacheKey:(id)arg2 withCallback:(id)arg3;
- (void)cache:(Class)arg1 withValues:(id)arg2;
- (void)cache:(Class)arg1 withValue:(id)arg2 withCacheKey:(id)arg3;
- (void)cachelist:(id)arg1 withCallback:(id)arg2;
- (void)cache:(id)arg1 withCacheKey:(id)arg2 withCallback:(id)arg3;
- (id)dictionaryToSqlWhere:(id)arg1 andValues:(id)arg2 condiction:(id)arg3;
- (id)extractQuery:(id)arg1 where:(id)arg2 condiction:(id)arg3;
- (id)executeResult:(id)arg1 Class:(Class)arg2 AnotherClass:(Class)arg3;
- (id)executeResult:(id)arg1 Class:(Class)arg2;
- (id)getPropertyType:(Class)arg1;
- (void)setPropertyType:(Class)arg1;
- (void)searchUnionDb:(Class)arg1 withAnotherModel:(Class)arg2 columns:(id)arg3 mappings:(id)arg4 wheremappings:(id)arg5 callback:(CDUnknownBlockType)arg6;
- (void)searchBase:(Class)arg1 callback:(CDUnknownBlockType)arg2;
- (_Bool)doSearchOper:(id)arg1 value:(id)arg2;
- (id)doSearchValueForReturn:(id)arg1 withModel:(Class)arg2;
- (void)searchDb:(Class)arg1 wheres:(id)arg2 orderBy:(id)arg3 offset:(int)arg4 limit:(int)arg5 callback:(CDUnknownBlockType)arg6 issync:(_Bool)arg7;
- (void)searchDb:(Class)arg1 where:(id)arg2 orderBy:(id)arg3 offset:(int)arg4 limit:(int)arg5 callback:(CDUnknownBlockType)arg6 issync:(_Bool)arg7;
- (void)searchCacheWithPrimaryKey:(Class)arg1 wheres:(id)arg2 withCallback:(CDUnknownBlockType)arg3 changeFlag:(_Bool)arg4;
- (void)searchCacheWithPrimaryKey:(Class)arg1 where:(id)arg2 withCallback:(CDUnknownBlockType)arg3 changeFlag:(_Bool)arg4;
- (void)searchCache:(Class)arg1 wheres:(id)arg2 withCallback:(CDUnknownBlockType)arg3 changeFlag:(_Bool)arg4;
- (id)doChangeColumn:(id)arg1 withModel:(Class)arg2;
- (id)doChangeWhere:(id)arg1 withModel:(Class)arg2;
- (void)searchCache:(Class)arg1 where:(id)arg2 withCallback:(CDUnknownBlockType)arg3 changeFlag:(_Bool)arg4;
- (id)searchCache:(Class)arg1;
- (void)searchDb:(Class)arg1 withAnotherModel:(Class)arg2 ids:(id)arg3 mappings:(id)arg4 wheremappingarray:(id)arg5 withValues:(id)arg6 withModelValues:(id)arg7 callback:(CDUnknownBlockType)arg8;
- (void)searchDb:(Class)arg1 ids:(id)arg2 columns:(id)arg3 wheremappingarray:(id)arg4 withValues:(id)arg5 callback:(CDUnknownBlockType)arg6;
- (void)search:(Class)arg1 wheres:(id)arg2 withValues:(id)arg3 callback:(CDUnknownBlockType)arg4;
- (void)search:(Class)arg1 where:(id)arg2 withValues:(id)arg3 callback:(CDUnknownBlockType)arg4;
- (void)search:(Class)arg1 withValues:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (int)modelCount:(Class)arg1;
- (void)searchWithOutCache:(Class)arg1 callback:(CDUnknownBlockType)arg2;
- (id)getCacheKey:(id)arg1;
- (void)doCache:(Class)arg1 withValues:(id)arg2;
- (id)setSeqForBatch:(Class)arg1 value:(id)arg2;
- (void)setSeq:(Class)arg1 value:(id)arg2;
- (id)doSeqForBatch:(Class)arg1 value:(id)arg2;
- (void)doSeq:(Class)arg1 value:(id)arg2;
- (id)doSeqWithoutValueForBatch:(Class)arg1;
- (id)doSeqWithoutValue:(Class)arg1;
- (void)doCache:(id)arg1 withCacheType:(int)arg2 withCacheKey:(id)arg3 withCallback:(id)arg4;
- (void)delcache:(Class)arg1 wheres:(id)arg2 withCallback:(id)arg3;
- (void)delcache:(Class)arg1 where:(id)arg2 withCallback:(id)arg3;
- (void)delcachelist:(id)arg1 withCallback:(id)arg2;
- (void)delcache:(id)arg1 withCallback:(id)arg2;
- (void)del:(Class)arg1 wheres:(id)arg2 withCallback:(id)arg3;
- (void)del:(Class)arg1 where:(id)arg2 withCallback:(id)arg3;
- (void)updateDb:(Class)arg1 columns:(id)arg2 wheres:(id)arg3 withCallback:(id)arg4;
- (void)updateDb:(Class)arg1 columns:(id)arg2 where:(id)arg3 withCallback:(id)arg4;
- (void)update:(Class)arg1 columns:(id)arg2 wheres:(id)arg3 withCallback:(id)arg4;
- (void)update:(Class)arg1 columns:(id)arg2 where:(id)arg3 withCallback:(id)arg4;
- (void)delfastcache:(Class)arg1 withValue:(id)arg2;
- (void)delfastcache:(id)arg1;
- (void)doFastCache:(id)arg1 withClass:(Class)arg2;
- (id)searchWithFastCache:(Class)arg1 keys:(id)arg2 values:(id)arg3;
- (id)executeSQL:(Class)arg1 sql:(id)arg2;
- (void)closeConnection;
- (void)fastCache:(Class)arg1 keys:(id)arg2;

@end

