//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSMutableDictionary, NSString, ProxyIpAddresses;

@interface UniteIpAddressesManager : NSObject
{
    _Bool _modified;
    _Bool _isDnsSuccess;
    _Bool _isServerIpRefreshing;
    _Bool _isServerIpCGISuccess;
    NSString *_networkStatusName;
    ProxyIpAddresses *_proxyIpAddresses;
    long long _lastRefreshDNSTime;
    long long _refreshDNSCount;
    long long _refreshServerIpFailedCount;
    long long _backupIpTesting;
    long long _backupIpTestCount;
    long long _isp;
    NSMutableDictionary *_hadAddExpressDnsIPs;
}

@property(retain, nonatomic) NSMutableDictionary *hadAddExpressDnsIPs; // @synthesize hadAddExpressDnsIPs=_hadAddExpressDnsIPs;
@property long long isp; // @synthesize isp=_isp;
@property long long backupIpTestCount; // @synthesize backupIpTestCount=_backupIpTestCount;
@property long long backupIpTesting; // @synthesize backupIpTesting=_backupIpTesting;
@property _Bool isServerIpCGISuccess; // @synthesize isServerIpCGISuccess=_isServerIpCGISuccess;
@property _Bool isServerIpRefreshing; // @synthesize isServerIpRefreshing=_isServerIpRefreshing;
@property long long refreshServerIpFailedCount; // @synthesize refreshServerIpFailedCount=_refreshServerIpFailedCount;
@property _Bool isDnsSuccess; // @synthesize isDnsSuccess=_isDnsSuccess;
@property long long refreshDNSCount; // @synthesize refreshDNSCount=_refreshDNSCount;
@property long long lastRefreshDNSTime; // @synthesize lastRefreshDNSTime=_lastRefreshDNSTime;
@property _Bool modified; // @synthesize modified=_modified;
@property(retain) ProxyIpAddresses *proxyIpAddresses; // @synthesize proxyIpAddresses=_proxyIpAddresses;
@property(retain) NSString *networkStatusName; // @synthesize networkStatusName=_networkStatusName;
- (void).cxx_destruct;
- (void)setIp:(id)arg1 score:(long long)arg2 eIpFrom:(long long)arg3;
- (void)addIpsToScore:(id)arg1 eIpFrom:(long long)arg2;
- (long long)defaultScoreByIpFrom:(long long)arg1;
- (void)addIps:(id)arg1 toDomain:(id)arg2;
- (id)ipListByDomainName:(id)arg1;
- (void)testIpConnection:(id)arg1 eIpFrom:(long long)arg2;
- (_Bool)isIpConnectionOK:(id)arg1;
- (_Bool)isConnectionTestDataMatch:(id)arg1;
- (void)backgroundResolveDNSIp;
- (void)backgroundTestBackupIp;
- (id)parseIpFromServer:(id)arg1 protocolError:(long long *)arg2;
- (void)fetchIpFromServer;
- (void)asyncRefreshIpList:(id)arg1;
- (long long)scoreDeltaByProtocolError:(long long)arg1;
- (id)orderIpInDic:(id)arg1 byScore:(id)arg2;
- (id)orderIpAddress:(id)arg1 byScore:(id)arg2;
- (id)getBestIpAddressFromList:(id)arg1 ipAddress2Score:(id)arg2;
- (void)feedbackIp:(id)arg1 eProtocolError:(long long)arg2;
- (id)getBestIpAddressListWithDnsIP:(id)arg1;
- (void)addExpressIPToListWithDnsIP:(id)arg1;
- (id)cloneProxyIpAddress;
- (void)saveToLocalFile;
- (id)getLocalFilePath:(id)arg1;
- (id)randomShAccIp;
- (id)randomSzAccIp;
- (id)randomAccIp;
- (id)getSameObjInArrays:(id)arg1 andArray:(id)arg2;
- (id)getIpByIsp:(long long)arg1 andArray:(id)arg2;
- (id)randomIpFromArray:(id)arg1;
- (id)defaultIp_isp4;
- (id)defaultIp_isp3;
- (id)defaultIp_isp2;
- (id)defaultIp_isp1;
- (id)defaultShAccIps;
- (id)defaultSzAccIps;
- (id)defaultAccIps;
- (void)removeUnusedScore:(id)arg1;
- (id)setFromArrayFirstAndSecond:(id)arg1;
- (void)clearLastLauchedData:(id)arg1;
- (void)tryToGetLastSaveIPList;
- (id)initWithNetworkStatusName:(id)arg1;

@end

