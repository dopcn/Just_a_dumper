//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MLPublisher.h"

#import "FFRtmpWriterDelegate-Protocol.h"
#import "MLAudioEffectManagerDelegete-Protocol.h"
#import "MLPublisherStatisticAuxiliaryDataProvider-Protocol.h"
#import "MLSimpleMusicDecoderDelegate-Protocol.h"

@class IJKAudioConvert, MLAudioLevel, MLAudioProcess, MLAudioProcessCacher, MLPublisherWarning, MLSabineAudioEffect, MLSimpleMusicDecoder, NSMutableArray, NSMutableData, NSMutableDictionary, NSString, NSTimer;

@interface MLIJKPublisher : MLPublisher <MLPublisherStatisticAuxiliaryDataProvider, MLAudioEffectManagerDelegete, MLSimpleMusicDecoderDelegate, FFRtmpWriterDelegate>
{
    _Bool _isLoopbackAudio;
    _Bool _enableReportAudioVolume;
    _Bool _pushDroppingPacket;
    _Bool _adjustAudioTimestamp;
    _Bool _isWaitFirstConferenceAudio;
    int _pushDropVideoCount;
    int _pushLevelChangeCount;
    int _originalVideoBitrate;
    unsigned long long _sessionTime;
    unsigned long long _totalBytesSendOut;
    MLAudioProcess *_kAudioProcess;
    MLAudioProcess *_kLoopbackAudioProcess;
    MLAudioProcessCacher *_audioProcessCacher;
    MLAudioProcessCacher *_audioLoopbackProcessCacher;
    MLPublisherWarning *_pushWarning;
    unsigned long long _originalLevel;
    MLSimpleMusicDecoder *_smDecoder;
    NSMutableArray *_audioMusicPlaybackSampleBuffer;
    NSMutableArray *_audioMusicSendoutSampleBuffer;
    unsigned long long _maxPcmDataSampleBufSize;
    long long _musicStartTsInMs;
    long long _musicPausedTsInMs;
    unsigned long long _retryAudioRenderTimes;
    long long _writeOutVideoFramesNumber;
    IJKAudioConvert *_audioConvert;
    IJKAudioConvert *_audioSampleBufferConvert;
    NSString *_encryptUserId;
    NSTimer *_reportVolumeTimer;
    NSMutableDictionary *_audioVolumeDict;
    MLAudioLevel *_audioLevel;
    MLSabineAudioEffect *_sabineAudioEffect;
    MLSabineAudioEffect *_sabineLookbackAudioEffect;
    NSMutableData *_loopbackData;
    struct CGSize _originalEncodeSize;
    CDStruct_1b6d18a9 _lastAudioPts;
    CDStruct_1b6d18a9 _lastConferenceAudioPts;
    CDStruct_1b6d18a9 _conferenceAudioDelay;
    CDStruct_1b6d18a9 _firstConferenceAudioPts;
}

@property(nonatomic) CDStruct_1b6d18a9 firstConferenceAudioPts; // @synthesize firstConferenceAudioPts=_firstConferenceAudioPts;
@property(nonatomic) CDStruct_1b6d18a9 conferenceAudioDelay; // @synthesize conferenceAudioDelay=_conferenceAudioDelay;
@property(nonatomic) CDStruct_1b6d18a9 lastConferenceAudioPts; // @synthesize lastConferenceAudioPts=_lastConferenceAudioPts;
@property(nonatomic) _Bool isWaitFirstConferenceAudio; // @synthesize isWaitFirstConferenceAudio=_isWaitFirstConferenceAudio;
@property(retain, nonatomic) NSMutableData *loopbackData; // @synthesize loopbackData=_loopbackData;
@property(retain, nonatomic) MLSabineAudioEffect *sabineLookbackAudioEffect; // @synthesize sabineLookbackAudioEffect=_sabineLookbackAudioEffect;
@property(retain, nonatomic) MLSabineAudioEffect *sabineAudioEffect; // @synthesize sabineAudioEffect=_sabineAudioEffect;
@property(retain, nonatomic) MLAudioLevel *audioLevel; // @synthesize audioLevel=_audioLevel;
@property(retain, nonatomic) NSMutableDictionary *audioVolumeDict; // @synthesize audioVolumeDict=_audioVolumeDict;
@property(retain, nonatomic) NSTimer *reportVolumeTimer; // @synthesize reportVolumeTimer=_reportVolumeTimer;
@property(copy, nonatomic) NSString *encryptUserId; // @synthesize encryptUserId=_encryptUserId;
@property(retain, nonatomic) IJKAudioConvert *audioSampleBufferConvert; // @synthesize audioSampleBufferConvert=_audioSampleBufferConvert;
@property(retain, nonatomic) IJKAudioConvert *audioConvert; // @synthesize audioConvert=_audioConvert;
@property(nonatomic) long long writeOutVideoFramesNumber; // @synthesize writeOutVideoFramesNumber=_writeOutVideoFramesNumber;
@property(nonatomic) unsigned long long retryAudioRenderTimes; // @synthesize retryAudioRenderTimes=_retryAudioRenderTimes;
@property(nonatomic) CDStruct_1b6d18a9 lastAudioPts; // @synthesize lastAudioPts=_lastAudioPts;
@property(nonatomic) _Bool adjustAudioTimestamp; // @synthesize adjustAudioTimestamp=_adjustAudioTimestamp;
@property(nonatomic) long long musicPausedTsInMs; // @synthesize musicPausedTsInMs=_musicPausedTsInMs;
@property(nonatomic) long long musicStartTsInMs; // @synthesize musicStartTsInMs=_musicStartTsInMs;
@property(nonatomic) unsigned long long maxPcmDataSampleBufSize; // @synthesize maxPcmDataSampleBufSize=_maxPcmDataSampleBufSize;
@property(retain, nonatomic) NSMutableArray *audioMusicSendoutSampleBuffer; // @synthesize audioMusicSendoutSampleBuffer=_audioMusicSendoutSampleBuffer;
@property(retain, nonatomic) NSMutableArray *audioMusicPlaybackSampleBuffer; // @synthesize audioMusicPlaybackSampleBuffer=_audioMusicPlaybackSampleBuffer;
@property(retain, nonatomic) MLSimpleMusicDecoder *smDecoder; // @synthesize smDecoder=_smDecoder;
@property(nonatomic) int originalVideoBitrate; // @synthesize originalVideoBitrate=_originalVideoBitrate;
@property(nonatomic) struct CGSize originalEncodeSize; // @synthesize originalEncodeSize=_originalEncodeSize;
@property(nonatomic) unsigned long long originalLevel; // @synthesize originalLevel=_originalLevel;
@property(nonatomic) int pushLevelChangeCount; // @synthesize pushLevelChangeCount=_pushLevelChangeCount;
@property(nonatomic) int pushDropVideoCount; // @synthesize pushDropVideoCount=_pushDropVideoCount;
@property(nonatomic) _Bool pushDroppingPacket; // @synthesize pushDroppingPacket=_pushDroppingPacket;
@property(retain, nonatomic) MLPublisherWarning *pushWarning; // @synthesize pushWarning=_pushWarning;
@property(retain, nonatomic) MLAudioProcessCacher *audioLoopbackProcessCacher; // @synthesize audioLoopbackProcessCacher=_audioLoopbackProcessCacher;
@property(retain, nonatomic) MLAudioProcessCacher *audioProcessCacher; // @synthesize audioProcessCacher=_audioProcessCacher;
@property(retain, nonatomic) MLAudioProcess *kLoopbackAudioProcess; // @synthesize kLoopbackAudioProcess=_kLoopbackAudioProcess;
@property(retain, nonatomic) MLAudioProcess *kAudioProcess; // @synthesize kAudioProcess=_kAudioProcess;
@property unsigned long long totalBytesSendOut; // @synthesize totalBytesSendOut=_totalBytesSendOut;
@property(nonatomic) unsigned long long sessionTime; // @synthesize sessionTime=_sessionTime;
- (_Bool)enableReportAudioVolume;
- (void)setIsLoopbackAudio:(_Bool)arg1;
- (_Bool)isLoopbackAudio;
- (void).cxx_destruct;
- (void)updateSeiDataForConnectWithSeiDict:(id)arg1;
- (void)playbackAudioSampleData:(char *)arg1 byteSize:(unsigned int)arg2;
- (void)pushMusicSampleBuffer:(id)arg1 data:(id)arg2;
- (void)gerneratePlaybackMusicSampleData;
- (void)gernerateMusicSampleData;
- (double)musicCurrentPosition;
- (double)musicDuration;
- (void)musicPlaybackEnded;
- (void)resumeMusic;
- (void)pauseMusic;
- (void)stopMusic;
- (void)createMusicPlayerWithUrl:(id)arg1;
- (void)simpleMusicDecoder:(id)arg1 didError:(id)arg2;
- (void)audioEffectManager:(id)arg1 didAudioEffectFinish:(int)arg2;
- (void)audioEffectManager:(id)arg1 didAudioEffectFailed:(int)arg2;
- (void)setEffectVolumeWithId:(int)arg1 withVolume:(double)arg2;
- (void)audioEncoderWithSample:(id)arg1 pts:(CDStruct_1b6d18a9)arg2;
- (void)stopAudioCollect;
- (void)startAudioCollect;
- (void)handlePCMAudioPacket:(id)arg1 pts:(double)arg2 codec:(id)arg3;
- (void)handleConferenceAudioPacket:(id)arg1;
- (void)pushConferenceAudioPacket:(id)arg1 audioInfo:(id)arg2;
- (void)processAudioBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)setSabineAudioEffectToDefault;
- (void)processRenderAudioBuffer:(id)arg1;
- (void)setSabineAudioEffect:(int)arg1 index:(int)arg2 value:(float)arg3;
- (double)sessionSampleRate;
- (void)writeFailedWithError:(id)arg1;
- (unsigned long long)getEncodedVideoBufferDurationInMs;
- (void)sendStartLogInfo;
- (void)encoder:(id)arg1 encodedFrame:(id)arg2;
- (void)processEncodeVideoFrame:(id)arg1 videoPts:(unsigned long long)arg2 videoParam:(id)arg3 isKey:(_Bool)arg4;
- (void)adjustBitrate;
- (void)changePushLevel;
- (void)setupRtmpWriter;
- (void)createAudioEncoder;
- (void)setupEncoders;
- (_Bool)isDropFrame;
- (unsigned long long)pushType;
- (id)publisherType;
- (void)onReportAudioVolume;
- (void)enableIJKReportAudioVolume:(_Bool)arg1;
- (void)setEnableReportAudioVolume:(_Bool)arg1;
- (void)stopPublishing:(long long)arg1;
- (void)startPublishingWithPublishPath:(id)arg1 videoBitrate:(unsigned long long)arg2 videoFramerate:(unsigned long long)arg3 audioBitrate:(unsigned long long)arg4 audioSamplerate:(unsigned long long)arg5 statisticReportCount:(long long)arg6 statisticSec:(long long)arg7 logEventEnable:(long long)arg8 userID:(id)arg9 roomID:(id)arg10 provider:(int)arg11 sessionTime:(unsigned long long)arg12 codecType:(long long)arg13 bitrateAdapter:(long long)arg14 adaptiveCachMax:(long long)arg15 adaptiveCachMin:(long long)arg16 confServer:(id)arg17 confSecurityId:(id)arg18 confSessionId:(id)arg19 confUserId:(id)arg20 maxBufferStartTimestampInMs:(unsigned long long)arg21 useHighQualityAudio:(_Bool)arg22;
- (void)startPublishingWithOptions:(id)arg1;
- (void)setPublisherOptions:(id)arg1;
- (int)getGOPDuration;
- (id)getLianmaiDetailData;
- (unsigned long long)readerRecvVideoDataSize;
- (unsigned long long)readerRecvAudioDataSize;
- (unsigned long long)readerRecvDataSize;
- (long long)roomMode;
- (long long)roomType;
- (unsigned long long)writerCachedDataDuration;
- (unsigned long long)writerLastDTSTimestamp;
- (unsigned long long)writerFirstDTSTimestamp;
- (unsigned long long)writerMuxDataSize;
- (unsigned long long)writerSentDataSize;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

