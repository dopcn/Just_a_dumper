//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "GPUImageStillCamera.h"

#import "ARSessionDelegate-Protocol.h"
#import "AVCaptureDepthDataOutputDelegate-Protocol.h"
#import "AVCapturePhotoCaptureDelegate-Protocol.h"
#import "MTCameraMovieWriterDelegate-Protocol.h"
#import "MTFaceDetectorDelegate-Protocol.h"

@class ARConfiguration, ARSession, AVCaptureAudioDataOutput, AVCaptureDepthDataOutput, AVCaptureDevice, AVCaptureDeviceInput, AVCaptureMetadataOutput, AVCapturePhotoOutput, AVCaptureSession, GPUImageCropFilter, GPUImageFilter, GPUImageOutput, MTAudioPitcher, MTCameraAudioConfiguration, MTCameraDepthToGrayScaleConverter, MTCameraFilterControl, MTCameraMovieWriter, MTCameraView, MTVideoDeshake, NSArray, NSDictionary, NSMutableArray, NSObject, NSOperationQueue, NSString, UIColor, UIView;
@protocol MTCameraDelegate><GPUImageVideoCameraDelegate, MTCameraTextureSegmentProtocol, MTFaceEngineProtocol, MTHumanPostureEngineProtocol, MTSlamEngineProtocol, OS_dispatch_queue;

@interface MTCamera : GPUImageStillCamera <MTCameraMovieWriterDelegate, MTFaceDetectorDelegate, ARSessionDelegate, AVCapturePhotoCaptureDelegate, AVCaptureDepthDataOutputDelegate>
{
    id _didBecomeActiveNotification;
    id _willRegistActiveNotification;
    id _subjectAreaDidChangeNotification;
    _Bool _isObservingNotication;
    id <MTCameraDelegate><GPUImageVideoCameraDelegate> _delegate;
    id <MTFaceEngineProtocol> _faceEngine;
    _Bool _faceDetectEnable;
    _Bool _faceBorderEnable;
    _Bool _faceLightDetectorEnable;
    _Bool _faceSkinDetectorEnable;
    _Bool _faceAngleDetectorEnable;
    _Bool _isTextureSegmenting;
    _Bool _isHumanPostureDetecting;
    _Bool _isSlaming;
    id <MTCameraTextureSegmentProtocol> _textureSegmentEngine;
    NSOperationQueue *_faceAndFabbyHandleQueue;
    id <MTHumanPostureEngineProtocol> _humanPostureEngine;
    id <MTSlamEngineProtocol> _slamEngine;
    _Bool _frontScreenFillLightActive;
    double _screenBrightness;
    double _fillLightScreenBrightness;
    struct CGRect _fillLightRectInKeyWindow;
    UIColor *_fillLightScreenColor;
    double _fillLightDuration;
    UIView *_fillLightView;
    AVCaptureSession *_photoSessionPresetAudioCaptureSession;
    AVCaptureDeviceInput *_photoSessionPresetCaptureAudioDeviceInput;
    AVCaptureAudioDataOutput *_photoSessionPresetCaptureAudioDataOutput;
    _Bool _isCaptureFrame;
    CDUnknownBlockType _captureFrameCompletionBlock;
    CDUnknownBlockType _captureAVCapturePhotoBlock;
    long long _brushTimes;
    CDUnknownBlockType _captureContinuousFrameCompletionBlock;
    NSMutableArray *_captureFramePhotoArray;
    long long _focusMode;
    struct CGPoint _focusPoint;
    long long _exposureMode;
    struct CGPoint _exposurePoint;
    double _exposureTargetBias;
    long long _torchMode;
    long long _flashMode;
    NSDictionary *_myCurrentCaptureMetadata;
    _Bool _isNeedToRestoreAVAudioSessionCategory;
    NSString *_audioSessionCategoryBeforeCaptureSlience;
    unsigned long long _audioSessionCategoryOptionsBeforeCaptureSlience;
    _Bool _isSmoothAutoFocusEnabled;
    _Bool _isSubjectAreaChangeMonitoringEnabled;
    _Bool _isUsingBigActiveFormat;
    struct CGSize _originalVideoOutSize;
    struct CGSize _bigActiveFormatSize;
    GPUImageFilter *_forceSizeFilter;
    long long _throwSampleBufferCount;
    _Bool _isThrowingSampleBuffer;
    MTVideoDeshake *_previewDeshakeFilter;
    _Bool _isNeedOpenTourchWhenStart;
    const float *_preferredConversion;
    int imageBufferWidth;
    int imageBufferHeight;
    ARConfiguration *_arConfiguration;
    ARSession *_arSession;
    struct __CVPixelBufferPool *_pixelBufferPool;
    struct __CVBuffer *_copyBuffer;
    NSString *_originPreset;
    int _customFrameRate;
    _Bool _isCapturingOutputImage;
    MTAudioPitcher *_audioPitcher;
    NSObject<OS_dispatch_queue> *_arFrameProcessingQueue;
    long long _currentValidOrientation;
    _Bool _pausePreView;
    _Bool _interruptAnimationEnable;
    _Bool _nightShotActive;
    _Bool _previewRunning;
    _Bool _depthDataDeliveryEnabled;
    _Bool _highResolutionStillImageOutputEnabled;
    _Bool _fixPhotoOrientationEnable;
    _Bool _fixPhotoFrontHorizontalMirrorEnable;
    _Bool _captureSilenceWithJaKor;
    _Bool _enableCaptureSilence;
    _Bool _pasueOutputFrameDuringCapture;
    _Bool _enablesMeiTuVideoStabilizationWhenAvailable;
    _Bool _enablesVideoStabilizationWhenAvailable;
    _Bool _hasAudioTrack;
    _Bool _horizontallyMirrorFrontFacingCameraWriter;
    _Bool _enableWriter;
    _Bool _recording;
    _Bool _recordIsStarting;
    _Bool _recordIsStopping;
    _Bool _isBackDualCamera;
    int _rotationMode;
    int _photoMaxlength;
    long long _cameraType;
    MTCameraView *_preview;
    NSArray *_photoFaceRects;
    NSDictionary *_faceInfo;
    long long _cameraARKitFunctionType;
    NSString *_videoProfileLevel;
    double _videoAverageBitRate;
    double _audioPitchRate;
    MTCameraAudioConfiguration *_audioConfiguration;
    MTCameraFilterControl *_filterControl;
    MTCameraFilterControl *_buildInFilterControl;
    struct opaqueCMSampleBuffer *_curSampleBufferRef;
    NSString *_outputVideoFilePath;
    MTCameraMovieWriter *_movieWriter;
    GPUImageOutput *_recordingFilter;
    GPUImageCropFilter *_movieWriterCropFilter;
    MTVideoDeshake *_recordDeshakeFilter;
    NSArray *_faceArrary;
    AVCaptureMetadataOutput *_metaDataOutput;
    AVCaptureDepthDataOutput *_depthDataOutput;
    AVCaptureDevice *_dualBackDevice;
    AVCapturePhotoOutput *_dualBackPhotoOutput;
    MTCameraDepthToGrayScaleConverter *_photoDepthConverter;
    struct CGSize _outputVideoSize;
    struct CGAffineTransform _videoInputTransform;
    // Error parsing type: {?="projectionMatrix"{?="columns"[4]}"viewMatrix"{?="columns"[4]}"modelMatirx"{?="columns"[4]}"ambientLightColor""directionalLightDirection""directionalLightColor""materialShininess"f"orientation"q}, name: _arFrameStatus
}

+ (_Bool)isCurrentDeviceSupportMeiTuVideoStabilization;
+ (void)checkCameraAuthorization:(CDUnknownBlockType)arg1;
+ (void)checkAudioAuthorization:(CDUnknownBlockType)arg1;
+ (_Bool)isCameraAudioAuthorized;
+ (_Bool)isCameraVideoAuthorized;
@property(retain, nonatomic) MTCameraDepthToGrayScaleConverter *photoDepthConverter; // @synthesize photoDepthConverter=_photoDepthConverter;
@property(retain, nonatomic) AVCapturePhotoOutput *dualBackPhotoOutput; // @synthesize dualBackPhotoOutput=_dualBackPhotoOutput;
@property(retain, nonatomic) AVCaptureDevice *dualBackDevice; // @synthesize dualBackDevice=_dualBackDevice;
@property(retain, nonatomic) AVCaptureDepthDataOutput *depthDataOutput; // @synthesize depthDataOutput=_depthDataOutput;
@property(nonatomic) _Bool isBackDualCamera; // @synthesize isBackDualCamera=_isBackDualCamera;
// Error parsing type for property arFrameStatus:
// Property attributes: T{?={?=[4]}{?=[4]}{?=[4]}fq},N,V_arFrameStatus

@property(retain, nonatomic) AVCaptureMetadataOutput *metaDataOutput; // @synthesize metaDataOutput=_metaDataOutput;
@property(retain, nonatomic) NSArray *faceArrary; // @synthesize faceArrary=_faceArrary;
@property(retain, nonatomic) MTVideoDeshake *recordDeshakeFilter; // @synthesize recordDeshakeFilter=_recordDeshakeFilter;
@property(retain, nonatomic) GPUImageCropFilter *movieWriterCropFilter; // @synthesize movieWriterCropFilter=_movieWriterCropFilter;
@property(nonatomic) __weak GPUImageOutput *recordingFilter; // @synthesize recordingFilter=_recordingFilter;
@property(retain, nonatomic) MTCameraMovieWriter *movieWriter; // @synthesize movieWriter=_movieWriter;
@property(retain, nonatomic) NSString *outputVideoFilePath; // @synthesize outputVideoFilePath=_outputVideoFilePath;
@property(nonatomic) _Bool recordIsStopping; // @synthesize recordIsStopping=_recordIsStopping;
@property(nonatomic) _Bool recordIsStarting; // @synthesize recordIsStarting=_recordIsStarting;
@property(nonatomic) struct opaqueCMSampleBuffer *curSampleBufferRef; // @synthesize curSampleBufferRef=_curSampleBufferRef;
@property(retain, nonatomic) MTCameraFilterControl *buildInFilterControl; // @synthesize buildInFilterControl=_buildInFilterControl;
@property(retain, nonatomic) MTCameraFilterControl *filterControl; // @synthesize filterControl=_filterControl;
@property(retain, nonatomic) MTCameraAudioConfiguration *audioConfiguration; // @synthesize audioConfiguration=_audioConfiguration;
@property(nonatomic) double audioPitchRate; // @synthesize audioPitchRate=_audioPitchRate;
@property(nonatomic) struct CGAffineTransform videoInputTransform; // @synthesize videoInputTransform=_videoInputTransform;
@property(nonatomic) double videoAverageBitRate; // @synthesize videoAverageBitRate=_videoAverageBitRate;
@property(nonatomic) struct CGSize outputVideoSize; // @synthesize outputVideoSize=_outputVideoSize;
@property(nonatomic, getter=isRecording) _Bool recording; // @synthesize recording=_recording;
@property(copy, nonatomic) NSString *videoProfileLevel; // @synthesize videoProfileLevel=_videoProfileLevel;
@property(nonatomic) _Bool enableWriter; // @synthesize enableWriter=_enableWriter;
@property(nonatomic) _Bool horizontallyMirrorFrontFacingCameraWriter; // @synthesize horizontallyMirrorFrontFacingCameraWriter=_horizontallyMirrorFrontFacingCameraWriter;
@property(nonatomic) _Bool hasAudioTrack; // @synthesize hasAudioTrack=_hasAudioTrack;
@property(nonatomic) _Bool enablesVideoStabilizationWhenAvailable; // @synthesize enablesVideoStabilizationWhenAvailable=_enablesVideoStabilizationWhenAvailable;
@property(nonatomic) _Bool enablesMeiTuVideoStabilizationWhenAvailable; // @synthesize enablesMeiTuVideoStabilizationWhenAvailable=_enablesMeiTuVideoStabilizationWhenAvailable;
@property(nonatomic) _Bool pasueOutputFrameDuringCapture; // @synthesize pasueOutputFrameDuringCapture=_pasueOutputFrameDuringCapture;
@property(nonatomic) _Bool enableCaptureSilence; // @synthesize enableCaptureSilence=_enableCaptureSilence;
@property(nonatomic) _Bool captureSilenceWithJaKor; // @synthesize captureSilenceWithJaKor=_captureSilenceWithJaKor;
@property(nonatomic) int photoMaxlength; // @synthesize photoMaxlength=_photoMaxlength;
@property(nonatomic) _Bool fixPhotoFrontHorizontalMirrorEnable; // @synthesize fixPhotoFrontHorizontalMirrorEnable=_fixPhotoFrontHorizontalMirrorEnable;
@property(nonatomic) _Bool fixPhotoOrientationEnable; // @synthesize fixPhotoOrientationEnable=_fixPhotoOrientationEnable;
@property(nonatomic, getter=isHighResolutionStillImageOutputEnabled) _Bool highResolutionStillImageOutputEnabled; // @synthesize highResolutionStillImageOutputEnabled=_highResolutionStillImageOutputEnabled;
@property(nonatomic) long long cameraARKitFunctionType; // @synthesize cameraARKitFunctionType=_cameraARKitFunctionType;
@property(nonatomic, getter=isDepthDataDeliveryEnabled) _Bool depthDataDeliveryEnabled; // @synthesize depthDataDeliveryEnabled=_depthDataDeliveryEnabled;
@property(nonatomic) _Bool previewRunning; // @synthesize previewRunning=_previewRunning;
@property(nonatomic, getter=isNightShotActive) _Bool nightShotActive; // @synthesize nightShotActive=_nightShotActive;
@property(retain, nonatomic) NSDictionary *faceInfo; // @synthesize faceInfo=_faceInfo;
@property(retain, nonatomic) NSArray *photoFaceRects; // @synthesize photoFaceRects=_photoFaceRects;
@property(nonatomic) int rotationMode; // @synthesize rotationMode=_rotationMode;
@property(nonatomic) _Bool interruptAnimationEnable; // @synthesize interruptAnimationEnable=_interruptAnimationEnable;
@property(nonatomic) _Bool pausePreView; // @synthesize pausePreView=_pausePreView;
@property(retain, nonatomic) MTCameraView *preview; // @synthesize preview=_preview;
@property(nonatomic) long long cameraType; // @synthesize cameraType=_cameraType;
@property(nonatomic) __weak id <MTCameraDelegate><GPUImageVideoCameraDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)updateInputTargetForFilterControl;
- (void)removeBuildInFilter:(id)arg1;
- (void)addBuildInFilter:(id)arg1;
- (void)depthDataOutput:(id)arg1 didDropDepthData:(id)arg2 timestamp:(CDStruct_1b6d18a9)arg3 connection:(id)arg4 reason:(long long)arg5;
- (void)depthDataOutput:(id)arg1 didOutputDepthData:(id)arg2 timestamp:(CDStruct_1b6d18a9)arg3 connection:(id)arg4;
- (void)processDepthData:(id)arg1;
- (void)captureOutput:(id)arg1 didFinishCaptureForResolvedSettings:(id)arg2 error:(id)arg3;
- (void)captureOutput:(id)arg1 didFinishProcessingLivePhotoToMovieFileAtURL:(id)arg2 duration:(CDStruct_1b6d18a9)arg3 photoDisplayTime:(CDStruct_1b6d18a9)arg4 resolvedSettings:(id)arg5 error:(id)arg6;
- (void)captureOutput:(id)arg1 didFinishRecordingLivePhotoMovieForEventualFileAtURL:(id)arg2 resolvedSettings:(id)arg3;
- (void)captureOutput:(id)arg1 didFinishProcessingPhoto:(id)arg2 error:(id)arg3;
- (void)captureOutput:(id)arg1 willCapturePhotoForResolvedSettings:(id)arg2;
- (void)captureOutput:(id)arg1 willBeginCaptureForResolvedSettings:(id)arg2;
- (struct CGRect)reductionFaceRect:(struct CGRect)arg1 isMirror:(_Bool)arg2;
- (double)rotateAngleFrom:(long long)arg1;
- (void)adjustFaceInfoFor:(id)arg1;
- (void)detectFaceSkinColorAverage:(long long)arg1 green:(long long)arg2 blue:(long long)arg3;
- (void)detectFaceLight:(unsigned char)arg1;
- (void)faceInfosForBord:(id)arg1;
- (id)mirrorFaceInfo:(id)arg1;
- (void)detectResultFaceInfo:(id)arg1 withSamplebuffer:(struct opaqueCMSampleBuffer *)arg2;
- (void)detectFaceResult:(id)arg1 hasEyeBlink:(_Bool)arg2;
- (void)cancelTextureHandlers;
- (void)resumeCameraCapture;
- (void)pauseCameraCapture;
- (void)stopCameraCapture;
- (void)stopCameraCaptureAndStopCaptureSession:(_Bool)arg1;
- (void)startCameraCapture;
- (char *)pixelBRGABytesFromImageRef:(struct CGImage *)arg1;
- (void)sampleBuferDetectSlam:(struct opaqueCMSampleBuffer *)arg1;
- (void)sampleBuferDetectHumanPosture:(struct opaqueCMSampleBuffer *)arg1;
- (void)preProgressWithOutputTextrueWidth:(int)arg1 outputTextrueHeight:(int)arg2;
- (void)sampleBufferDetectFace:(struct opaqueCMSampleBuffer *)arg1;
- (void)updateTargetsForVideoCameraUsingCacheTextureAtWidth:(int)arg1 height:(int)arg2 time:(CDStruct_1b6d18a9)arg3;
- (void)rleaseSampleBufferAndSignalFrameRenderingSemaphore;
- (void)convertYUVToRGBOutput:(struct CGAffineTransform *)arg1;
- (void)processVideoSampleBuffer:(struct opaqueCMSampleBuffer *)arg1 transform:(struct CGAffineTransform *)arg2;
- (void)processVideoSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (id)audioPitcher;
- (void)processAudioSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (void)getImageFormSampleBufferRef:(struct opaqueCMSampleBuffer *)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)captureFrameIfNeedFrom:(struct opaqueCMSampleBuffer *)arg1;
- (void)resetSlamSceneFinished;
- (_Bool)isNeedResetSlamEngine;
- (_Bool)isNeedSlamDetect;
- (_Bool)isNeedHumanPostureDetect;
- (_Bool)isNeedSegmentProcess;
- (_Bool)isNeedGenderDetect;
- (void)markEnginesFlag;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(id)arg3;
- (_Bool)isARKitUsingProvidesAudioData;
- (void)session:(id)arg1 cameraDidChangeTrackingState:(id)arg2;
- (void)session:(id)arg1 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer *)arg2;
- (void)session:(id)arg1 didUpdateFrame:(id)arg2;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 didUpdateAnchors:(id)arg2;
- (_Bool)isARWorldTrackingSupported;
- (_Bool)isSupportARKitFunctionType:(long long)arg1;
- (void)setSymtemVideoStabilization:(_Bool)arg1;
- (void)notificationFiltersCropSize:(double)arg1;
- (void)setMeituVideoStabilization:(_Bool)arg1;
- (void)rotateCamera;
- (void)captureContinuousPhotoAsCaptureFrames:(long long)arg1 brushTimes:(long long)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)capturePhotoAsCaptureFrames:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)captureCameraPhotoAsSampleBufferWithOrientation:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)capturePhotoAsSampleBufferWithOrientation:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)createEngineTaskQueueIfNeed;
- (void)stopPreviewRunningNotificationToFilters;
- (void)startPreviewRunningNotificationToFilters;
- (void)finishRecordVideoNotificationToFilters;
- (void)readyForRecordVideoNotificationToFilters;
- (void)finishedCapturePhotoNotificationToFilters;
- (void)readyForCapturePhotoNotificationToFilters;
- (struct CGRect)adjutRect:(struct CGRect)arg1 deviceOrientation:(long long)arg2;
- (id)faceRectsWithDeivceOrientation:(long long)arg1;
- (id)currentCaptureMetadata;
- (void)capturePhotoProcessedUpToFilter:(id)arg1 withImageOnGPUHandler:(CDUnknownBlockType)arg2;
- (struct CGSize)sizeForMaxLength:(struct CGSize)arg1;
- (void)capturePhotoAsImageProcessedUpToFilter:(id)arg1 withOrientation:(long long)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)captureARKit:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)capturePhotoAsJPEGProcessedUpToFilter:(id)arg1 withOrientation:(long long)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (id)jpegDataWithPixelBuffer:(struct __CVBuffer *)arg1 formatDescription:(struct __CFDictionary *)arg2;
- (id)cameraPhotoWithImage:(id)arg1 exifInfo:(id)arg2;
- (void)capturePhotoWithDepthDataUpToFilter:(id)arg1 withOrientation:(long long)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (id)strCodecTypeFor:(id)arg1;
- (void)autoAdjustActiveFormatBeforeCaptureSlience:(CDUnknownBlockType)arg1;
- (_Bool)isCurActiveFormatSupportHighResolutionStillImage;
- (id)modifyEXIFDict:(id)arg1 imageSize:(struct CGSize)arg2 changeOrientation:(_Bool)arg3;
- (CDStruct_ffe6b7c1)availableVideoFormatDescriptionDimensions:(id)arg1;
- (_Bool)isSystemLanguageSetToJapaneseOrKorean;
- (void)finshProcessAudioSessionCategoryForCaptureSilenceIfNeed;
- (void)preProcessAudioSessionCategoryForCaptureSilenceIfNeed;
- (_Bool)checkIsNeedUsingBigActiveFormat;
- (void)setUsingBigActiveFormat:(_Bool)arg1;
- (struct CGSize)forcePreViewSize;
- (void)adjustActiveVideoMaxFrameDurationWith:(_Bool)arg1;
- (void)setFrameRate:(int)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)removeAdjustingObservers;
- (void)addAdjustingObservers;
- (void)stop;
- (void)startWithARConfiguration;
- (void)start;
- (void)cameraSubjectAreaDidChange:(id)arg1;
- (void)handleApplicationDidBecomeActive;
- (void)handleApplicationWillResignActive;
- (void)removeApplicationEventNotifications;
- (void)addApplicationEventNotifications;
- (void)loadStillCameraconfiguration;
- (void)captureSessionRuntimeError:(id)arg1;
- (void)setAudioSessionForBeginRecord;
- (_Bool)isAVAudioSessionSupprotRecord;
- (void)stopRecordingWithInterrupt:(_Bool)arg1 withError:(id)arg2 inBackground:(_Bool)arg3;
- (void)removeFile:(id)arg1;
- (void)showError:(id)arg1;
- (void)movieRecordingFailedWithError:(id)arg1;
- (void)movieRecordingAtTime:(CDStruct_1b6d18a9)arg1;
- (double)captureDuration;
- (void)finishRecordingWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)startRecording:(id)arg1 videoOutputFilePath:(id)arg2;
@property(nonatomic) struct CGRect videoCropRegion;
- (_Bool)removeAudioInputsAndOutputs;
- (_Bool)addAudioInputsAndOutputs;
- (_Bool)isCanRecordVideo;
- (void)createMovieWriterForOutputVideoFilePath:(id)arg1 withVideosize:(struct CGSize)arg2;
- (void)tearDownCaptureSessionObservers;
- (void)setupCaptureSessionObservers;
- (void)unloadVideoCameraConfiguration;
- (void)loadVideoCameraConfiguration;
- (id)getFrameRenderingSemaphore;
- (id)originalImageCaptureFilter;
- (void)createFilterControls;
@property(readonly, nonatomic) long long cameraPosition;
- (void)addDefaultFaceMetaDataOutput;
- (void)addDefaultFaceEngine;
- (_Bool)removeCustomAudioInputsAndOutputs;
- (_Bool)addCustomAudioInputsAndOutputs;
- (void)_photoSessionPresetRemoveAudioCaptureSession;
- (void)_photoSessionPresetAddAudioCaptureSession;
- (_Bool)checkIsNeedThrowSampleBuffer;
- (void)markThrowSampleBuffer;
- (void)resetCameraWithCurStates;
- (void)reSetSessionPresetAfterAnOtherCameraUsed;
- (void)setCaptureSessionPreset:(id)arg1;
- (void)adjustVideoFrameDurationForNonPresetPhoto;
- (void)resetInputCamera;
@property(readonly, nonatomic) _Bool isCurBackDualCamera;
- (void)removeDepthDataOutput;
- (void)addDepthDataOutput;
- (void)closeBackDualCamera;
- (_Bool)setupBackDualCamera;
- (id)inputCamera;
- (id)initBackDualCameraWithSessionPrest:(id)arg1;
- (id)initWithSessionPreset:(id)arg1 cameraPosition:(long long)arg2;
- (void)dealloc;
- (_Bool)isPositionBackCamera;
- (_Bool)isPositionFrontCamera;
@property(readonly, nonatomic) double videoMinZoomFactor;
@property(readonly, nonatomic) double videoMaxZoomFactor;
@property(nonatomic) double videoZoomFactor;
- (_Bool)isCanVideoZoom;
@property(nonatomic) long long whiteBalanceMode;
- (void)setExposureTargetBias:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) float maxExposureTargetBias;
@property(readonly, nonatomic) float minExposureTargetBias;
@property(readonly, nonatomic) float exposureTargetBias;
@property(readonly, nonatomic) float exposureTargetOffset;
- (void)setExposureModeCustomWithDuration:(CDStruct_1b6d18a9)arg1 ISO:(float)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) float ISO;
@property(readonly, nonatomic) float maxISO;
@property(readonly, nonatomic) float minISO;
@property(readonly, nonatomic) CDStruct_1b6d18a9 exposureDuration;
@property(readonly, nonatomic) float lensAperture;
@property(readonly, nonatomic, getter=isAdjustingExposure) _Bool adjustingExposure;
@property(nonatomic) struct CGPoint exposurePoint;
@property(readonly, nonatomic, getter=isExposurePointSupported) _Bool exposurePointSupported;
@property(nonatomic) long long exposureMode;
- (_Bool)isExposureModeSupported:(long long)arg1;
@property(retain, nonatomic) id <MTCameraTextureSegmentProtocol> textureSegmentEngine;
- (void)setFaceAngleDetectorEnable:(_Bool)arg1;
- (_Bool)faceAngleDetectorEnable;
- (void)setFaceSkinDetectorEnable:(_Bool)arg1;
- (_Bool)faceLightDetectorEnable;
- (void)setFaceLightDetectorEnable:(_Bool)arg1;
- (_Bool)faceBorderEnable;
- (void)setFaceBorderEnable:(_Bool)arg1;
- (_Bool)faceDetectEnable;
- (void)setFaceDetectEnable:(_Bool)arg1;
- (id)faceEngine;
- (void)setFaceEngine:(id)arg1;
- (void)reUseDefaultFaceEngine;
@property(retain, nonatomic) id <MTHumanPostureEngineProtocol> humanPostureEngine;
@property(retain, nonatomic) id <MTSlamEngineProtocol> slamEngine;
- (void)changeRecordingOutput:(id)arg1;
- (void)updateTopOutputFilterTargetWithLastTopOutputFilter:(id)arg1 lastTopOutputFilterTargets:(id)arg2;
- (id)topPreviewFilter;
- (id)filters;
- (void)changeFilters:(id)arg1;
- (void)removeAllFilters;
- (void)removeFilters:(id)arg1;
- (void)addFilters:(id)arg1;
@property(nonatomic, getter=isSubjectAreaChangeMonitoringEnabled) _Bool subjectAreaChangeMonitoringEnabled;
- (void)setFocusModeLockedWithLensPosition:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) float lensPosition;
@property(nonatomic, getter=isSmoothAutoFocusEnabled) _Bool smoothAutoFocusEnabled;
@property(readonly, nonatomic, getter=isSmoothAutoFocusSupported) _Bool smoothAutoFocusSupported;
@property(nonatomic) long long autoFocusRangeRestriction;
@property(readonly, nonatomic, getter=isAutoFocusRangeRestrictionSupported) _Bool autoFocusRangeRestrictionSupported;
@property(readonly, nonatomic, getter=isAdjustingFocus) _Bool adjustingFocus;
@property(nonatomic) struct CGPoint focusPoint;
@property(readonly, nonatomic, getter=isFocusPointSupported) _Bool focusPointSupported;
@property(nonatomic) long long focusMode;
- (_Bool)isFocusModeSupported:(long long)arg1;
@property(nonatomic) long long flashMode;
- (_Bool)isFlashModeSupported:(long long)arg1;
@property(readonly, nonatomic, getter=isFlashActive) _Bool flasgActive;
@property(readonly, nonatomic, getter=isFlashAvailable) _Bool flashAvailable;
@property(readonly, nonatomic) _Bool hasFlash;
@property(nonatomic) _Bool automaticallyEnablesLowLightBoostWhenAvailable;
@property(readonly, nonatomic, getter=isLowLightBoostEnabled) _Bool lowLightBoostEnabled;
@property(readonly, nonatomic, getter=isLowLightBoostSupported) _Bool lowLightBoostSupported;
- (void)cleanFrontScreenFillLightResidue;
- (void)handleFrontScreenFillLight;
- (_Bool)isNeedHandleFrontScreenFillLightActive;
- (_Bool)setTorchModeOnWithLevel:(float)arg1 error:(id *)arg2;
@property(readonly, nonatomic) float torchLevel;
@property(nonatomic) long long torchMode;
- (_Bool)isTorchModeSupported:(long long)arg1;
@property(readonly, nonatomic, getter=isTorchActive) _Bool torchActive;
@property(readonly, nonatomic, getter=isTorchAvailable) _Bool torchAvailable;
@property(readonly, nonatomic) _Bool hasTorch;
- (void)captureContinuousPhotoProcessedUpToFilter:(id)arg1 withSettingsArray:(id)arg2 withImageOnGPUHandler:(CDUnknownBlockType)arg3;
- (void)prepareToCaptureStillImageBracketWithSettingsArray:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)captureContinuousPhotoAsJPEGProcessedUpToFilter:(id)arg1 withSettingsArray:(id)arg2 withOrientation:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)captureContinuousPhotoWithSettingsArray:(id)arg1 resultBlock:(CDUnknownBlockType)arg2;
- (void)captureContinuousPhotoAsJPEGProcessedUpToFilter:(id)arg1 settingsArray:(id)arg2 withOrientation:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)captureContinuousPhotoPrepareWithSettingsArray:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)isFrontScreenFillLightActive;
@property(nonatomic) _Bool frontScreenFillLightActive; // @dynamic frontScreenFillLightActive;
- (void)setFrontFillLightScreenBrightness:(float)arg1 fillLightRectInKeyWindow:(struct CGRect)arg2 screenColor:(id)arg3 duration:(double)arg4;
@property(readonly, nonatomic) AVCaptureSession *photoSessionPresetAudioCaptureSession;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

