//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NVSNotificationReceiverDelegate-Protocol.h"
#import "NVSStatisticsDataDelegate-Protocol.h"
#import "NVSTimeDelegate-Protocol.h"
#import "NVSVideoChatSenderDelegate-Protocol.h"
#import "YXAVChatModuleDelegate-Protocol.h"

@class NSMutableArray, NSMutableDictionary, NSOperationQueue, NSString, NVSConnectResultInfo, NVSNotificationReceiver, NVSNotificationSender, NVSReachability, NVSStatisticsData, NVSStatisticsReporter, NVSTimer, NVSVideoChatSender;
@protocol NVSRecordingDelegate, NVSSessionDelegate, NVSVideoPlayerDelegate;

@interface NVSSessionManager : NSObject <YXAVChatModuleDelegate, NVSTimeDelegate, NVSNotificationReceiverDelegate, NVSVideoChatSenderDelegate, NVSStatisticsDataDelegate>
{
    _Bool otherIsCloseVideo;
    _Bool otherCamaraCanAvailable;
    NVSVideoChatSender *sender;
    NSMutableDictionary *receivers;
    NSMutableDictionary *recordManages;
    NSMutableDictionary *recordingFlags;
    id <NVSVideoPlayerDelegate> playerDelegate;
    int currentVideoDimen;
    NVSTimer *audioDeviceCheckTimerHolder;
    NVSConnectResultInfo *recordInfo;
    _Bool debugIncreaseAudioSize;
    unsigned short netStatus;
    double lastRequestKeyFrameTime;
    _Bool isUseSpeaker;
    _Bool isRecording;
    NVSTimer *_freeDiskCheckTimerHolder;
    _Bool _wasAudioInterrputed;
    _Bool _meetingMode;
    _Bool _meetingViewer;
    _Bool _autoRelogin;
    _Bool _startWithBackCamera;
    _Bool _closeAudio;
    int _camera;
    int _lowNet;
    _Bool _enableBypassStreaming;
    NSOperationQueue *_taskQueue;
    _Bool _settingBypassStreaming;
    _Bool _settingBypassOn;
    NVSTimer *_setBypassTimer;
    int _nioSocketType;
    long long myUid;
    NVSStatisticsReporter *_reporter;
    NVSStatisticsData *_statData;
    _Bool _disableErrorReport;
    _Bool _isMute;
    _Bool _isVideoMuted;
    _Bool _isStarted;
    int chatType;
    int _sessionMode;
    NSString *userID;
    unsigned long long _channelID;
    id <NVSSessionDelegate> _sessionDelegate;
    long long _turnAddrIndex;
    long long _proxyAddrIndex;
    long long _myLastNetType;
    long long _otherLastNetType;
    NVSReachability *_networkListener;
    NVSNotificationSender *_notificationSender;
    NVSNotificationReceiver *_notificationReceiver;
    NSMutableArray *_joinedUsers;
    id <NVSRecordingDelegate> _recordingDelegate;
}

+ (unsigned int)nvsVersion;
+ (unsigned int)netVersion;
+ (id)i420FrameToImage:(id)arg1;
+ (id)chatMode2String:(int)arg1;
+ (id)videoCodecType2String:(int)arg1;
+ (id)audioCodecType2String:(int)arg1;
@property(nonatomic) _Bool isStarted; // @synthesize isStarted=_isStarted;
@property(nonatomic) __weak id <NVSRecordingDelegate> recordingDelegate; // @synthesize recordingDelegate=_recordingDelegate;
@property(nonatomic) _Bool isVideoMuted; // @synthesize isVideoMuted=_isVideoMuted;
@property(nonatomic) _Bool isMute; // @synthesize isMute=_isMute;
@property(retain, nonatomic) NSMutableArray *joinedUsers; // @synthesize joinedUsers=_joinedUsers;
@property(retain, nonatomic) NVSNotificationReceiver *notificationReceiver; // @synthesize notificationReceiver=_notificationReceiver;
@property(retain, nonatomic) NVSNotificationSender *notificationSender; // @synthesize notificationSender=_notificationSender;
@property(retain, nonatomic) NVSReachability *networkListener; // @synthesize networkListener=_networkListener;
@property(nonatomic) _Bool disableErrorReport; // @synthesize disableErrorReport=_disableErrorReport;
@property(nonatomic) long long otherLastNetType; // @synthesize otherLastNetType=_otherLastNetType;
@property(nonatomic) long long myLastNetType; // @synthesize myLastNetType=_myLastNetType;
@property(nonatomic) long long proxyAddrIndex; // @synthesize proxyAddrIndex=_proxyAddrIndex;
@property(nonatomic) long long turnAddrIndex; // @synthesize turnAddrIndex=_turnAddrIndex;
@property(nonatomic) __weak id <NVSSessionDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property(nonatomic) int sessionMode; // @synthesize sessionMode=_sessionMode;
@property(nonatomic) unsigned long long channelID; // @synthesize channelID=_channelID;
@property(retain, nonatomic) NSString *userID; // @synthesize userID;
@property(nonatomic) int chatType; // @synthesize chatType;
- (void).cxx_destruct;
- (id)videoRxStat;
- (id)audioRxStat;
- (id)proxyIP;
- (id)turnIP;
- (id)netType;
- (void)snapshotFromLocalVideoCompletion:(CDUnknownBlockType)arg1;
- (id)playSoundEffect:(id)arg1;
- (id)currentAudioMixTask;
- (_Bool)stopAudioMix;
- (_Bool)resumeAudioMix;
- (_Bool)pauseAudioMix;
- (_Bool)updateAudioMix:(id)arg1;
- (id)startAudioMix:(id)arg1;
- (_Bool)setMeetingRole:(_Bool)arg1;
- (_Bool)setUser:(unsigned long long)arg1 videoMute:(_Bool)arg2;
- (_Bool)setUser:(unsigned long long)arg1 audioMute:(_Bool)arg2;
- (void)stopMeetingReceiver:(unsigned long long)arg1;
- (void)startMeetingReceiver:(unsigned long long)arg1;
- (void)startMeetingSender;
- (id)currentAudioRecordingFilePath;
- (void)stopAudioRecording;
- (int)startAudioRecording:(id)arg1;
- (void)onRecordMp4Error;
- (unsigned long long)getFreeDiskspace;
- (int)stopAllRecodingTasks;
- (int)stopRecordingWithUid:(long long)arg1;
- (int)startRecording:(id)arg1 videoBitrate:(unsigned int)arg2 delegate:(id)arg3 uid:(long long)arg4;
- (int)readyToRecord:(long long)arg1;
- (void)adjustVideoFrameSizesForBypassStreaming;
- (void)setVideoQualityToNetworkLayer;
- (int)audioCodecConfig;
- (void)handleRouteChange:(id)arg1;
- (void)onReceiveCommand:(unsigned long long)arg1 withVaule:(unsigned long long)arg2 from:(unsigned long long)arg3;
- (void)onReceiveSerial:(unsigned long long)arg1 from:(unsigned long long)arg2;
- (void)sendNetNotificationCommand:(int)arg1 value:(id)arg2 to:(unsigned long long)arg3;
- (int)getAudioParameter;
- (void)notifyAudioError:(int)arg1;
- (void)onAudioDeviceError:(id)arg1;
- (void)setVideoBitrate:(int)arg1;
- (void)onNVSTimerFired:(id)arg1;
- (void)resetAudio;
- (_Bool)isValidNetTpye:(unsigned short)arg1;
- (id)errorDescriptionBy:(id)arg1 report:(id)arg2;
- (int)getLowNetType:(int)arg1;
- (id)getISPType;
- (int)getNetType;
- (void)ajustAudioBitRate:(unsigned int)arg1;
- (void)onProximitySensorChange:(id)arg1;
- (void)disableProximityMonitoring;
- (void)enableProximityMonitoring;
- (void)setOtherCamaraAvailable:(_Bool)arg1;
- (void)setOtherCloseVideo:(_Bool)arg1;
- (_Bool)isOtherCamaraClose;
- (void)onEnterBackground:(id)arg1;
- (void)onRequestKeyFrame:(id)arg1;
- (void)onAudioSessionInterruption:(id)arg1;
- (void)onNetworkChanged;
- (void)onSetBypassStreaming:(_Bool)arg1 result:(int)arg2;
- (void)onLogoutFinished:(unsigned long long)arg1;
- (void)onReceiveData:(id)arg1 from:(unsigned long long)arg2 withPacketID:(unsigned int)arg3;
- (void)onReceiveNotification:(id)arg1 from:(unsigned long long)arg2;
- (void)onChangeAudioBitrate:(unsigned int)arg1;
- (void)onChangeVideoBitrate:(unsigned int)arg1;
- (unsigned int)onChangeSendFrequency:(int)arg1;
- (void)onProtocalIncompatible:(int)arg1;
- (void)onNetstatChanged:(unsigned short)arg1 clientId:(unsigned long long)arg2;
- (void)onP2PStat:(unsigned int)arg1;
- (void)onReceiveVideoPacket:(const char *)arg1 dataSize:(unsigned int)arg2 from:(unsigned long long)arg3 withPacketID:(unsigned int)arg4;
- (void)onReceiveAudioPacket:(const char *)arg1 dataSize:(unsigned int)arg2 from:(unsigned long long)arg3 withPacketID:(unsigned int)arg4;
- (void)onConnect:(id)arg1;
- (void)onPeopleLeave:(unsigned long long)arg1 forReason:(int)arg2;
- (void)onPeopleJoin:(unsigned long long)arg1;
- (void)onServerDisconnect;
- (void)onPeerDisconnect;
- (void)onLoginResponse:(id)arg1;
- (void)onSentData:(unsigned long long)arg1 isAudio:(_Bool)arg2;
- (void)onCameraRunning:(_Bool)arg1;
- (_Bool)isMeetingViewer;
- (_Bool)isCloseAudio;
- (_Bool)couldSendAudio;
- (_Bool)couldSendVideo;
- (_Bool)sendVideoSampleBuffer:(struct opaqueCMSampleBuffer *)arg1;
- (_Bool)setBypassStreamingEnabled:(_Bool)arg1;
- (_Bool)switchBypassStreamingUrl:(id)arg1;
- (_Bool)switchVideoQuality:(int)arg1;
- (_Bool)setVideoCodec:(int)arg1 toEncoder:(_Bool)arg2;
- (_Bool)setVideoMaxEncoderBitrate:(unsigned long long)arg1;
- (void)relogin:(int)arg1;
- (id)recordInfo;
- (void)setLogDelegate:(id)arg1;
- (void)sendAppData:(id)arg1 to:(unsigned long long)arg2;
- (void)setNetParam:(id)arg1;
- (void)setNetType:(unsigned int)arg1;
- (void)setChatMode:(unsigned short)arg1;
- (_Bool)setVideoMute:(_Bool)arg1;
- (int)currentCamera;
- (_Bool)isCameraRunning;
- (_Bool)setCamera:(_Bool)arg1;
- (int)currentVideoDevice;
- (void)switchVideoDevice:(int)arg1;
- (void)switchChatMode:(long long)arg1 keepSettings:(_Bool)arg2;
- (_Bool)setSpeake:(int)arg1;
- (_Bool)setMuteWithoutNotification:(int)arg1;
- (_Bool)setMute:(int)arg1;
- (id)getFirstReceiver;
- (void)stopReceivers;
- (void)restartChat;
- (void)stopChat;
- (int)doStartSession:(id)arg1;
- (void)startChat:(id)arg1 withMode:(long long)arg2;
- (void)startClient:(id)arg1;
- (void)startChat:(id)arg1;
- (_Bool)isVideoPreviewStarted;
- (_Bool)stopVideoPreview;
- (void)setVideoCaptureOrientation:(long long)arg1;
- (_Bool)startVideoPreview:(id)arg1;
- (void)removeListenEvents;
- (void)initListenEvents;
- (void)dealloc;
- (id)initWithLocalPlayerDelegate:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

