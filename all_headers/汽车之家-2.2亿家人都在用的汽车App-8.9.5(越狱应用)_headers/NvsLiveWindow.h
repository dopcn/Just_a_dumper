//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <GLKit/GLKView.h>

@class NvsLiveWindowShaderProgram;

@interface NvsLiveWindow : GLKView
{
    struct CNvLiveWindowHelper m_helper;
    struct TNvSmartPtr<INvVideoFrame> m_pJCurrentVideoFrame;
    long long m_currentVideoFrameStreamTime;
    _Bool m_currentVideoFramePresented;
    // Error parsing type: ^{CNvStreamingContext=^^?^^?^{INvStreamingContextCallback}{function<void (CNvProjObject *)>={type=[24C]}^{__base<void (CNvProjObject *)>}}iQ^{CNvStreamingEngine}^{CNvIconEngine}^{CNvProjContext}I{QString=^{QTypedArrayData<unsigned short>}}B^{CNvHardwareInfo}{QReadWriteLock={QAtomicPointer<QReadWriteLockPrivate>={atomic<QReadWriteLockPrivate *>=A^{QReadWriteLockPrivate}}}}{unordered_map<QString, SNvAVFileInfo *, std::__1::hash<QString>, std::__1::equal_to<QString>, std::__1::allocator<std::__1::pair<const QString, SNvAVFileInfo *> > >={__hash_table<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::__unordered_map_hasher<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::hash<QString>, true>, std::__1::__unordered_map_equal<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::equal_to<QString>, true>, std::__1::allocator<std::__1::__hash_value_type<QString, SNvAVFileInfo *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::hash<QString>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::equal_to<QString>, true> >=f}}}{unordered_map<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *, std::__1::hash<TNvSmartPtr<CNvProjTimeline> >, std::__1::equal_to<TNvSmartPtr<CNvProjTimeline> >, std::__1::allocator<std::__1::pair<const TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *> > >={__hash_table<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::__unordered_map_hasher<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::hash<TNvSmartPtr<CNvProjTimeline> >, true>, std::__1::__unordered_map_equal<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::equal_to<TNvSmartPtr<CNvProjTimeline> >, true>, std::__1::allocator<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::hash<TNvSmartPtr<CNvProjTimeline> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::equal_to<TNvSmartPtr<CNvProjTimeline> >, true> >=f}}}{unordered_map<unsigned long, CNvLiveWindowContainer *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CNvLiveWindowContainer *> > >={__hash_table<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::hash<unsigned long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::equal_to<unsigned long>, true> >=f}}}^{CNvLiveWindowContainer}{QReadWriteLock={QAtomicPointer<QReadWriteLockPrivate>={atomic<QReadWriteLockPrivate *>=A^{QReadWriteLockPrivate}}}}{unordered_map<int, CNvLiveWindowContainer *, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, CNvLiveWindowContainer *> > >={__hash_table<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, CNvLiveWindowContainer *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::hash<int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::equal_to<int>, true> >=f}}}^{CNvVideoFrameSynchronizer}^{QThread}{vector<TNvSmartPtr<CNvProjCaptureVideoFx>, std::__1::allocator<TNvSmartPtr<CNvProjCaptureVideoFx> > >=^{TNvSmartPtr<CNvProjCaptureVideoFx>}^{TNvSmartPtr<CNvProjCaptureVideoFx>}{__compressed_pair<TNvSmartPtr<CNvProjCaptureVideoFx> *, std::__1::allocator<TNvSmartPtr<CNvProjCaptureVideoFx> > >=^{TNvSmartPtr<CNvProjCaptureVideoFx>}}}{QString=^{QTypedArrayData<unsigned short>}}}, name: m_streamingContext
    NvsLiveWindowShaderProgram *m_shaderProgram;
    int _fillMode;
}

@property(nonatomic) int fillMode; // @synthesize fillMode=_fillMode;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (void)displayVideoFrame:(struct INvVideoFrame *)arg1 withTimestamp:(long long)arg2;
- (void)setDefaultVideoFrameRect:(const struct SNvRectF *)arg1;
- (void)setShaderProgram:(id)arg1;
-     // Error parsing type: v24@0:8^{CNvStreamingContext=^^?^^?^{INvStreamingContextCallback}{function<void (CNvProjObject *)>={type=[24C]}^{__base<void (CNvProjObject *)>}}iQ^{CNvStreamingEngine}^{CNvIconEngine}^{CNvProjContext}I{QString=^{QTypedArrayData<unsigned short>}}B^{CNvHardwareInfo}{QReadWriteLock={QAtomicPointer<QReadWriteLockPrivate>={atomic<QReadWriteLockPrivate *>=A^{QReadWriteLockPrivate}}}}{unordered_map<QString, SNvAVFileInfo *, std::__1::hash<QString>, std::__1::equal_to<QString>, std::__1::allocator<std::__1::pair<const QString, SNvAVFileInfo *> > >={__hash_table<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::__unordered_map_hasher<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::hash<QString>, true>, std::__1::__unordered_map_equal<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::equal_to<QString>, true>, std::__1::allocator<std::__1::__hash_value_type<QString, SNvAVFileInfo *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<QString, SNvAVFileInfo *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::hash<QString>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<QString, std::__1::__hash_value_type<QString, SNvAVFileInfo *>, std::__1::equal_to<QString>, true> >=f}}}{unordered_map<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *, std::__1::hash<TNvSmartPtr<CNvProjTimeline> >, std::__1::equal_to<TNvSmartPtr<CNvProjTimeline> >, std::__1::allocator<std::__1::pair<const TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *> > >={__hash_table<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::__unordered_map_hasher<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::hash<TNvSmartPtr<CNvProjTimeline> >, true>, std::__1::__unordered_map_equal<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::equal_to<TNvSmartPtr<CNvProjTimeline> >, true>, std::__1::allocator<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::hash<TNvSmartPtr<CNvProjTimeline> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TNvSmartPtr<CNvProjTimeline>, std::__1::__hash_value_type<TNvSmartPtr<CNvProjTimeline>, CNvStreamingContext::__SNvTimelineInfo *>, std::__1::equal_to<TNvSmartPtr<CNvProjTimeline> >, true> >=f}}}{unordered_map<unsigned long, CNvLiveWindowContainer *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CNvLiveWindowContainer *> > >={__hash_table<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::hash<unsigned long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CNvLiveWindowContainer *>, std::__1::equal_to<unsigned long>, true> >=f}}}^{CNvLiveWindowContainer}{QReadWriteLock={QAtomicPointer<QReadWriteLockPrivate>={atomic<QReadWriteLockPrivate *>=A^{QReadWriteLockPrivate}}}}{unordered_map<int, CNvLiveWindowContainer *, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, CNvLiveWindowContainer *> > >={__hash_table<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, CNvLiveWindowContainer *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::hash<int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, CNvLiveWindowContainer *>, std::__1::equal_to<int>, true> >=f}}}^{CNvVideoFrameSynchronizer}^{QThread}{vector<TNvSmartPtr<CNvProjCaptureVideoFx>, std::__1::allocator<TNvSmartPtr<CNvProjCaptureVideoFx> > >=^{TNvSmartPtr<CNvProjCaptureVideoFx>}^{TNvSmartPtr<CNvProjCaptureVideoFx>}{__compressed_pair<TNvSmartPtr<CNvProjCaptureVideoFx> *, std::__1::allocator<TNvSmartPtr<CNvProjCaptureVideoFx> > >=^{TNvSmartPtr<CNvProjCaptureVideoFx>}}}{QString=^{QTypedArrayData<unsigned short>}}}16, name: setStreamingContext:
- (id)takeScreenShot;
- (void)clearVideoFrame;
- (struct CGPoint)mapViewToNormalized:(struct CGPoint)arg1;
- (struct CGPoint)mapNormalizedToView:(struct CGPoint)arg1;
- (struct CGPoint)mapViewToCanonical:(struct CGPoint)arg1;
- (struct CGPoint)mapCanonicalToView:(struct CGPoint)arg1;
- (void)dealloc;
- (void)initLiveWindow;
- (id)initWithFrame:(struct CGRect)arg1 context:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;

@end

