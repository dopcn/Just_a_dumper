//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AVAsynchronousKeyValueLoading-Protocol.h"
#import "FNFAVAsset-Protocol.h"
#import "FNFAVPlayerItem-Protocol.h"
#import "FNFAssetForPlayer-Protocol.h"
#import "FNFAtomManagerDelegate-Protocol.h"
#import "FNFDashDataLoaderDelegate-Protocol.h"
#import "FNFDashDownloadTrackerDelegate-Protocol.h"
#import "FNFInfoForLoopableAsset-Protocol.h"
#import "FNFLiveAVPlayerAsset-Protocol.h"
#import "FNFPlaylistLoaderDelegate-Protocol.h"
#import "FNFTimeLoadedDelegate-Protocol.h"

@class AVAudioMix, FNFAdaptiveBitrateSelector, FNFAssetResourceLoader, FNFBufferSizeDecider, FNFDashPlaylistData, FNFDashPlaylistLoader, NSArray, NSError, NSMutableArray, NSString;
@protocol FNFBandwidthProvider, OS_dispatch_queue;

@interface FNFDashAsset : NSObject <FNFDashDownloadTrackerDelegate, AVAsynchronousKeyValueLoading, FNFAVAsset, FNFAVPlayerItem, FNFAssetForPlayer, FNFInfoForLoopableAsset, FNFAtomManagerDelegate, FNFDashDataLoaderDelegate, FNFPlaylistLoaderDelegate, FNFTimeLoadedDelegate, FNFLiveAVPlayerAsset>
{
    CDUnknownBlockType _assetLoadedHandler;
    FNFBufferSizeDecider *_bufferSizeDecider;
    FNFDashPlaylistData *_playlistData;
    FNFDashPlaylistLoader *_playlistLoader;
    FNFAssetResourceLoader *_resourceLoader;
    FNFAdaptiveBitrateSelector *_abrSelector;
    NSMutableArray *_downloadTrackers;
    CDUnknownBlockType _playerCheckForStallCallback;
    _Bool _hasFailed;
    _Bool _isStalled;
    _Bool _shouldShowBroadcasterInterruptedMessage;
    _Bool _sentStreamDryNotification;
    _Bool _assetLoaded;
    _Bool _waitingOnLoad;
    _Bool _bypassPrefetch;
    _Bool _async;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    double _loadingStartedTimestamp;
    _Bool _playlistWasParsed;
    _Bool _enablePrefetchLookupWhenBypassCache;
    _Bool _enableLiveMidstreamSwitch;
    _Bool _enableVodMidstreamSwitch;
    _Bool _enableWifiVODDiskCache;
    _Bool _enableCellVODDiskCache;
    _Bool _enableDiskCacheForFbCdnOnly;
    float _abrDiskCacheThreshold;
    long long _dashVodDiskCacheWifiNetworkConditionMask;
    long long _dashVodDiskCacheCellNetworkConditionMask;
    float _wifiDiskCacheStopBufferSizeInSec;
    float _cellDiskCacheStopBufferSizeInSec;
    float _wifiDiskCacheRestartBufferSizeInSec;
    float _cellDiskCacheRestartBufferSizeInSec;
    float _dashVodDiskCacheSafeMultiplier;
    _Bool _ignorePrefetchQualitySelection;
    int _segmentsFromEndToStartPrefetch;
    _Bool _dashVodInitFetchToFragmentBoundary;
    _Bool _hadInlineManifest;
    int _pauseReason;
    int _warningCount;
    NSError *_error;
    NSError *_loadingError;
    id <FNFBandwidthProvider> _bandwidthProvider;
    NSString *_userSelectedQuality;
    NSString *_resourceHost;
    struct FNFDashAssetPrefetchMetadata _prefetchMetadata;
}

@property(copy) NSString *resourceHost; // @synthesize resourceHost=_resourceHost;
@property(nonatomic) struct FNFDashAssetPrefetchMetadata prefetchMetadata; // @synthesize prefetchMetadata=_prefetchMetadata;
- (void).cxx_destruct;
- (unsigned long long)sidxEndOffsetForTrack:(long long)arg1 representationId:(id)arg2;
- (unsigned long long)sidxOffsetForSegmentIndex:(int)arg1 track:(long long)arg2 representationId:(id)arg3;
- (id)fetchingRepresentationIdForTrack:(long long)arg1;
- (id)abrSelector;
- (id)playlistData;
- (id)playlistLoader;
- (id)downloadTrackerForTrack:(long long)arg1;
- (_Bool)parsedHeadersForTrack:(long long)arg1 representationId:(id)arg2;
- (int)vodSegmentIndexForTrack:(long long)arg1;
- (id)dataLoaderForTrack:(long long)arg1 representationId:(id)arg2;
- (id)dataLoaderForTrack:(long long)arg1;
- (id)dataBlockDistributorForTrack:(long long)arg1;
- (int)segmentsParsedCountForTrack:(long long)arg1;
- (struct FNFSeekStatus)_segmentedSeekStatusForTime:(CDStruct_1b6d18a9)arg1 shouldUpdateOffset:(_Bool)arg2 shouldSeekAudio:(_Bool)arg3 newOffset:(unsigned long long)arg4;
- (void)_resetDataForSeekBack;
- (void)resetDataForSeekBackForTrack:(long long)arg1;
- (void)resetDataForSeekBack;
- (_Bool)shouldBufferVideoAsSoonAsPossible;
- (id)audioStreamExtraParameters;
- (struct AudioStreamBasicDescription)asbd;
- (struct opaqueCMFormatDescription *)formatDesc;
- (CDStruct_1b6d18a9)nextAbsoluteAudioTime;
- (CDStruct_1b6d18a9)videoTrackDuration;
- (void)advanceFrameForTrack:(long long)arg1;
- (_Bool)containsAudio;
- (const char *)currentFrameDataForTrack:(long long)arg1;
- (struct FNFFrameMetadata)currentFrameMetadataForTrack:(long long)arg1;
- (struct FNFSeekStatus)_segmentedVodSeekToPosition:(CDStruct_1b6d18a9)arg1;
- (int)_videoSegmentIndexForTime:(CDStruct_1b6d18a9)arg1;
- (_Bool)shouldResetAssetToBeginning;
- (_Bool)isDurationFinal;
- (_Bool)decompressedFramebuffer;
- (id)dispatchQueue;
@property(readonly, copy, nonatomic) NSArray *loadedTimeRanges;
@property(copy, nonatomic) AVAudioMix *audioMix;
- (_Bool)isPlaybackBufferFull;
- (_Bool)isPlaybackLikelyToKeepUp;
- (void)addOutput:(id)arg1;
- (id)accessLog;
- (id)tracksWithMediaType:(id)arg1;
- (void)cancelLoading;
- (void)_segmentedSeekDataLoaderToTime:(CDStruct_1b6d18a9)arg1 offset:(unsigned long long)arg2 shouldUpdateOffset:(_Bool)arg3 track:(long long)arg4;
- (void)_handleError:(id)arg1;
- (void)_handleWarning:(id)arg1;
- (_Bool)_previousFragmentedRequestFinishedAtBoundaryForTrack:(long long)arg1;
- (void)_updateFetchQualityAndLogWithRepId:(id)arg1 track:(long long)arg2;
- (_Bool)_shouldFetchDataForTrack:(long long)arg1;
- (void)_segmentedFetchForRepresentationId:(id)arg1 track:(long long)arg2;
- (void)_fragmentedFetchForRepresentationId:(id)arg1 track:(long long)arg2 range:(CDStruct_fb1c0d4a)arg3;
- (unsigned long long)_fragmentedNormalFetchEndOffsetForRepresentationId:(id)arg1 track:(long long)arg2;
- (unsigned long long)_fragmentedNormalFetchStartOffsetForRepresentationId:(id)arg1 track:(long long)arg2;
- (CDStruct_fb1c0d4a)_fragmentedSwitchedQualityInitializationFetchRangeForRepresentationId:(id)arg1 track:(long long)arg2;
- (CDStruct_fb1c0d4a)_fragmentedFirstQualityInitializationFetchRangeForRepresentationId:(id)arg1 track:(long long)arg2;
- (CDStruct_fb1c0d4a)_diskCacheFetchRangeForRepresentationId:(id)arg1 track:(long long)arg2 inMemoryFetchRange:(CDStruct_fb1c0d4a)arg3;
- (void)_potentiallyStartRequestForTrack:(long long)arg1;
- (unsigned long long)_nextDiskCacheOffset:(long long)arg1 startOffset:(unsigned long long)arg2;
- (unsigned long long)_diskCacheFetchLength:(long long)arg1;
- (_Bool)_shouldCancelDiskCacheForRepresentationId:(id)arg1 track:(long long)arg2;
- (_Bool)_shouldStartDiskCacheForRepresentationId:(id)arg1 track:(long long)arg2 qualitySelectResult:(int)arg3;
- (void)_potentiallyStartRequest;
- (void)_sendUndryNotificationIfApplicable;
- (void)_sendDryNotificationIfApplicable;
- (void)_updateTimeLoaded:(CDStruct_1b6d18a9)arg1;
- (void)_createDataLoaderForTrack:(id)arg1 track:(long long)arg2;
- (id)_dataForRep:(id)arg1 track:(long long)arg2;
- (double)nextLiveAudioTimestamp;
@property(readonly, nonatomic) int pauseReason;
- (struct CGSize)naturalSize;
- (id)resourceLoader;
- (void)didChangeValue;
- (void)willChangeValue;
- (_Bool)hasPlaybackFailed;
- (void)playlistUpdated;
- (void)loadingDidFailWithError:(id)arg1;
- (void)dataWasReceivedForTrack:(long long)arg1 representationId:(id)arg2 isComplete:(_Bool)arg3 allRequestedBytesReceived:(_Bool)arg4 forDiskCache:(_Bool)arg5;
- (int)unfetchedSegmentCountForTrack:(long long)arg1;
- (double)elapsedVideoTimestamp;
- (unsigned int)unfetchedSegmentCapHitCount;
- (unsigned long long)requestedBytesCount;
- (unsigned long long)receivedBytesCount;
- (void)didChangeResourceHost:(id)arg1;
- (_Bool)isAbrEnabled;
- (void)asyncLoadCurrentQualityWithHandler:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
- (void)asyncLoadAvailableQualitiesWithHandler:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
- (unsigned int)availableQualitiesCount;
- (_Bool)isLive;
- (id)audioRepresentationId;
- (id)representationId;
- (id)qualityLabel;
- (void)reportWarning:(id)arg1;
- (void)parsingDidFailWithError:(id)arg1;
- (struct FNFDashAssetPrefetchMetadata)getUpdatedPrefetchMetadataIfPossible;
- (id)audioChannelConfiguration;
- (id)projection;
- (id)_firstCharacterOfString:(id)arg1;
- (id)debugDetails;
- (void)playbackStarted;
- (void)playbackPauseRequested:(int)arg1;
- (CDStruct_1b6d18a9)timeAfterSeek;
@property(readonly, nonatomic) long long status;
- (CDStruct_1b6d18a9)currentTime;
- (void)addErrorToLog:(id)arg1 shouldStopPlayback:(_Bool)arg2;
- (id)asset;
- (id)mpdAccessibilityDescription;
@property(readonly, nonatomic) CDStruct_1b6d18a9 minBufferTime;
@property(readonly, nonatomic) CDStruct_1b6d18a9 maxBufferTime;
- (_Bool)shouldRestartAfterStalling;
- (_Bool)shouldPauseForStallingWithNextCheckCallback:(CDUnknownBlockType)arg1 stallReason:(int)arg2;
- (_Bool)trackHasMoreFrames:(long long)arg1;
- (id)audioCodec;
- (id)audioContainerFormat;
- (id)videoContainerFormat;
- (_Bool)containsTrack:(long long)arg1;
- (_Bool)seekToPosition:(CDStruct_1b6d18a9)arg1;
- (_Bool)resetAssetToBeginningIfNeeded;
- (void)requestErrorNotificationIfNeeded;
- (void)requestTimeLoadedUpdate;
- (CDStruct_1b6d18a9)duration;
- (long long)statusOfValueForKey:(id)arg1 error:(id *)arg2;
- (void)updatePlaybackTime:(CDStruct_1b6d18a9)arg1;
- (struct CGAffineTransform)preferredTransform;
- (double)loadingStartedTimestamp;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
@property(readonly, copy) NSString *description;
- (id)initWithConfig:(struct FNFDashAssetConfig)arg1 mpdData:(id)arg2 mpdUrl:(id)arg3 bandwidthProvider:(id)arg4 async:(_Bool)arg5 bypassPrefetch:(_Bool)arg6 userSelectedQuality:(id)arg7;
- (id)_initSynchronousWithConfig:(struct FNFDashAssetConfig)arg1 mpdData:(id)arg2 mpdUrl:(id)arg3 bandwidthProvider:(id)arg4 bypassPrefetch:(_Bool)arg5;
- (id)initWithConfig:(struct FNFDashAssetConfig)arg1 mpdData:(id)arg2 mpdUrl:(id)arg3 bandwidthProvider:(id)arg4 userSelectedQuality:(id)arg5;
- (id)initWithConfig:(struct FNFDashAssetConfig)arg1 mpdData:(id)arg2 mpdUrl:(id)arg3 bandwidthProvider:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

