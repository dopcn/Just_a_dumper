//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "UITextFieldDelegate-Protocol.h"

@class NSMutableDictionary, NSString, SIKProcessAlert, UIAlertView;
@protocol UIAlertViewDelegate;

@interface SIKNetworkManager : NSObject <UITextFieldDelegate>
{
    SEL requestDidFinishSelector;
    SEL requestDidFailSelector;
    id delegate;
    SIKProcessAlert *m_progressAlert;
    SIKProcessAlert *m_loadDictAlert;
    UIAlertView *m_messageAlertView;
    NSString *m_buildDate;
    NSString *m_userName;
    NSString *m_userPsw;
    NSString *m_keyUrl;
    NSString *m_keyContentStr;
    BOOL m_isRemeber;
    BOOL m_hasLogin;
    int m_netAppType;
    BOOL m_onlyNewVersionTip;
    double m_startTime;
    id <UIAlertViewDelegate> _alertViewDelegate;
    NSMutableDictionary *dict;
    NSString *dictPath;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)sharedManager;
@property(nonatomic) id <UIAlertViewDelegate> alertViewDelegate; // @synthesize alertViewDelegate=_alertViewDelegate;
@property(nonatomic) BOOL onlyNewVersionTip; // @synthesize onlyNewVersionTip=m_onlyNewVersionTip;
@property(readonly, nonatomic) BOOL hasLogin; // @synthesize hasLogin=m_hasLogin;
@property(retain, nonatomic) NSString *keyContentStr; // @synthesize keyContentStr=m_keyContentStr;
@property(retain, nonatomic) NSString *userPsw; // @synthesize userPsw=m_userPsw;
@property(retain, nonatomic) NSString *userName; // @synthesize userName=m_userName;
@property id delegate; // @synthesize delegate;
@property SEL requestDidFailSelector; // @synthesize requestDidFailSelector;
@property SEL requestDidFinishSelector; // @synthesize requestDidFinishSelector;
- (id)autorelease;
- (oneway void)release;
- (unsigned int)retainCount;
- (id)retain;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)checkPingback;
- (BOOL)checkTimeIsToPingBack:(char *)arg1;
- (void)checkDictUpdateComplete:(id)arg1;
- (void)checkDictUpdate;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2;
- (void)showLoadDictView;
- (void)showProgressViewWithTitle:(id)arg1 message:(id)arg2 net:(id)arg3;
- (void)showMessage:(id)arg1 withTitle:(id)arg2 buttonTitle:(id)arg3;
- (void)showMessage:(id)arg1 withTitle:(id)arg2 buttonTitle:(id)arg3 withDelegate:(id)arg4;
- (BOOL)textFieldShouldReturn:(id)arg1;
- (void)mergeDictComplete:(id)arg1;
- (void)uploadStatisticDataComplete:(id)arg1;
- (void)restoreComplete:(id)arg1;
- (void)loadDict;
- (void)backupComplete:(id)arg1;
- (void)feedbackComplete:(id)arg1;
- (void)regComplete:(id)arg1;
- (void)hideRegisterAlertView;
- (void)hideLoginAlertView;
- (void)save;
- (void)read;
- (void)reset;
- (void)logout;
- (void)updateVersionComplete:(id)arg1;
- (void)loginComplete:(id)arg1;
- (void)updateDictComplete:(id)arg1;
- (void)requestFailed:(id)arg1;
- (void)requestFinished:(id)arg1;
- (void)handleRegister;
- (void)showRegisterAlertView;
- (BOOL)checkName:(id)arg1 andPassword:(id)arg2;
- (void)handleLogin;
- (void)willPresentAlertView:(id)arg1;
- (void)showLoginAlertView;
- (BOOL)hasAutoLogin;
- (id)dictWordFilter:(id)arg1;
- (void)importContactDict;
- (void)importContactDictInBackground;
- (void)clearUserDict;
- (void)showClearUserDictAlertView;
- (void)clearContactDict;
- (void)showClearContactAlertView;
- (void)updateVersion;
- (void)restoreDict2;
- (void)handleMergeDict;
- (void)mergeDict;
- (void)restoreDict;
- (void)prepareForDict;
- (void)handleBackupDict;
- (void)backupDict;
- (void)sendFeedback:(id)arg1 withContact:(id)arg2;
- (void)userRegister:(id)arg1 password:(id)arg2;
- (void)userRegister:(id)arg1 password:(id)arg2 phoneNumber:(id)arg3 withDelegate:(id)arg4;
- (void)userLogin:(id)arg1 password:(id)arg2;
- (void)userLogin:(id)arg1 password:(id)arg2 isAutoLogin:(BOOL)arg3 withDelegate:(id)arg4;
- (void)dictUpdate;
- (void)softUpdate;
- (void)setNetworkApplicationType:(int)arg1;
- (BOOL)isHotWebFirstTime;
- (BOOL)isHotWebTime;
- (void)setHotWebTime;
- (BOOL)isHotWordTime;
- (void)setHotWordTime;
- (BOOL)isTimeForKey:(id)arg1;
- (BOOL)isTimeForKey:(id)arg1 duration:(double)arg2;
- (void)setTimeForKey:(id)arg1;
- (void)dealloc;
- (id)init;

@end

