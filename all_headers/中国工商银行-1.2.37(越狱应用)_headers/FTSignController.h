//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "MyAlertViewDelegate-Protocol.h"
#import "NewUIALertviewDelegate-Protocol.h"
#import "SafeInputDelegate-Protocol.h"
#import "ScreenshotDelegate-Protocol.h"
#import "UIAlertViewDelegate-Protocol.h"
#import "UIScrollViewDelegate-Protocol.h"
#import "UITextFieldDelegate-Protocol.h"

@class MyAlertView, NSMutableArray, NSString, NSThread, NSTimer, SafeInput, UIAlertView, UIButton, UIImageView, UIScrollView, UIView;

@interface FTSignController : UIViewController <MyAlertViewDelegate, UITextFieldDelegate, UIAlertViewDelegate, SafeInputDelegate, ScreenshotDelegate, NewUIALertviewDelegate, UIScrollViewDelegate>
{
    NSString *appurlname_str;
    NSString *message_type_str;
    NSString *session_ID_str;
    NSString *random_str;
    NSString *messageVersion;
    NSString *serial_number;
    NSString *U_CertCN;
    NSString *appversion_str;
    NSString *U_language;
    NSString *U_charset;
    NSString *sign_warning;
    NSString *Sign_Plaintext;
    NSString *Sign_XMLInfo;
    NSString *Sign_KeyInfo;
    NSString *Sign_FileInfo;
    NSString *HashAlg;
    NSString *U_KeyType;
    NSString *Reserve;
    NSString *SignInfo_User;
    NSString *FTkeyinfo;
    unsigned char pbModulus[4096];
    char *pbEncP7Sign;
    char *sign_data;
    char *xml_data;
    struct _PUBLIC_INFO_ST pPublic_info;
    unsigned char FTRetryTimes;
    SafeInput *safeInput;
    MyAlertView *myAlertView;
    UIAlertView *passwordAlert;
    UIViewController *SignCaller;
    UIView *newPINView;
    UIImageView *scrollIndexerImageView;
    UIScrollView *backScrollView;
    UIButton *ScreenState;
    long long deviceType;
    long long iErrorCode;
    long long bondCount;
    _Bool _isGetBLESNDone;
    _Bool _isGetBLESN;
    _Bool isKeyboardDown;
    _Bool isBleConnected;
    _Bool isCommonSignCanConnect;
    _Bool isContinueSign;
    id beginConnectDevice;
    id FTDelegate;
    SEL FTRetMethod;
    NSString *URLString;
    NSMutableArray *BLESNList;
    NSTimer *connectTimeoutTimer;
    NSTimer *waitAlertTimer;
    NSTimer *getBLESNTimer;
    NSThread *_callingThread;
    NSMutableArray *_dotArray;
}

@property(retain, nonatomic) NSMutableArray *dotArray; // @synthesize dotArray=_dotArray;
@property(retain, nonatomic) NSThread *callingThread; // @synthesize callingThread=_callingThread;
@property(retain, nonatomic) NSTimer *getBLESNTimer; // @synthesize getBLESNTimer;
@property(retain, nonatomic) NSTimer *waitAlertTimer; // @synthesize waitAlertTimer;
@property(retain, nonatomic) NSTimer *connectTimeoutTimer; // @synthesize connectTimeoutTimer;
@property(retain, nonatomic) NSMutableArray *BLESNList; // @synthesize BLESNList;
@property(retain, nonatomic) NSString *URLString; // @synthesize URLString;
@property(nonatomic) SEL FTRetMethod; // @synthesize FTRetMethod;
@property(retain, nonatomic) id FTDelegate; // @synthesize FTDelegate;
- (void).cxx_destruct;
- (void)startGetBLESN;
- (id)FTGetBLEDeviceSN:(id *)arg1 timeout:(float)arg2;
- (void)setBLESNDone;
- (void)getBLESNDone;
- (void)afterdelaySetVar;
- (void)FTDidFindBLEDevice:(id)arg1 SN:(id)arg2;
- (void)didTheDeviceDisconnected:(id)arg1 error:(long long)arg2;
- (void)didBLEHandshakeFailed:(long long)arg1;
- (void)didBLEHandshakeSuccess;
- (void)didMatchPairCancel;
- (void)didMatchPairFailed;
- (void)didMatchPairSuccess;
- (void)didTheDeviceBonded:(id)arg1;
- (void)didTheDeviceConnected:(id)arg1 ErrorCode:(long long)arg2;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)Pin_buttonClicked:(id)arg1;
- (void)keyDown:(id)arg1:(id)arg2;
- (void)closeKeyBoard;
- (_Bool)textField:(id)arg1 shouldChangeCharactersInRange:(struct _NSRange)arg2 replacementString:(id)arg3;
- (_Bool)textFieldShouldBeginEditing:(id)arg1;
- (void)showAlert;
- (void)beenScreen;
- (_Bool)textFieldShouldReturn:(id)arg1;
- (_Bool)textFieldShouldClear:(id)arg1;
- (void)retURLString;
- (void)FTRetNOKey;
- (void)setRightViewWithTextField:(id)arg1 imageName:(id)arg2;
- (void)bleContinueSign;
- (void)signInit;
- (void)Pin_buttonClickedNewUI:(long long)arg1;
- (void)PINInputAlertNewUIOKBtnClik:(id)arg1;
- (void)PINInputAlertNewUIBackBtnClick;
- (id)imageWithColor:(id)arg1;
- (void)showPINInputAlertNewUI:(_Bool)arg1 PINTimes:(unsigned char)arg2 errMsg:(id)arg3 delegate:(id)arg4;
- (void)didClickButtonAtIndex:(unsigned long long)arg1;
- (void)cleanTextField;
- (void)showNewPINPromptWithPINTimes:(id)arg1;
- (void)showPINInputAlert:(_Bool)arg1 PINTimes:(unsigned char)arg2 errMsg:(id)arg3 delegate:(id)arg4;
- (void)InitAlertView:(_Bool)arg1 errMsg:(id)arg2;
- (void)SecondInitAlertView:(id)arg1;
- (void)FirstinitAlertView;
- (void)SetScreenState;
- (void)initWithUIChcekkey;
- (void)initWithUI;
- (void)initWithNewUI;
- (void)scrollViewDidScroll:(id)arg1;
- (void)showSignInfo;
- (void)hideSignInfo;
- (id)getCurrentVC;
- (void)test;
- (void)keySign:(id)arg1;
- (void)FTdoSign:(id)arg1 theCaller:(id)arg2;
- (void)keyboardWillShow:(id)arg1;
- (void)FTINITDEVICE;
- (_Bool)checkBLESignSNPragma;
- (id)getCurrentU_KeyType;
- (void)BLEInit;
- (void)checkBLEState;
- (void)checkShowWaitAlertState;
- (void)checkConnectState;
- (void)showMsg:(id)arg1;
- (void)hideShowInitSign;
- (void)FTShowInitSign:(id)arg1;
- (void)hideShowInit;
- (void)FTShowInit:(id)arg1;
- (void)initShow:(id)arg1;
- (void)saveURL:(id)arg1;
- (void)setDeviceType:(long long)arg1;
- (struct _PUBLIC_INFO_ST *)selectCertByCN:(id)arg1;
- (void)URL:(id)arg1;
- (void)didReceiveMemoryWarning;
- (void)viewDidUnload;
- (void)viewDidLoad;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

