//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AQPlayer {
    struct OpaqueAudioQueue *_field1;
    struct AudioQueueBuffer *_field2[3];
    struct OpaqueAudioFileID *_field3;
    struct __CFString *_field4;
    struct CAStreamBasicDescription _field5;
    unsigned char _field6;
    unsigned int _field7;
    long long _field8;
    unsigned int _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
};

struct AQRecorder {
    _Bool _field1;
    struct OpaqueAudioQueue *_field2;
    struct AudioQueueBuffer *_field3[3];
    struct OpaqueAudioFileID *_field4;
    long long _field5;
    struct CAStreamBasicDescription _field6;
    struct CAStreamBasicDescription _field7;
    unsigned char _field8;
    struct SpeechEnhancer<NIM::NoiseEstimater_MMSE, NIM::SpectrumRestorer_MMSE> *_field9;
    struct AudioEncoder *_field10;
    id _field11;
    struct __sFILE *_field12;
    int _field13;
    struct mach_timebase_info _field14;
    double _field15;
};

struct Array;

struct AtomicSharedPtr<realm::_impl::CollectionNotifier, true> {
    struct shared_ptr<realm::_impl::CollectionNotifier> m_ptr;
};

struct AttitudeArray {
    struct MMAttitude *_field1;
    int _field2;
};

struct AudioEncoder;

struct AudioQueueBuffer;

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioStreamPacketDescription {
    long long _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct BacklinkColumn;

struct BasicRow<const realm::Table> {
    struct BasicTableRef<realm::Table> m_table;
    unsigned long long m_row_ndx;
    struct RowBase *m_prev;
    struct RowBase *m_next;
};

struct BasicRow<realm::Table> {
    struct BasicTableRef<realm::Table> m_table;
    unsigned long long m_row_ndx;
    struct RowBase *m_prev;
    struct RowBase *m_next;
};

struct BasicTableRef<realm::Table> {
    struct Table *m_ptr;
};

struct BinaryData {
    char *m_data;
    unsigned long long m_size;
};

struct BlockBasedTableOptions {
    struct shared_ptr<rocksdb::FlushBlockPolicyFactory> flush_block_policy_factory;
    _Bool cache_index_and_filter_blocks;
    _Bool cache_index_and_filter_blocks_with_high_priority;
    _Bool pin_l0_filter_and_index_blocks_in_cache;
    char index_type;
    _Bool hash_index_allow_collision;
    char checksum;
    _Bool no_block_cache;
    shared_ptr_066c1ae8 block_cache;
    struct shared_ptr<rocksdb::PersistentCache> persistent_cache;
    shared_ptr_066c1ae8 block_cache_compressed;
    unsigned long long block_size;
    int block_size_deviation;
    int block_restart_interval;
    int index_block_restart_interval;
    unsigned long long metadata_block_size;
    _Bool partition_filters;
    _Bool use_delta_encoding;
    struct shared_ptr<const rocksdb::FilterPolicy> filter_policy;
    _Bool whole_key_filtering;
    _Bool verify_compression;
    unsigned int read_amp_bytes_per_bit;
    unsigned int format_version;
};

struct BpTree<long long> {
    struct unique_ptr<realm::Array, std::__1::default_delete<realm::Array>> m_root;
};

struct CAStreamBasicDescription {
    double _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
};

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CBCmdNotifyParam {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    Property_b7a924c0 _field4;
};

struct CC_SHA256state_st {
    unsigned int _field1[2];
    unsigned int _field2[8];
    unsigned int _field3[16];
};

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CLSMachOFile {
    int fd;
    unsigned long long mappedSize;
    void *mappedFile;
};

struct CLSMachOSlice {
    void *startAddress;
    int cputype;
    int cpusubtype;
};

struct CMVideoSampling {
    void *cvTextureCache;
    void *cvTextureCacheTexture;
    void *cvImageBuffer;
};

struct Cache;

struct ChangesetCooker;

struct Chunk;

struct Cleanup {
    CDUnknownFunctionPointerType _field1;
    void *_field2;
    void *_field3;
    struct Cleanup *_field4;
};

struct CollectionChangeSet {
    struct IndexSet deletions;
    struct IndexSet insertions;
    struct IndexSet modifications;
    struct IndexSet modifications_new;
    struct vector<realm::CollectionChangeSet::Move, std::__1::allocator<realm::CollectionChangeSet::Move>> moves;
    struct vector<realm::IndexSet, std::__1::allocator<realm::IndexSet>> columns;
};

struct CollectionNotifier;

struct Column<long long> {
    CDUnknownFunctionPointerType *_vptr$ColumnBase;
    unsigned long long m_column_ndx;
    struct unique_ptr<realm::StringIndex, std::__1::default_delete<realm::StringIndex>> m_search_index;
    struct BpTree<long long> m_tree;
};

struct ColumnFamilyHandle {
    CDUnknownFunctionPointerType *_field1;
};

struct ColumnFamilyOptions {
    int max_write_buffer_number;
    int min_write_buffer_number_to_merge;
    int max_write_buffer_number_to_maintain;
    _Bool inplace_update_support;
    unsigned long long inplace_update_num_locks;
    CDUnknownFunctionPointerType inplace_callback;
    double memtable_prefix_bloom_size_ratio;
    unsigned long long memtable_huge_page_size;
    struct shared_ptr<const rocksdb::SliceTransform> memtable_insert_with_hint_prefix_extractor;
    unsigned int bloom_locality;
    unsigned long long arena_block_size;
    struct vector<rocksdb::CompressionType, std::__1::allocator<rocksdb::CompressionType>> compression_per_level;
    int num_levels;
    int level0_slowdown_writes_trigger;
    int level0_stop_writes_trigger;
    unsigned long long target_file_size_base;
    int target_file_size_multiplier;
    _Bool level_compaction_dynamic_level_bytes;
    double max_bytes_for_level_multiplier;
    struct vector<int, std::__1::allocator<int>> max_bytes_for_level_multiplier_additional;
    unsigned long long max_compaction_bytes;
    unsigned long long soft_pending_compaction_bytes_limit;
    unsigned long long hard_pending_compaction_bytes_limit;
    char compaction_style;
    char compaction_pri;
    struct CompactionOptionsUniversal compaction_options_universal;
    struct CompactionOptionsFIFO compaction_options_fifo;
    unsigned long long max_sequential_skip_in_iterations;
    struct shared_ptr<rocksdb::MemTableRepFactory> memtable_factory;
    struct vector<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>, std::__1::allocator<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>>> table_properties_collector_factories;
    unsigned long long max_successive_merges;
    _Bool optimize_filters_for_hits;
    _Bool paranoid_file_checks;
    _Bool force_consistency_checks;
    _Bool report_bg_io_stats;
    int max_mem_compaction_level;
    double soft_rate_limit;
    double hard_rate_limit;
    unsigned int rate_limit_delay_max_milliseconds;
    _Bool purge_redundant_kvs_while_flush;
    struct Comparator *comparator;
    struct shared_ptr<rocksdb::MergeOperator> merge_operator;
    struct CompactionFilter *compaction_filter;
    struct shared_ptr<rocksdb::CompactionFilterFactory> compaction_filter_factory;
    unsigned long long write_buffer_size;
    unsigned char compression;
    unsigned char bottommost_compression;
    struct CompressionOptions compression_opts;
    int level0_file_num_compaction_trigger;
    struct shared_ptr<const rocksdb::SliceTransform> prefix_extractor;
    unsigned long long max_bytes_for_level_base;
    _Bool disable_auto_compactions;
    struct shared_ptr<rocksdb::TableFactory> table_factory;
};

struct CompactionFilter;

struct CompactionFilterFactory;

struct CompactionOptionsFIFO {
    unsigned long long max_table_files_size;
    _Bool allow_compaction;
};

struct CompactionOptionsUniversal {
    unsigned int size_ratio;
    unsigned int min_merge_width;
    unsigned int max_merge_width;
    unsigned int max_size_amplification_percent;
    int compression_size_percent;
    int stop_style;
    _Bool allow_trivial_move;
};

struct Comparator {
    CDUnknownFunctionPointerType *_field1;
};

struct CompressionOptions {
    int window_bits;
    int level;
    int strategy;
    unsigned int max_dict_bytes;
};

struct Condition {
    int type;
    basic_string_a490aa4c user_id;
    struct pair<std::__1::basic_string<char>, std::__1::basic_string<char>> key_value;
};

struct Config {
    basic_string_a490aa4c path;
    struct BinaryData realm_data;
    struct vector<char, std::__1::allocator<char>> encryption_key;
    _Bool in_memory;
    unsigned char schema_mode;
    struct Optional<realm::Schema> schema;
    unsigned long long schema_version;
    struct function<void (std::__1::shared_ptr<realm::Realm>, std::__1::shared_ptr<realm::Realm>, realm::Schema &)> migration_function;
    struct function<void (std::__1::shared_ptr<realm::Realm>)> initialization_function;
    struct function<bool (unsigned long long, unsigned long long)> should_compact_on_launch_function;
    _Bool cache;
    _Bool disable_format_upgrade;
    _Bool automatic_change_notifications;
    struct Optional<unsigned long> execution_context;
    struct shared_ptr<realm::SyncConfig> sync_config;
    _Bool force_sync_history;
};

struct DB {
    CDUnknownFunctionPointerType *_field1;
};

struct DBOptions {
    _Bool create_if_missing;
    _Bool create_missing_column_families;
    _Bool error_if_exists;
    _Bool paranoid_checks;
    struct Env *env;
    struct shared_ptr<rocksdb::RateLimiter> rate_limiter;
    struct shared_ptr<rocksdb::SstFileManager> sst_file_manager;
    struct shared_ptr<rocksdb::Logger> info_log;
    unsigned char info_log_level;
    int max_open_files;
    int max_file_opening_threads;
    unsigned long long max_total_wal_size;
    struct shared_ptr<rocksdb::Statistics> statistics;
    _Bool use_fsync;
    struct vector<rocksdb::DbPath, std::__1::allocator<rocksdb::DbPath>> db_paths;
    basic_string_a490aa4c db_log_dir;
    basic_string_a490aa4c wal_dir;
    unsigned long long delete_obsolete_files_period_micros;
    int max_background_jobs;
    int base_background_compactions;
    int max_background_compactions;
    unsigned int max_subcompactions;
    int max_background_flushes;
    unsigned long long max_log_file_size;
    unsigned long long log_file_time_to_roll;
    unsigned long long keep_log_file_num;
    unsigned long long recycle_log_file_num;
    unsigned long long max_manifest_file_size;
    int table_cache_numshardbits;
    unsigned long long WAL_ttl_seconds;
    unsigned long long WAL_size_limit_MB;
    unsigned long long manifest_preallocation_size;
    _Bool allow_mmap_reads;
    _Bool allow_mmap_writes;
    _Bool use_direct_reads;
    _Bool use_direct_io_for_flush_and_compaction;
    _Bool allow_fallocate;
    _Bool is_fd_close_on_exec;
    _Bool skip_log_error_on_recovery;
    unsigned int stats_dump_period_sec;
    _Bool advise_random_on_open;
    unsigned long long db_write_buffer_size;
    struct shared_ptr<rocksdb::WriteBufferManager> write_buffer_manager;
    int access_hint_on_compaction_start;
    _Bool new_table_reader_for_compaction_inputs;
    unsigned long long compaction_readahead_size;
    unsigned long long random_access_max_buffer_size;
    unsigned long long writable_file_max_buffer_size;
    _Bool use_adaptive_mutex;
    unsigned long long bytes_per_sync;
    unsigned long long wal_bytes_per_sync;
    struct vector<std::__1::shared_ptr<rocksdb::EventListener>, std::__1::allocator<std::__1::shared_ptr<rocksdb::EventListener>>> listeners;
    _Bool enable_thread_tracking;
    unsigned long long delayed_write_rate;
    _Bool enable_pipelined_write;
    _Bool allow_concurrent_memtable_write;
    _Bool enable_write_thread_adaptive_yield;
    unsigned long long write_thread_max_yield_usec;
    unsigned long long write_thread_slow_yield_usec;
    _Bool skip_stats_update_on_db_open;
    char wal_recovery_mode;
    _Bool allow_2pc;
    shared_ptr_066c1ae8 row_cache;
    _Bool fail_if_options_file_error;
    _Bool dump_malloc_stats;
    _Bool avoid_flush_during_recovery;
    _Bool avoid_flush_during_shutdown;
    _Bool allow_ingest_behind;
};

struct DSPSplitComplex {
    float *realp;
    float *imagp;
};

struct DbPath;

struct Descriptor;

struct DescriptorOrdering {
    struct SortDescriptor sort;
    struct SortDescriptor distinct;
};

struct DynamicBehaviorParams {
    double pushMagnitude;
    double pushMagnitudeReversed;
    double pushMagnitudeEffected;
    double pushMagnitudeEffectedReversed;
    double dynamicResistance;
    double dynamicElasticity;
    _Bool isAllowedRotation;
    _Bool isAttachedToAnchor;
    double attachmentFrequency;
    double attachmentDumping;
    double attachmentLength;
    double collisionOffscreenWidth;
    double collisionOffscreenHeight;
};

struct Env;

struct FilterPolicy {
    CDUnknownFunctionPointerType *_field1;
};

struct FlushBlockPolicyFactory;

struct Handle<realm::_impl::ListNotifier> {
    struct ListNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct Handle<realm::_impl::ObjectNotifier> {
    struct ObjectNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct Handle<realm::_impl::ResultsNotifier> {
    struct ResultsNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct IAsynCallbackParam {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
};

struct ICMPHeader {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned short _field5;
};

struct IMUArray {
    struct MMIMU *_field1;
    int _field2;
};

struct IPv4Header {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned short _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned short _field8;
    unsigned char _field9[4];
    unsigned char _field10[4];
};

struct IndexSet {
    struct vector<realm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator<realm::_impl::ChunkedRangeVector::Chunk>> m_data;
};

struct InsightARCameraParam {
    int width;
    int height;
    float fov[2];
    float focalLength[2];
    float principalPoint[2];
    float distortionCoefficients[4];
    float projectionMatrix[4][4];
    float transformationIMU2Camera[2];
    int captureFps;
    int format;
    int sessionPreset;
    int devicePosition;
    int orientation;
    int focusMode;
    float lensPosition;
    float lensAperture;
    int exposureMode;
    float exposureDuration;
    float exposureBias;
    float iso;
    int whiteBalanceMode;
    float temperature;
    float tint;
    int torchMode;
    int flashMode;
};

struct InsightARCameraPose {
    float rotation[3][3];
    float translation[3];
    float quaternion[4];
    float center[3];
    float quaternion_opengl[4];
    float center_opengl[3];
    float quaternion_u3d[4];
    float center_u3d[3];
    float quaternion_imu[4];
    float center_imu[3];
};

struct InsightARResult {
    int sceneType;
    int state;
    int reason;
    struct InsightARCameraParam param;
    struct InsightARCameraPose camera;
    double timestamp;
};

struct Iterator {
    CDUnknownFunctionPointerType *_field1;
    struct Cleanup _field2;
};

struct LOT_Subpath {
    int _field1;
    double _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    struct CGPoint _field5;
    struct LOT_Subpath *_field6;
};

struct LinkView;

struct List {
    shared_ptr_130f66cc m_realm;
    struct ObjectSchema *m_object_schema;
    struct shared_ptr<realm::LinkView> m_link_view;
    struct Handle<realm::_impl::ListNotifier> m_notifier;
};

struct ListNotifier;

struct Logger;

struct MMAttitude;

struct MMIMU;

struct MemTableRepFactory {
    CDUnknownFunctionPointerType *_field1;
};

struct MergeOperator;

struct MintVideoInfo {
    char *_field1;
    long long _field2;
    long long _field3;
    double _field4;
    long long _field5;
};

struct Move;

struct NELPVideoInfo {
    char *_field1;
    long long _field2;
    long long _field3;
    double _field4;
    long long _field5;
};

struct NSMutableArray {
    Class _field1;
};

struct NotificationToken {
    struct AtomicSharedPtr<realm::_impl::CollectionNotifier, true> m_notifier;
    unsigned long long m_token;
};

struct Object {
    shared_ptr_130f66cc m_realm;
    struct ObjectSchema *m_object_schema;
    struct BasicRow<realm::Table> m_row;
    struct Handle<realm::_impl::ObjectNotifier> m_notifier;
};

struct ObjectNotifier;

struct ObjectSchema {
    basic_string_a490aa4c _field1;
    struct vector<realm::Property, std::__1::allocator<realm::Property>> _field2;
    struct vector<realm::Property, std::__1::allocator<realm::Property>> _field3;
    basic_string_a490aa4c _field4;
};

struct OpaqueAudioFileID;

struct OpaqueAudioQueue;

struct Optional<realm::Permission> {
    union {
        struct Permission m_value;
        char m_null_state;
    } ;
    _Bool m_engaged;
};

struct Optional<realm::Schema> {
    union {
        struct Schema m_value;
        char m_null_state;
    } ;
    _Bool m_engaged;
};

struct Optional<std::__1::array<char, 64>> {
    union {
        struct array<char, 64> _field1;
        char _field2;
    } _field1;
    _Bool _field2;
};

struct Optional<std::__1::basic_string<char>> {
    union {
        basic_string_a490aa4c _field1;
        char _field2;
    } _field1;
    _Bool _field2;
};

struct Optional<unsigned long long> {
    CDUnion_f76efdce ;
    _Bool m_engaged;
};

struct Optional<unsigned long> {
    CDUnion_f76efdce ;
    _Bool m_engaged;
};

struct Options {
    _Bool create_if_missing;
    _Bool create_missing_column_families;
    _Bool error_if_exists;
    _Bool paranoid_checks;
    struct Env *env;
    struct shared_ptr<rocksdb::RateLimiter> rate_limiter;
    struct shared_ptr<rocksdb::SstFileManager> sst_file_manager;
    struct shared_ptr<rocksdb::Logger> info_log;
    unsigned char info_log_level;
    int max_open_files;
    int max_file_opening_threads;
    unsigned long long max_total_wal_size;
    struct shared_ptr<rocksdb::Statistics> statistics;
    _Bool use_fsync;
    struct vector<rocksdb::DbPath, std::__1::allocator<rocksdb::DbPath>> db_paths;
    basic_string_a490aa4c db_log_dir;
    basic_string_a490aa4c wal_dir;
    unsigned long long delete_obsolete_files_period_micros;
    int max_background_jobs;
    int base_background_compactions;
    int max_background_compactions;
    unsigned int max_subcompactions;
    int max_background_flushes;
    unsigned long long max_log_file_size;
    unsigned long long log_file_time_to_roll;
    unsigned long long keep_log_file_num;
    unsigned long long recycle_log_file_num;
    unsigned long long max_manifest_file_size;
    int table_cache_numshardbits;
    unsigned long long WAL_ttl_seconds;
    unsigned long long WAL_size_limit_MB;
    unsigned long long manifest_preallocation_size;
    _Bool allow_mmap_reads;
    _Bool allow_mmap_writes;
    _Bool use_direct_reads;
    _Bool use_direct_io_for_flush_and_compaction;
    _Bool allow_fallocate;
    _Bool is_fd_close_on_exec;
    _Bool skip_log_error_on_recovery;
    unsigned int stats_dump_period_sec;
    _Bool advise_random_on_open;
    unsigned long long db_write_buffer_size;
    struct shared_ptr<rocksdb::WriteBufferManager> write_buffer_manager;
    int access_hint_on_compaction_start;
    _Bool new_table_reader_for_compaction_inputs;
    unsigned long long compaction_readahead_size;
    unsigned long long random_access_max_buffer_size;
    unsigned long long writable_file_max_buffer_size;
    _Bool use_adaptive_mutex;
    unsigned long long bytes_per_sync;
    unsigned long long wal_bytes_per_sync;
    struct vector<std::__1::shared_ptr<rocksdb::EventListener>, std::__1::allocator<std::__1::shared_ptr<rocksdb::EventListener>>> listeners;
    _Bool enable_thread_tracking;
    unsigned long long delayed_write_rate;
    _Bool enable_pipelined_write;
    _Bool allow_concurrent_memtable_write;
    _Bool enable_write_thread_adaptive_yield;
    unsigned long long write_thread_max_yield_usec;
    unsigned long long write_thread_slow_yield_usec;
    _Bool skip_stats_update_on_db_open;
    char wal_recovery_mode;
    _Bool allow_2pc;
    shared_ptr_066c1ae8 row_cache;
    _Bool fail_if_options_file_error;
    _Bool dump_malloc_stats;
    _Bool avoid_flush_during_recovery;
    _Bool avoid_flush_during_shutdown;
    _Bool allow_ingest_behind;
    int max_write_buffer_number;
    int min_write_buffer_number_to_merge;
    int max_write_buffer_number_to_maintain;
    _Bool inplace_update_support;
    unsigned long long inplace_update_num_locks;
    CDUnknownFunctionPointerType inplace_callback;
    double memtable_prefix_bloom_size_ratio;
    unsigned long long memtable_huge_page_size;
    struct shared_ptr<const rocksdb::SliceTransform> memtable_insert_with_hint_prefix_extractor;
    unsigned int bloom_locality;
    unsigned long long arena_block_size;
    struct vector<rocksdb::CompressionType, std::__1::allocator<rocksdb::CompressionType>> compression_per_level;
    int num_levels;
    int level0_slowdown_writes_trigger;
    int level0_stop_writes_trigger;
    unsigned long long target_file_size_base;
    int target_file_size_multiplier;
    _Bool level_compaction_dynamic_level_bytes;
    double max_bytes_for_level_multiplier;
    struct vector<int, std::__1::allocator<int>> max_bytes_for_level_multiplier_additional;
    unsigned long long max_compaction_bytes;
    unsigned long long soft_pending_compaction_bytes_limit;
    unsigned long long hard_pending_compaction_bytes_limit;
    char compaction_style;
    char compaction_pri;
    struct CompactionOptionsUniversal compaction_options_universal;
    struct CompactionOptionsFIFO compaction_options_fifo;
    unsigned long long max_sequential_skip_in_iterations;
    struct shared_ptr<rocksdb::MemTableRepFactory> memtable_factory;
    struct vector<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>, std::__1::allocator<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>>> table_properties_collector_factories;
    unsigned long long max_successive_merges;
    _Bool optimize_filters_for_hits;
    _Bool paranoid_file_checks;
    _Bool force_consistency_checks;
    _Bool report_bg_io_stats;
    int max_mem_compaction_level;
    double soft_rate_limit;
    double hard_rate_limit;
    unsigned int rate_limit_delay_max_milliseconds;
    _Bool purge_redundant_kvs_while_flush;
    struct Comparator *comparator;
    struct shared_ptr<rocksdb::MergeOperator> merge_operator;
    struct CompactionFilter *compaction_filter;
    struct shared_ptr<rocksdb::CompactionFilterFactory> compaction_filter_factory;
    unsigned long long write_buffer_size;
    unsigned char compression;
    unsigned char bottommost_compression;
    struct CompressionOptions compression_opts;
    int level0_file_num_compaction_trigger;
    struct shared_ptr<const rocksdb::SliceTransform> prefix_extractor;
    unsigned long long max_bytes_for_level_base;
    _Bool disable_auto_compactions;
    struct shared_ptr<rocksdb::TableFactory> table_factory;
};

struct PLCrashHostInfoVersion {
    unsigned long long major;
    unsigned long long minor;
    unsigned long long revision;
};

struct PLCrashReporterCallbacks {
    unsigned short _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
};

struct POPAnimatorItem;

struct Permission {
    basic_string_a490aa4c path;
    int access;
    struct Condition condition;
    struct Timestamp updated_at;
};

struct PermissionResults;

struct PersistentCache;

struct Query {
    basic_string_a490aa4c error_code;
    struct vector<realm::QueryGroup, std::__1::allocator<realm::QueryGroup>> m_groups;
    struct vector<unsigned long, std::__1::allocator<unsigned long>> m_subtable_path;
    struct shared_ptr<const realm::Descriptor> m_current_descriptor;
    struct BasicTableRef<realm::Table> m_table;
    struct RowIndexes *m_view;
    struct shared_ptr<realm::LinkView> m_source_link_view;
    struct TableViewBase *m_source_table_view;
    struct unique_ptr<realm::TableViewBase, std::__1::default_delete<realm::TableViewBase>> m_owned_source_table_view;
};

struct QueryGroup;

struct RLMClassInfo {
    id _field1;
    id _field2;
    struct ObjectSchema *_field3;
    struct vector<RLMObservationInfo *, std::__1::allocator<RLMObservationInfo *>> _field4;
    struct Table *_field5;
    struct vector<RLMClassInfo *, std::__1::allocator<RLMClassInfo *>> _field6;
};

struct RLMObservationInfo {
    struct RLMObservationInfo *_field1;
    struct RLMObservationInfo *_field2;
    struct BasicRow<realm::Table> _field3;
    struct RLMClassInfo *_field4;
    id _field5;
    _Bool _field6;
    unsigned long long _field7;
    id _field8;
    id _field9;
    id _field10;
};

struct RLMSchemaInfo {
    struct unordered_map<NSString *, RLMClassInfo, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, RLMClassInfo>>> m_objects;
};

struct RateLimiter;

struct ReadOptions {
    struct Snapshot *snapshot;
    struct Slice *iterate_upper_bound;
    unsigned long long readahead_size;
    unsigned long long max_skippable_internal_keys;
    int read_tier;
    _Bool verify_checksums;
    _Bool fill_cache;
    _Bool tailing;
    _Bool managed;
    _Bool total_order_seek;
    _Bool prefix_same_as_start;
    _Bool pin_data;
    _Bool background_purge_on_iterator_cleanup;
    _Bool ignore_range_deletions;
};

struct Realm;

struct Results {
    shared_ptr_130f66cc m_realm;
    struct ObjectSchema *m_object_schema;
    struct Query m_query;
    struct TableView m_table_view;
    struct shared_ptr<realm::LinkView> m_link_view;
    struct BasicTableRef<realm::Table> m_table;
    struct DescriptorOrdering m_descriptor_ordering;
    struct Handle<realm::_impl::ResultsNotifier> m_notifier;
    int m_mode;
    int m_update_policy;
    _Bool m_has_used_table_view;
    _Bool m_wants_background_updates;
};

struct ResultsNotifier;

struct RowBase;

struct RowIndexes;

struct SSState<POP::Vector4<double>> {
    struct Vector4<double> _field1;
    struct Vector4<double> _field2;
};

struct Schema {
    struct ObjectSchema *__begin_;
    struct ObjectSchema *__end_;
    struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema>> {
        struct ObjectSchema *__first_;
    } __end_cap_;
};

struct SimpleConverter {
    void *_field1;
};

struct Slice {
    char *_field1;
    unsigned long long _field2;
};

struct SliceTransform {
    CDUnknownFunctionPointerType *_field1;
};

struct Snapshot;

struct SortDescriptor {
    struct vector<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>, std::__1::allocator<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>>> m_columns;
    struct vector<bool, std::__1::allocator<bool>> m_ascending;
};

struct SpeechEnhancer<NIM::NoiseEstimater_MMSE, NIM::SpectrumRestorer_MMSE>;

struct SpringSolver<POP::Vector4<double>> {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct SSState<POP::Vector4<double>> _field8;
    struct Vector4<double> _field9;
    _Bool _field10;
};

struct SstFileManager;

struct Statistics;

struct Status {
    int _field1;
    int _field2;
    char *_field3;
};

struct StringIndex;

struct SyncConfig {
    shared_ptr_324a0594 _field1;
    basic_string_a490aa4c _field2;
    int _field3;
    struct function<void (const std::__1::basic_string<char>&, const realm::SyncConfig &, std::__1::shared_ptr<realm::SyncSession>)> _field4;
    function_0cf83702 _field5;
    struct shared_ptr<realm::sync::ClientHistory::ChangesetCooker> _field6;
    struct Optional<std::__1::array<char, 64>> _field7;
    _Bool _field8;
    struct Optional<std::__1::basic_string<char>> _field9;
};

struct SyncSession;

struct SyncUser;

struct Table;

struct TableFactory {
    CDUnknownFunctionPointerType *_field1;
};

struct TableView {
    CDUnknownFunctionPointerType *_vptr$RowIndexes;
    struct Column<long long> m_row_indexes;
    unsigned long long m_debug_cookie;
    struct BasicTableRef<realm::Table> m_table;
    struct BacklinkColumn *m_linked_column;
    struct BasicRow<const realm::Table> m_linked_row;
    struct shared_ptr<const realm::LinkView> m_linkview_source;
    unsigned long long m_distinct_column_source;
    struct SortDescriptor m_distinct_predicate;
    struct SortDescriptor m_sorting_predicate;
    struct Query m_query;
    unsigned long long m_start;
    unsigned long long m_end;
    unsigned long long m_limit;
    struct Optional<unsigned long long> m_last_seen_version;
    unsigned long long m_num_detached_refs;
};

struct TableViewBase;

struct TaggedBool<realm::IsIndexedTag> {
    _Bool _field1;
};

struct TaggedBool<realm::IsPrimaryTag> {
    _Bool _field1;
};

struct ThreadSafeReferenceBase;

struct Timestamp {
    long long m_seconds;
    int m_nanoseconds;
    _Bool m_is_null;
};

struct UIColor {
    Class _field1;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UIOffset {
    double _field1;
    double _field2;
};

struct Vector4<double> {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct WBSDKJKConstBuffer {
    struct WBSDKJKConstPtrRange _field1;
};

struct WBSDKJKConstPtrRange {
    char *_field1;
    unsigned long long _field2;
};

struct WBSDKJKEncodeCache {
    id _field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct WBSDKJKEncodeState {
    struct WBSDKJKManagedBuffer _field1;
    struct WBSDKJKManagedBuffer _field2;
    unsigned long long _field3;
    struct WBSDKJKFastClassLookup _field4;
    struct WBSDKJKEncodeCache _field5[1024];
    unsigned long long _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    id _field9;
    id _field10;
    SEL _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownBlockType _field13;
};

struct WBSDKJKFastClassLookup {
    void *_field1;
    void *_field2;
    void *_field3;
    void *_field4;
    void *_field5;
};

struct WBSDKJKHashTableEntry {
    unsigned long long _field1;
    id _field2;
    id _field3;
};

struct WBSDKJKManagedBuffer {
    struct WBSDKJKPtrRange _field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct WBSDKJKObjCImpCache {
    Class _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
};

struct WBSDKJKObjectStack {
    void **_field1;
    void **_field2;
    unsigned long long *_field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
};

struct WBSDKJKParseState {
    unsigned long long _field1;
    struct WBSDKJKConstBuffer _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    struct WBSDKJKParseToken _field9;
    struct WBSDKJKObjectStack _field10;
    struct WBSDKJKTokenCache _field11;
    struct WBSDKJKObjCImpCache _field12;
    id _field13;
    int _field14;
    _Bool _field15;
};

struct WBSDKJKParseToken {
    struct WBSDKJKConstPtrRange _field1;
    unsigned long long _field2;
    struct WBSDKJKTokenValue _field3;
    struct WBSDKJKManagedBuffer _field4;
};

struct WBSDKJKPtrRange {
    char *_field1;
    unsigned long long _field2;
};

struct WBSDKJKTokenCache {
    struct WBSDKJKTokenCacheItem *_field1;
    unsigned long long _field2;
    unsigned int _field3;
    unsigned char _field4[1024];
};

struct WBSDKJKTokenCacheItem;

struct WBSDKJKTokenValue {
    struct WBSDKJKConstPtrRange _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    union {
        long long _field1;
        unsigned long long _field2;
        double _field3;
    } _field4;
    struct WBSDKJKTokenCacheItem *_field5;
};

struct WriteBufferManager;

struct WriteOptions {
    _Bool sync;
    _Bool disableWAL;
    _Bool ignore_missing_column_families;
    _Bool no_slowdown;
    _Bool low_pri;
};

struct _IplImage {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    char _field6[4];
    char _field7[4];
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    struct _IplROI *_field13;
    struct _IplImage *_field14;
    void *_field15;
    struct _IplTileInfo *_field16;
    int _field17;
    char *_field18;
    int _field19;
    int _field20[4];
    int _field21[4];
    char *_field22;
};

struct _IplROI;

struct _IplTileInfo;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _PLCrashReportDecoder {
    struct _Plcrash__CrashReport *_field1;
};

struct _POPAnimationState {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    id _field4;
    unsigned long long _field5;
    double _field6;
    double _field7;
    double _field8;
    id _field9;
    CDUnknownBlockType _field10;
    CDUnknownBlockType _field11;
    CDUnknownBlockType _field12;
    CDUnknownBlockType _field13;
    id _field14;
    id _field15;
    double _field16;
    long long _field17;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct _Plcrash__CrashReport {
    struct _ProtobufCMessage _field1;
    struct _Plcrash__CrashReport__SystemInfo *_field2;
    struct _Plcrash__CrashReport__ApplicationInfo *_field3;
    unsigned long long _field4;
    struct _Plcrash__CrashReport__Thread **_field5;
    unsigned long long _field6;
    struct _Plcrash__CrashReport__BinaryImage **_field7;
    struct _Plcrash__CrashReport__Exception *_field8;
    struct _Plcrash__CrashReport__Signal *_field9;
    struct _Plcrash__CrashReport__ProcessInfo *_field10;
    struct _Plcrash__CrashReport__MachineInfo *_field11;
    struct _Plcrash__CrashReport__ReportInfo *_field12;
};

struct _Plcrash__CrashReport__ApplicationInfo {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    char *_field4;
};

struct _Plcrash__CrashReport__BinaryImage;

struct _Plcrash__CrashReport__Exception {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    unsigned long long _field4;
    struct _Plcrash__CrashReport__Thread__StackFrame **_field5;
};

struct _Plcrash__CrashReport__MachineInfo {
    struct _ProtobufCMessage _field1;
    char *_field2;
    struct _Plcrash__CrashReport__Processor *_field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct _Plcrash__CrashReport__ProcessInfo {
    struct _ProtobufCMessage _field1;
    char *_field2;
    unsigned int _field3;
    char *_field4;
    char *_field5;
    unsigned int _field6;
    int _field7;
    int _field8;
    unsigned long long _field9;
};

struct _Plcrash__CrashReport__Processor {
    struct _ProtobufCMessage _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
    unsigned long long _field5;
};

struct _Plcrash__CrashReport__ReportInfo;

struct _Plcrash__CrashReport__Signal {
    struct _ProtobufCMessage _field1;
    char *_field2;
    char *_field3;
    unsigned long long _field4;
    struct _Plcrash__CrashReport__Signal__MachException *_field5;
};

struct _Plcrash__CrashReport__Signal__MachException {
    struct _ProtobufCMessage _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long *_field4;
};

struct _Plcrash__CrashReport__Symbol {
    struct _ProtobufCMessage _field1;
    char *_field2;
    unsigned long long _field3;
    int _field4;
    unsigned long long _field5;
};

struct _Plcrash__CrashReport__SystemInfo {
    struct _ProtobufCMessage _field1;
    int _field2;
    int _field3;
    char *_field4;
    int _field5;
    long long _field6;
    char *_field7;
};

struct _Plcrash__CrashReport__Thread;

struct _Plcrash__CrashReport__Thread__StackFrame {
    struct _ProtobufCMessage _field1;
    unsigned long long _field2;
    struct _Plcrash__CrashReport__Symbol *_field3;
};

struct _ProtobufCMessage {
    struct _ProtobufCMessageDescriptor *_field1;
    unsigned int _field2;
    struct _ProtobufCMessageUnknownField *_field3;
};

struct _ProtobufCMessageDescriptor;

struct _ProtobufCMessageUnknownField;

struct __CFString;

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> *__next_;
};

struct __list_node_base<std::__1::basic_string<char>, void *> {
    struct __list_node_base<std::__1::basic_string<char>, void *> *_field1;
    struct __list_node_base<std::__1::basic_string<char>, void *> *_field2;
};

struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> *__prev_;
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> *__next_;
};

struct __list_node_base<unsigned long long, void *> {
    struct __list_node_base<unsigned long long, void *> *_field1;
    struct __list_node_base<unsigned long long, void *> *_field2;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _opaque_pthread_cond_t {
    long long __sig;
    char __opaque[40];
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _opaque_pthread_rwlock_t {
    long long __sig;
    char __opaque[192];
};

struct _xmlAttr {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlAttr *_field7;
    struct _xmlAttr *_field8;
    struct _xmlDoc *_field9;
    struct _xmlNs *_field10;
    int _field11;
    void *_field12;
};

struct _xmlDoc {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    int _field10;
    int _field11;
    struct _xmlDtd *_field12;
    struct _xmlDtd *_field13;
    struct _xmlNs *_field14;
    char *_field15;
    char *_field16;
    void *_field17;
    void *_field18;
    char *_field19;
    int _field20;
    struct _xmlDict *_field21;
    void *_field22;
    int _field23;
    int _field24;
};

struct _xmlDtd;

struct _xmlNode {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    struct _xmlNs *_field10;
    char *_field11;
    struct _xmlAttr *_field12;
    struct _xmlNs *_field13;
    void *_field14;
    unsigned short _field15;
    unsigned short _field16;
};

struct _xmlNs {
    struct _xmlNs *_field1;
    int _field2;
    char *_field3;
    char *_field4;
    void *_field5;
    struct _xmlDoc *_field6;
};

struct array<char, 64> {
    char _field1[64];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct data_segment {
    void *_field1;
    unsigned long long _field2;
    struct data_segment *_field3;
};

struct function<bool (unsigned long long, unsigned long long)> {
    struct type __buf_;
    struct __base<bool (unsigned long long, unsigned long long)> *__f_;
};

struct function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>;

struct function<void (const std::__1::basic_string<char>&, const realm::SyncConfig &, std::__1::shared_ptr<realm::SyncSession>)> {
    struct type _field1;
    struct __base<void (const std::__1::basic_string<char>&, const realm::SyncConfig &, std::__1::shared_ptr<realm::SyncSession>)> *_field2;
};

struct function<void (std::__1::shared_ptr<realm::Realm>)> {
    struct type __buf_;
    struct __base<void (std::__1::shared_ptr<realm::Realm>)> *__f_;
};

struct function<void (std::__1::shared_ptr<realm::Realm>, std::__1::shared_ptr<realm::Realm>, realm::Schema &)> {
    struct type __buf_;
    struct __base<void (std::__1::shared_ptr<realm::Realm>, std::__1::shared_ptr<realm::Realm>, realm::Schema &)> *__f_;
};

struct function<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> {
    struct type _field1;
    struct __base<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> *_field2;
};

struct gzFile_s {
    unsigned int _field1;
    char *_field2;
    long long _field3;
};

struct in6_addr {
    union {
        unsigned char _field1[16];
        unsigned short _field2[8];
        unsigned int _field3[4];
    } _field1;
};

struct in_addr {
    unsigned int _field1;
};

struct internal_state;

struct linkedit_data_command {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct list<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __list_node_base<std::__1::basic_string<char>, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::basic_string<char>, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem>>> {
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct list<unsigned long long, std::__1::allocator<unsigned long long>> {
    struct __list_node_base<unsigned long long, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long long, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct mach_header {
    unsigned int _field1;
    int _field2;
    int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct mach_timebase_info {
    unsigned int _field1;
    unsigned int _field2;
};

struct map<unsigned int, std::__1::basic_string<char>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::basic_string<char>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::basic_string<char>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::basic_string<char>>, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct pair<std::__1::basic_string<char>, std::__1::basic_string<char>> {
    basic_string_a490aa4c first;
    basic_string_a490aa4c second;
};

struct plcrash_exception_server_context {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    CDUnknownFunctionPointerType _field5;
    void *_field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    unsigned int _field9;
    _Bool _field10;
};

struct plcrash_mach_exception_port_set {
    unsigned int count;
    unsigned int masks[14];
    unsigned int ports[14];
    int behaviors[14];
    int flavors[14];
};

struct shared_ptr<POPAnimatorItem> {
    struct POPAnimatorItem *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const realm::Descriptor> {
    struct Descriptor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const realm::LinkView> {
    struct LinkView *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const rocksdb::FilterPolicy> {
    struct FilterPolicy *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const rocksdb::SliceTransform> {
    struct SliceTransform *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::LinkView> {
    struct LinkView *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::Realm> {
    struct Realm *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::SyncConfig> {
    struct SyncConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::SyncSession> {
    struct SyncSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::SyncUser> {
    struct SyncUser *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::_impl::CollectionNotifier> {
    struct CollectionNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::sync::ClientHistory::ChangesetCooker> {
    struct ChangesetCooker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<rocksdb::Cache> {
    struct Cache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::CompactionFilterFactory> {
    struct CompactionFilterFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::EventListener>;

struct shared_ptr<rocksdb::FlushBlockPolicyFactory> {
    struct FlushBlockPolicyFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::Logger> {
    struct Logger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::MemTableRepFactory> {
    struct MemTableRepFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::MergeOperator> {
    struct MergeOperator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::PersistentCache> {
    struct PersistentCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::RateLimiter> {
    struct RateLimiter *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::SstFileManager> {
    struct SstFileManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::Statistics> {
    struct Statistics *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::TableFactory> {
    struct TableFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rocksdb::TablePropertiesCollectorFactory>;

struct shared_ptr<rocksdb::WriteBufferManager> {
    struct WriteBufferManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct sockaddr_in6 {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned int _field4;
    struct in6_addr _field5;
    unsigned int _field6;
};

struct sockaddr_un {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[104];
};

struct thin_header {
    unsigned int _field1;
    unsigned int _field2;
    struct mach_header _field3;
};

struct timeval {
    long long tv_sec;
    int tv_usec;
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<RLMObservationInfo, std::__1::default_delete<RLMObservationInfo>> {
    struct __compressed_pair<RLMObservationInfo *, std::__1::default_delete<RLMObservationInfo>> {
        struct RLMObservationInfo *__first_;
    } __ptr_;
};

struct unique_ptr<id [], std::__1::default_delete<id []>> {
    struct __compressed_pair<__strong id *, std::__1::default_delete<id []>> {
        id *__first_;
    } __ptr_;
};

struct unique_ptr<realm::Array, std::__1::default_delete<realm::Array>> {
    struct __compressed_pair<realm::Array *, std::__1::default_delete<realm::Array>> {
        struct Array *__first_;
    } __ptr_;
};

struct unique_ptr<realm::PermissionResults, std::__1::default_delete<realm::PermissionResults>> {
    struct __compressed_pair<realm::PermissionResults *, std::__1::default_delete<realm::PermissionResults>> {
        struct PermissionResults *__first_;
    } __ptr_;
};

struct unique_ptr<realm::StringIndex, std::__1::default_delete<realm::StringIndex>> {
    struct __compressed_pair<realm::StringIndex *, std::__1::default_delete<realm::StringIndex>> {
        struct StringIndex *__first_;
    } __ptr_;
};

struct unique_ptr<realm::SyncConfig, std::__1::default_delete<realm::SyncConfig>> {
    struct __compressed_pair<realm::SyncConfig *, std::__1::default_delete<realm::SyncConfig>> {
        struct SyncConfig *__first_;
    } __ptr_;
};

struct unique_ptr<realm::TableViewBase, std::__1::default_delete<realm::TableViewBase>> {
    struct __compressed_pair<realm::TableViewBase *, std::__1::default_delete<realm::TableViewBase>> {
        struct TableViewBase *__first_;
    } __ptr_;
};

struct unique_ptr<realm::ThreadSafeReferenceBase, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
    struct __compressed_pair<realm::ThreadSafeReferenceBase *, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
        struct ThreadSafeReferenceBase *__first_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>, std::__1::default_delete<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>>> {
    struct __compressed_pair<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>*, std::__1::default_delete<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>>> {
        struct function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)> *__first_;
    } __ptr_;
};

struct unordered_map<NSString *, RLMClassInfo, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, RLMClassInfo>>> {
    struct __hash_table<std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, RLMClassInfo>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::hash<NSString *>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::equal_to<NSString *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unz_file_info_s {
    unsigned short _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned short _field9;
    unsigned short _field10;
    unsigned short _field11;
    unsigned short _field12;
    unsigned short _field13;
    unsigned int _field14;
    unsigned long long _field15;
};

struct unz_global_info_s {
    unsigned int _field1;
    unsigned int _field2;
    unsigned short _field3;
};

struct uregex;

struct vector<MMAttitude, std::__1::allocator<MMAttitude>> {
    struct MMAttitude *__begin_;
    struct MMAttitude *__end_;
    struct __compressed_pair<MMAttitude *, std::__1::allocator<MMAttitude>> {
        struct MMAttitude *__first_;
    } __end_cap_;
};

struct vector<MMIMU, std::__1::allocator<MMIMU>> {
    struct MMIMU *__begin_;
    struct MMIMU *__end_;
    struct __compressed_pair<MMIMU *, std::__1::allocator<MMIMU>> {
        struct MMIMU *__first_;
    } __end_cap_;
};

struct vector<RLMClassInfo *, std::__1::allocator<RLMClassInfo *>> {
    struct RLMClassInfo **_field1;
    struct RLMClassInfo **_field2;
    struct __compressed_pair<RLMClassInfo **, std::__1::allocator<RLMClassInfo *>> {
        struct RLMClassInfo **_field1;
    } _field3;
};

struct vector<RLMObservationInfo *, std::__1::allocator<RLMObservationInfo *>> {
    struct RLMObservationInfo **_field1;
    struct RLMObservationInfo **_field2;
    struct __compressed_pair<RLMObservationInfo **, std::__1::allocator<RLMObservationInfo *>> {
        struct RLMObservationInfo **_field1;
    } _field3;
};

struct vector<bool, std::__1::allocator<bool>> {
    unsigned long long *__begin_;
    unsigned long long __size_;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
        unsigned long long __first_;
    } __cap_alloc_;
};

struct vector<char, std::__1::allocator<char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<char *, std::__1::allocator<char>> {
        char *__first_;
    } __end_cap_;
};

struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>;

struct vector<int, std::__1::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *__first_;
    } __end_cap_;
};

struct vector<nimbiz::Property, std::__1::allocator<nimbiz::Property>> {
    struct Property *_field1;
    struct Property *_field2;
    struct __compressed_pair<nimbiz::Property *, std::__1::allocator<nimbiz::Property>> {
        struct Property *_field1;
    } _field3;
};

struct vector<realm::CollectionChangeSet::Move, std::__1::allocator<realm::CollectionChangeSet::Move>> {
    struct Move *__begin_;
    struct Move *__end_;
    struct __compressed_pair<realm::CollectionChangeSet::Move *, std::__1::allocator<realm::CollectionChangeSet::Move>> {
        struct Move *__first_;
    } __end_cap_;
};

struct vector<realm::IndexSet, std::__1::allocator<realm::IndexSet>> {
    struct IndexSet *__begin_;
    struct IndexSet *__end_;
    struct __compressed_pair<realm::IndexSet *, std::__1::allocator<realm::IndexSet>> {
        struct IndexSet *__first_;
    } __end_cap_;
};

struct vector<realm::Property, std::__1::allocator<realm::Property>> {
    struct Property *_field1;
    struct Property *_field2;
    struct __compressed_pair<realm::Property *, std::__1::allocator<realm::Property>> {
        struct Property *_field1;
    } _field3;
};

struct vector<realm::QueryGroup, std::__1::allocator<realm::QueryGroup>> {
    struct QueryGroup *__begin_;
    struct QueryGroup *__end_;
    struct __compressed_pair<realm::QueryGroup *, std::__1::allocator<realm::QueryGroup>> {
        struct QueryGroup *__first_;
    } __end_cap_;
};

struct vector<realm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator<realm::_impl::ChunkedRangeVector::Chunk>> {
    struct Chunk *__begin_;
    struct Chunk *__end_;
    struct __compressed_pair<realm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator<realm::_impl::ChunkedRangeVector::Chunk>> {
        struct Chunk *__first_;
    } __end_cap_;
};

struct vector<rocksdb::ColumnFamilyHandle *, std::__1::allocator<rocksdb::ColumnFamilyHandle *>> {
    struct ColumnFamilyHandle **_field1;
    struct ColumnFamilyHandle **_field2;
    struct __compressed_pair<rocksdb::ColumnFamilyHandle **, std::__1::allocator<rocksdb::ColumnFamilyHandle *>> {
        struct ColumnFamilyHandle **_field1;
    } _field3;
};

struct vector<rocksdb::CompressionType, std::__1::allocator<rocksdb::CompressionType>> {
    unsigned char *__begin_;
    unsigned char *__end_;
    struct __compressed_pair<rocksdb::CompressionType *, std::__1::allocator<rocksdb::CompressionType>> {
        unsigned char *__first_;
    } __end_cap_;
};

struct vector<rocksdb::DbPath, std::__1::allocator<rocksdb::DbPath>> {
    struct DbPath *__begin_;
    struct DbPath *__end_;
    struct __compressed_pair<rocksdb::DbPath *, std::__1::allocator<rocksdb::DbPath>> {
        struct DbPath *__first_;
    } __end_cap_;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_a490aa4c *_field1;
    basic_string_a490aa4c *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_a490aa4c *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<rocksdb::EventListener>, std::__1::allocator<std::__1::shared_ptr<rocksdb::EventListener>>> {
    struct shared_ptr<rocksdb::EventListener> *__begin_;
    struct shared_ptr<rocksdb::EventListener> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<rocksdb::EventListener>*, std::__1::allocator<std::__1::shared_ptr<rocksdb::EventListener>>> {
        struct shared_ptr<rocksdb::EventListener> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>, std::__1::allocator<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>>> {
    struct shared_ptr<rocksdb::TablePropertiesCollectorFactory> *__begin_;
    struct shared_ptr<rocksdb::TablePropertiesCollectorFactory> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>*, std::__1::allocator<std::__1::shared_ptr<rocksdb::TablePropertiesCollectorFactory>>> {
        struct shared_ptr<rocksdb::TablePropertiesCollectorFactory> *__first_;
    } __end_cap_;
};

struct vector<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>, std::__1::allocator<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>>> {
    struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>> *__begin_;
    struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>> *__end_;
    struct __compressed_pair<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>*, std::__1::allocator<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>>> {
        struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>> *__first_;
    } __end_cap_;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *__first_;
    } __end_cap_;
};

struct weak_ptr<realm::SyncSession> {
    struct SyncSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<realm::SyncUser> {
    struct SyncUser *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDUnknownFunctionPointerType *_vptr$Marshallable;
    struct map<unsigned int, std::__1::basic_string<char>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::basic_string<char>>>> props;
} Property_b7a924c0;

typedef struct {
    basic_string_a490aa4c _field1;
    unsigned char _field2;
    basic_string_a490aa4c _field3;
    basic_string_a490aa4c _field4;
    struct TaggedBool<realm::IsPrimaryTag> _field5;
    struct TaggedBool<realm::IsIndexedTag> _field6;
    unsigned long long _field7;
} Property_781cb545;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    unsigned short _field2;
} CDStruct_6a59ab51;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_7523a67d;

typedef struct {
    unsigned int major;
    unsigned int minor;
    unsigned int bugfix;
} CDStruct_e24ffa00;

typedef struct {
    unsigned int _field1;
    unsigned short _field2;
    unsigned int _field3;
} CDStruct_91b80c38;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    char *_field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_4355734a;

typedef struct {
    char *_field1;
    void *_field2;
    _Bool _field3;
    void *_field4;
    char *_field5;
    char *_field6;
    char *_field7;
    char *_field8;
    char *_field9;
    unsigned int _field10;
    _Bool _field11;
    _Bool _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
} CDStruct_1e2a2a70;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    float i;
    float j;
    float k;
    float s;
} CDStruct_596e5dd5;

typedef struct {
    float x;
    float y;
    float z;
} CDStruct_03942939;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    char *_field5;
    char *_field6;
    void *_field7;
    void *_field8;
    void *_field9;
    double _field10;
} CDStruct_a968096e;

typedef struct {
    long long version;
    void *info;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
} CDStruct_4210025a;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long _field1;
    int _field2;
} CDStruct_87dc826d;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    char _field1[33];
    _Bool _field2;
    CDStruct_e24ffa00 _field3;
    CDStruct_e24ffa00 _field4;
    struct {
        void *_field1;
        unsigned long long _field2;
        void *_field3;
        void *_field4;
        void *_field5;
    } _field5;
    struct CLSMachOSlice _field6;
    long long _field7;
} CDStruct_fad71a87;

typedef struct {
    CDStruct_596e5dd5 _field1;
    CDStruct_596e5dd5 _field2;
    CDStruct_596e5dd5 _field3;
    CDStruct_596e5dd5 _field4;
} CDStruct_7776181f;

typedef struct {
    _Bool _field1;
    _Bool _field2;
    struct CGRect _field3;
    struct CGRect _field4;
    double _field5;
    long long _field6;
    unsigned long long _field7;
} CDStruct_902a08d0;

typedef struct {
    void *_field1;
    int _field2;
    CDStruct_7776181f _field3;
    int _field4;
    CDStruct_596e5dd5 _field5;
    CDStruct_596e5dd5 _field6;
    int _field7;
    CDStruct_7776181f _field8;
} CDStruct_1f8fd59b;

// Template types
typedef struct SpringSolver<POP::Vector4<double>> {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct SSState<POP::Vector4<double>> _field8;
    struct Vector4<double> _field9;
    _Bool _field10;
} SpringSolver_fe820e75;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
} basic_string_a490aa4c;

typedef struct function<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> {
    struct type _field1;
    struct __base<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> *_field2;
} function_0cf83702;

typedef struct list<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __list_node_base<std::__1::basic_string<char>, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::basic_string<char>, void *>>> {
        unsigned long long _field1;
    } _field2;
} list_f20de06b;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem>>> {
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
} list_670f5810;

typedef struct list<unsigned long long, std::__1::allocator<unsigned long long>> {
    struct __list_node_base<unsigned long long, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long long, void *>>> {
        unsigned long long _field1;
    } _field2;
} list_8b50c42f;

typedef struct shared_ptr<POPAnimatorItem> {
    struct POPAnimatorItem *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1553c9f8;

typedef struct shared_ptr<realm::Realm> {
    struct Realm *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_130f66cc;

typedef struct shared_ptr<realm::SyncSession> {
    struct SyncSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3c92bca6;

typedef struct shared_ptr<realm::SyncUser> {
    struct SyncUser *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_324a0594;

typedef struct shared_ptr<rocksdb::Cache> {
    struct Cache *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_066c1ae8;

typedef struct unique_ptr<realm::PermissionResults, std::__1::default_delete<realm::PermissionResults>> {
    struct __compressed_pair<realm::PermissionResults *, std::__1::default_delete<realm::PermissionResults>> {
        struct PermissionResults *__first_;
    } __ptr_;
} unique_ptr_48be5826;

typedef struct unique_ptr<realm::ThreadSafeReferenceBase, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
    struct __compressed_pair<realm::ThreadSafeReferenceBase *, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
        struct ThreadSafeReferenceBase *__first_;
    } __ptr_;
} unique_ptr_c83a4463;

typedef struct vector<nimbiz::Property, std::__1::allocator<nimbiz::Property>> {
    struct Property *_field1;
    struct Property *_field2;
    struct __compressed_pair<nimbiz::Property *, std::__1::allocator<nimbiz::Property>> {
        struct Property *_field1;
    } _field3;
} vector_ef84b050;

typedef struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_a490aa4c *_field1;
    basic_string_a490aa4c *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_a490aa4c *_field1;
    } _field3;
} vector_9492931a;

#pragma mark Typedef'd Unions

typedef union {
    unsigned long long m_value;
    char m_null_state;
} CDUnion_f76efdce;

