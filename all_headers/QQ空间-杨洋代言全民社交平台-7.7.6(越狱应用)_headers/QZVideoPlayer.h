//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "QZAVHttpProxyTaskDelegate-Protocol.h"
#import "QZVideoPlayerCallbackProtocol-Protocol.h"

@class NSArray, NSMutableDictionary, NSString, QZAVHttpProxyManager, QZAVHttpProxyTask, QZVideoMediaInfo, UIView;
@protocol QZVideoPlayerConfigureDelegate, QZVideoPlayerProtocol;

@interface QZVideoPlayer : NSObject <QZVideoPlayerCallbackProtocol, QZAVHttpProxyTaskDelegate>
{
    NSObject<QZVideoPlayerProtocol> *_innerPlayer;
    NSString *_vid;
    NSString *_videoName;
    QZAVHttpProxyTask *_proxyTask;
    NSMutableDictionary *_segCacheProperty;
    _Bool _isFirstPlay;
    _Bool _hasObserverOnPlayer;
    _Bool _hasTimeoutCheck;
    long long _sessionIndex;
    long long _retryCount;
    NSArray *_videourls;
    unsigned long long _segNum;
    NSArray *_videoDurations;
    _Bool _isResignActived;
    long long _timeOutCount;
    _Bool _isDownloadCompleted;
    long long _currentspeed;
    NSString *_cacheFileId;
    double _curPlaybackPos;
    double _duration;
    _Bool _repeat;
    _Bool _enableCache;
    _Bool _isOnlyVoice;
    _Bool _isHLS;
    _Bool _isPlayCacheFile;
    _Bool _syncRelease;
    _Bool _enableResoureLoaderForAts;
    _Bool _autoPauseWhenInBackground;
    _Bool _startPlayWhenSetUrl;
    unsigned long long _playSessionId;
    long long _loadTimeOut;
    id <QZVideoPlayerConfigureDelegate> _configure;
    QZVideoMediaInfo *_mediaInfo;
    long long _playbackState;
    long long _dstPlaybackState;
    long long _errorCode;
    long long _downloadErrorCode;
    long long _errorTimes;
    QZAVHttpProxyManager *_proxy;
    CDUnknownBlockType _onPlaybackReady;
    CDUnknownBlockType _onPlaybackWaitData;
    CDUnknownBlockType _onPlaybackStartPlay;
    CDUnknownBlockType _onPlaybackFailed;
    CDUnknownBlockType _onPlaybackLoadFailed;
    CDUnknownBlockType _onPlaybackEnd;
    CDUnknownBlockType _onPlaybackWillStop;
    CDUnknownBlockType _onPlaybackStop;
    CDUnknownBlockType _onPlaybackWillPause;
    CDUnknownBlockType _onPlaybackPause;
    CDUnknownBlockType _onPlaybackProgress;
    CDUnknownBlockType _onPlaybackSectionChagne;
    CDUnknownBlockType _onPlayerLoadProgress;
    CDUnknownBlockType _onPlayerLoadSpeed;
    CDUnknownBlockType _onPlaybackStateChange;
    CDUnknownBlockType _onPlayerLoadComplete;
    CDUnknownBlockType _onGetResolution;
    long long _actionMask;
    struct CGSize _resolution;
}

@property(nonatomic) long long actionMask; // @synthesize actionMask=_actionMask;
@property(copy, nonatomic) CDUnknownBlockType onGetResolution; // @synthesize onGetResolution=_onGetResolution;
@property(copy, nonatomic) CDUnknownBlockType onPlayerLoadComplete; // @synthesize onPlayerLoadComplete=_onPlayerLoadComplete;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackStateChange; // @synthesize onPlaybackStateChange=_onPlaybackStateChange;
@property(copy, nonatomic) CDUnknownBlockType onPlayerLoadSpeed; // @synthesize onPlayerLoadSpeed=_onPlayerLoadSpeed;
@property(copy, nonatomic) CDUnknownBlockType onPlayerLoadProgress; // @synthesize onPlayerLoadProgress=_onPlayerLoadProgress;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackSectionChagne; // @synthesize onPlaybackSectionChagne=_onPlaybackSectionChagne;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackProgress; // @synthesize onPlaybackProgress=_onPlaybackProgress;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackPause; // @synthesize onPlaybackPause=_onPlaybackPause;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackWillPause; // @synthesize onPlaybackWillPause=_onPlaybackWillPause;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackStop; // @synthesize onPlaybackStop=_onPlaybackStop;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackWillStop; // @synthesize onPlaybackWillStop=_onPlaybackWillStop;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackEnd; // @synthesize onPlaybackEnd=_onPlaybackEnd;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackLoadFailed; // @synthesize onPlaybackLoadFailed=_onPlaybackLoadFailed;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackFailed; // @synthesize onPlaybackFailed=_onPlaybackFailed;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackStartPlay; // @synthesize onPlaybackStartPlay=_onPlaybackStartPlay;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackWaitData; // @synthesize onPlaybackWaitData=_onPlaybackWaitData;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackReady; // @synthesize onPlaybackReady=_onPlaybackReady;
@property(nonatomic) __weak QZAVHttpProxyManager *proxy; // @synthesize proxy=_proxy;
@property(nonatomic) _Bool startPlayWhenSetUrl; // @synthesize startPlayWhenSetUrl=_startPlayWhenSetUrl;
@property(nonatomic) _Bool autoPauseWhenInBackground; // @synthesize autoPauseWhenInBackground=_autoPauseWhenInBackground;
@property(nonatomic) _Bool enableResoureLoaderForAts; // @synthesize enableResoureLoaderForAts=_enableResoureLoaderForAts;
@property(nonatomic) _Bool syncRelease; // @synthesize syncRelease=_syncRelease;
@property(nonatomic) _Bool isPlayCacheFile; // @synthesize isPlayCacheFile=_isPlayCacheFile;
@property(nonatomic) long long errorTimes; // @synthesize errorTimes=_errorTimes;
@property(nonatomic) long long downloadErrorCode; // @synthesize downloadErrorCode=_downloadErrorCode;
@property(nonatomic) long long errorCode; // @synthesize errorCode=_errorCode;
@property(nonatomic) long long dstPlaybackState; // @synthesize dstPlaybackState=_dstPlaybackState;
@property(nonatomic) long long playbackState; // @synthesize playbackState=_playbackState;
@property(retain, nonatomic) QZVideoMediaInfo *mediaInfo; // @synthesize mediaInfo=_mediaInfo;
@property(retain, nonatomic) id <QZVideoPlayerConfigureDelegate> configure; // @synthesize configure=_configure;
@property(nonatomic) long long loadTimeOut; // @synthesize loadTimeOut=_loadTimeOut;
@property(nonatomic) struct CGSize resolution; // @synthesize resolution=_resolution;
@property(nonatomic) unsigned long long playSessionId; // @synthesize playSessionId=_playSessionId;
@property(nonatomic) _Bool isHLS; // @synthesize isHLS=_isHLS;
@property(nonatomic) _Bool isOnlyVoice; // @synthesize isOnlyVoice=_isOnlyVoice;
@property(nonatomic) _Bool enableCache; // @synthesize enableCache=_enableCache;
@property(nonatomic) _Bool repeat; // @synthesize repeat=_repeat;
- (void).cxx_destruct;
- (id)getVideoDebugInfo;
- (_Bool)isSupportH265;
- (long long)getNeedDownloadVideoSize;
- (void)onDidBecomeActive;
- (void)onWillResignActive;
- (void)updateFileProperty:(struct QZVideoFileProperty *)arg1 withClipNo:(long long)arg2;
- (struct QZVideoFileProperty)getFilePropertyByClipNo:(long long)arg1;
- (struct QZVideoFileProperty)cacheProperty;
- (void)task:(id)arg1 statisticConnect:(id)arg2;
- (void)task:(id)arg1 statisticFileSize:(long long)arg2 speed:(long long)arg3 netLoadSize:(long long)arg4 readCacheSize:(long long)arg5 offset:(long long)arg6 clipNo:(long long)arg7;
- (void)taskLoadComplete:(id)arg1;
- (void)task:(id)arg1 getFileSize:(long long)arg2;
- (void)task:(id)arg1 retryWithUrls:(id)arg2 durations:(id)arg3;
- (void)task:(id)arg1 downloadFailed:(id)arg2;
- (void)task:(id)arg1 statisticConnect:(id)arg2 clipNo:(long long)arg3;
- (void)task:(id)arg1 getFileSize:(long long)arg2 clipNo:(long long)arg3;
- (void)handleDownloadError:(id)arg1;
- (id)transError:(id)arg1;
- (void)clearTxSdkPlayId;
- (long long)getPlayIdFromUrl:(id)arg1 fileId:(id)arg2 segDuration:(double)arg3 segIndex:(long long)arg4 extInfo:(id)arg5;
- (id)getLocalHttpUrlFromURL:(id)arg1 segDuration:(double)arg2 segmentIndex:(long long)arg3;
- (void)playerOnPrepared;
- (void)playerOnGetResolution:(struct CGSize)arg1;
- (void)cancelCheckTimeOut;
- (void)checkTimeOut;
- (void)beginCheckTimeOutWithDelayTime:(double)arg1;
- (void)beginCheckTimeOut;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)retryNewUrl:(id)arg1 times:(id)arg2;
- (_Bool)checkToRetryWithError:(id)arg1;
- (id)getCommonPlayInfo;
- (void)updatePlaybackPos;
- (void)handleLoadProgressChange;
- (void)handlePlaybackProgress;
- (void)handleLoadStateChange;
- (void)handlePlaybackStateChangeTo:(long long)arg1;
- (void)handlePlaybackStatePaused;
- (void)updateContentUrls:(id)arg1;
- (double)duration;
- (double)volume;
- (void)setVolume:(double)arg1;
- (_Bool)isMuted;
- (void)setMuted:(_Bool)arg1;
@property(readonly, nonatomic) long long loadState;
- (double)cachePlayableDuration;
- (double)playableDuration;
- (void)getError:(CDUnknownBlockType)arg1;
- (double)currentTime;
- (void)getCurrentImage:(id)arg1 async:(_Bool)arg2 complete:(CDUnknownBlockType)arg3;
- (id)currentImage;
- (_Bool)isRunning;
- (_Bool)isPlayingV2;
- (_Bool)isRealPlaying;
- (_Bool)isPlaying;
- (void)seekToBegin;
- (id)getVideoFillMode;
- (void)setVideoFillMode:(id)arg1;
- (_Bool)setUrls:(id)arg1 durations:(id)arg2 startTime:(double)arg3 vid:(id)arg4 startPlay:(_Bool)arg5;
- (_Bool)setUrls:(id)arg1 durations:(id)arg2 startTime:(double)arg3 vid:(id)arg4;
- (void)notifyStateChanged;
- (void)resumeForSeek;
- (void)pauseForSeek;
- (_Bool)canContinueSeek;
- (void)seek:(double)arg1;
- (void)forceSetStateStoped;
- (void)stop;
- (void)pause:(_Bool)arg1;
- (_Bool)playInner;
- (_Bool)play;
- (_Bool)checkSysStateCanPlay;
- (void)setStrictCheckMode:(_Bool)arg1;
- (void)clearCallbackBlock;
- (void)unregisterPlayerStateObserver;
- (void)registerPlayerStateObserver;
- (_Bool)readyToPlay;
- (double)playRemainingTime;
- (double)loadRemainingTime;
- (_Bool)checkBufferCanPlay;
@property(readonly, nonatomic) UIView *view;
@property(readonly, nonatomic) long long sessionIndex;
- (void)dealloc;
- (void)reset;
- (Class)innerPlayerClass;
- (id)initWithFrame:(struct CGRect)arg1 playerClass:(Class)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

