//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "ACAudioPlayerDelegate-Protocol.h"

@class ACAudioPlayer, NSArray, NSMutableArray, NSOperationQueue, NSString, NSTimer;
@protocol APlayerDataSource, APlayerDelegate;

@interface APlayer : NSObject <ACAudioPlayerDelegate>
{
    ACAudioPlayer *_player;
    _Bool _needPostDownloadProgress;
    _Bool _hasPrepared;
    _Bool _needPause;
    NSOperationQueue *_playQueue;
    _Bool _isHeadphone;
    _Bool _replayGainEnabled;
    _Bool _EQEnabled;
    float _surround;
    float _pan;
    float _bass;
    int _preGain;
    int _ReverbCurrentPreset;
    int _EQType;
    int _EQCurrentPrset;
    int _frequencyCount;
    float _volume;
    unsigned long long _playState;
    NSMutableArray *_shuffleList;
    NSArray *_bandArray;
    NSArray *_effectArray;
    id <APlayerDataSource> _dataSource;
    long long _playIndex;
    unsigned long long _playMode;
    id <APlayerDelegate> _delegate;
    NSTimer *_intervalTimer;
    unsigned long long _bgTaskId;
}

+ (void)clearCache;
+ (int)createP2pEnvironmentProductID;
+ (void)initialize;
+ (void)initP2P;
+ (void)setAudioSessionActive;
@property unsigned long long bgTaskId; // @synthesize bgTaskId=_bgTaskId;
@property(retain, nonatomic) NSTimer *intervalTimer; // @synthesize intervalTimer=_intervalTimer;
@property(nonatomic) float volume; // @synthesize volume=_volume;
@property(nonatomic) _Bool EQEnabled; // @synthesize EQEnabled=_EQEnabled;
@property(nonatomic) int frequencyCount; // @synthesize frequencyCount=_frequencyCount;
@property(nonatomic) _Bool replayGainEnabled; // @synthesize replayGainEnabled=_replayGainEnabled;
@property(nonatomic) int EQCurrentPrset; // @synthesize EQCurrentPrset=_EQCurrentPrset;
@property(nonatomic) int EQType; // @synthesize EQType=_EQType;
@property(nonatomic) int ReverbCurrentPreset; // @synthesize ReverbCurrentPreset=_ReverbCurrentPreset;
@property(nonatomic) int preGain; // @synthesize preGain=_preGain;
@property(nonatomic) float bass; // @synthesize bass=_bass;
@property(nonatomic) float pan; // @synthesize pan=_pan;
@property(nonatomic) float surround; // @synthesize surround=_surround;
@property(nonatomic) _Bool isHeadphone; // @synthesize isHeadphone=_isHeadphone;
@property(nonatomic) __weak id <APlayerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned long long playMode; // @synthesize playMode=_playMode;
@property(nonatomic) long long playIndex; // @synthesize playIndex=_playIndex;
@property(nonatomic) __weak id <APlayerDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property(retain, nonatomic) NSArray *effectArray; // @synthesize effectArray=_effectArray;
@property(retain, nonatomic) NSArray *bandArray; // @synthesize bandArray=_bandArray;
@property(retain, nonatomic) NSMutableArray *shuffleList; // @synthesize shuffleList=_shuffleList;
@property(nonatomic) unsigned long long playState; // @synthesize playState=_playState;
- (void).cxx_destruct;
- (void)musicAudioSessionChangeByNew:(id)arg1;
- (void)musicAudioSessionChangeByOld:(id)arg1;
- (void)musicAudioSessionEndInterruption;
- (void)musicAudioSessionBeginInterruption;
- (void)musicAudioSessionInit:(id)arg1;
- (_Bool)canPlayForRouteString:(id)arg1;
- (void)removeAudioSessionlistener;
- (void)initializeAudioSessionlistener;
- (void)OnAdvertiseMentChange:(id)arg1 newStatus:(int)arg2 withAdID:(int)arg3 atPosition:(int)arg4;
- (void)audioPlayerSetMuxSegmentFinished:(id)arg1 successfully:(_Bool)arg2;
- (void)audioPlayerRenderNeedMoreData:(id)arg1;
- (void)audioPlayerEndInterruption:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)audioPlayerBeginInterruption:(id)arg1;
- (void)audioPlayerDecodeErrorDidOccur:(id)arg1 error:(id)arg2;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (void)audioPlayerRenderStart:(id)arg1;
- (void)audioPlayerDidPrepared:(id)arg1 successfully:(_Bool)arg2;
- (double)positionAd;
- (_Bool)setADDataSource:(id)arg1;
- (void)saveProperties:(_Bool)arg1;
- (void)loadProperties;
- (_Bool)bypassResumeAllEffect:(_Bool)arg1;
- (id)getFrequencyDataWithDataCount:(int)arg1;
@property(readonly) int nFrequencyDataMaxLevel;
@property(readonly) int nFrequencyDataMinLevel;
@property(readonly) int downloadProgressPoint;
- (void)setCustomBandArray:(id)arg1;
- (void)handleTimer:(id)arg1;
- (void)stopIntervalTimer;
- (void)startIntervalTimer;
- (_Bool)setFileSegmentRangeFromStart:(double)arg1 ToEndTime:(double)arg2;
- (_Bool)setFadeIn:(double)arg1 AndFadeOut:(double)arg2;
@property(readonly, nonatomic) double duration;
- (_Bool)hasPrepare;
@property(nonatomic) double currentTime;
- (void)playItem:(id)arg1 adPacket:(id)arg2;
- (void)setupPlayerSettings;
- (void)resume;
- (void)pause;
- (void)stop;
- (void)prev;
- (int)getAdvertisementDuration:(int)arg1;
- (int)getItemIndexAtIndex:(long long)arg1 offset:(long long)arg2;
@property(readonly) int nextPlayIndex;
- (void)next;
- (void)replay;
- (void)playAtIndex:(unsigned long long)arg1;
- (void)play;
- (void)reloadData;
- (void)setupShuffleList;
- (void)dealloc;
- (void)didEnterBackground;
- (void)willEnterForeground;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

