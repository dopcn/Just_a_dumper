//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "BDNHTTPSSecurityPolicyDelegate-Protocol.h"

@class BDNHTTPClient, NSString, NSURL;
@protocol BDNCachePluginProtocol, BDNDNSProxyPluginProtocol, BDNHTTPRequestEventPluginProtocol, BDNHTTPRequestSerialization, BDNHTTPResponseSerialization, BDNHTTPSPluginProtocol;

@interface BDNHTTPDispatcher : NSObject <BDNHTTPSSecurityPolicyDelegate>
{
    NSURL *_baseURL;
    BDNHTTPClient *_client;
    id <BDNCachePluginProtocol> _httpCachePlugin;
    id <BDNDNSProxyPluginProtocol> _dnsProxyPlugin;
    id <BDNHTTPSPluginProtocol> _httpsConfigPlugin;
    id <BDNHTTPRequestSerialization> _requestSerializerPlugin;
    id <BDNHTTPResponseSerialization> _responseSerializerPlugin;
    id <BDNHTTPRequestEventPluginProtocol> _requestEventPlugin;
}

@property(retain, nonatomic) id <BDNHTTPRequestEventPluginProtocol> requestEventPlugin; // @synthesize requestEventPlugin=_requestEventPlugin;
@property(retain, nonatomic) id <BDNHTTPResponseSerialization> responseSerializerPlugin; // @synthesize responseSerializerPlugin=_responseSerializerPlugin;
@property(retain, nonatomic) id <BDNHTTPRequestSerialization> requestSerializerPlugin; // @synthesize requestSerializerPlugin=_requestSerializerPlugin;
@property(retain, nonatomic) id <BDNHTTPSPluginProtocol> httpsConfigPlugin; // @synthesize httpsConfigPlugin=_httpsConfigPlugin;
@property(retain, nonatomic) id <BDNDNSProxyPluginProtocol> dnsProxyPlugin; // @synthesize dnsProxyPlugin=_dnsProxyPlugin;
@property(retain, nonatomic) id <BDNCachePluginProtocol> httpCachePlugin; // @synthesize httpCachePlugin=_httpCachePlugin;
@property(retain, nonatomic) BDNHTTPClient *client; // @synthesize client=_client;
@property(copy, nonatomic) NSURL *baseURL; // @synthesize baseURL=_baseURL;
- (void).cxx_destruct;
- (void)dnsproxyRequestFailure:(id)arg1 withIp:(id)arg2 domain:(id)arg3;
- (id)requestCachePolicyReturnCacheDataInExpirationTime:(id)arg1 cacheKey:(id)arg2 onCache:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)requestCachePolicyReturnCacheDataAndRequestNetwork:(id)arg1 cacheKey:(id)arg2 onCache:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)requestCachePolicyReturnCacheDataOnError:(id)arg1 cacheKey:(id)arg2 onCache:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)requestCachePolicyIgnoringLocalCacheData:(id)arg1 cacheKey:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (_Bool)responseHandledByETag:(id)arg1 requestOperation:(id)arg2 request:(id)arg3 responseModelClass:(Class)arg4 cacheKey:(id)arg5 cacheGroup:(id)arg6 success:(CDUnknownBlockType)arg7 failure:(CDUnknownBlockType)arg8;
- (id)httpRequestOperationByRequest:(id)arg1 uploadData:(id)arg2 downloadToPath:(id)arg3 cacheKey:(id)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)download:(id)arg1 withPath:(id)arg2 downloadProgress:(CDUnknownBlockType)arg3 onSuccess:(CDUnknownBlockType)arg4 onFailure:(CDUnknownBlockType)arg5;
- (id)upload:(id)arg1 withData:(id)arg2 uploadProgress:(CDUnknownBlockType)arg3 onSuccess:(CDUnknownBlockType)arg4 onFailure:(CDUnknownBlockType)arg5;
- (id)request:(id)arg1 onCache:(CDUnknownBlockType)arg2 onSuccess:(CDUnknownBlockType)arg3 onFailure:(CDUnknownBlockType)arg4;
- (id)request:(id)arg1 onSuccess:(CDUnknownBlockType)arg2 onFailure:(CDUnknownBlockType)arg3;
- (id)securityPolicy:(id)arg1 domainSetWithIp:(id)arg2;
@property(readonly, nonatomic) _Bool viaHTTPS;
- (id)requestParametersByRequest:(id)arg1;
- (void)removeCacheDataForGroup:(id)arg1;
- (id)cacheKeyForURL:(id)arg1 withParameters:(id)arg2 excludeKeys:(id)arg3;
- (id)cacheKeyForURL:(id)arg1 withParameters:(id)arg2;
- (id)initWithClient:(id)arg1 baseURL:(id)arg2;
- (id)initWithClient:(id)arg1;
- (id)initWithBaseURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

