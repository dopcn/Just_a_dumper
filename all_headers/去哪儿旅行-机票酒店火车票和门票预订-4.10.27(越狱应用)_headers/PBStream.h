//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class GCDAsyncSocket, GCDMulticastDelegate, NSArray, NSData, NSDate, NSMutableArray, NSMutableDictionary, NSRunLoop, NSString, NSThread, PBXmppParser, QIM_PB_XMPPJID, XMPPSRVResolver;
@protocol OS_dispatch_queue, OS_dispatch_source, PBXMPPStreamDelegate;

@interface PBStream : NSObject
{
    NSObject<OS_dispatch_queue> *willSendIqQueue;
    NSObject<OS_dispatch_queue> *willSendMessageQueue;
    NSObject<OS_dispatch_queue> *willSendPresenceQueue;
    NSObject<OS_dispatch_queue> *willReceiveIqQueue;
    NSObject<OS_dispatch_queue> *willReceiveMessageQueue;
    NSObject<OS_dispatch_queue> *willReceivePresenceQueue;
    NSObject<OS_dispatch_queue> *didReceiveIqQueue;
    NSObject<OS_dispatch_source> *connectTimer;
    GCDMulticastDelegate<PBXMPPStreamDelegate> *multicastDelegate;
    int state;
    GCDAsyncSocket *asyncSocket;
    unsigned long long numberOfBytesSent;
    unsigned long long numberOfBytesReceived;
    unsigned char flags;
    unsigned char config;
    NSString *hostName;
    unsigned short hostPort;
    _Bool autoStartTLS;
    NSDate *authenticationDate;
    QIM_PB_XMPPJID *myJID_setByClient;
    QIM_PB_XMPPJID *myJID_setByServer;
    QIM_PB_XMPPJID *remoteJID;
    double keepAliveInterval;
    NSObject<OS_dispatch_source> *keepAliveTimer;
    double lastSendReceiveTime;
    NSData *keepAliveData;
    NSMutableArray *registeredModules;
    NSMutableDictionary *autoDelegateDict;
    XMPPSRVResolver *srvResolver;
    NSArray *srvResults;
    unsigned long long srvResultsIndex;
    NSMutableArray *receipts;
    NSMutableArray *iqReceipts;
    NSThread *xmppUtilityThread;
    NSRunLoop *xmppUtilityRunLoop;
    id userTag;
    NSMutableArray *registeredFeatures;
    NSMutableArray *registeredStreamPreprocessors;
    NSMutableArray *registeredElementHandlers;
    PBXmppParser *pbXmppParser;
    NSMutableDictionary *_messageDic;
    int _loginType;
    NSObject<OS_dispatch_queue> *xmppQueue;
    void *xmppQueueTag;
    NSString *_password;
    long long _serviceTime;
    NSString *_remoteKey;
}

+ (void)xmppThreadIgnore:(id)arg1;
+ (void)xmppThreadStop;
+ (void)xmppThreadMain;
+ (void)testPBStream;
+ (id)generateUUID;
@property(retain, nonatomic) NSString *remoteKey; // @synthesize remoteKey=_remoteKey;
@property(nonatomic) long long serviceTime; // @synthesize serviceTime=_serviceTime;
@property(copy) NSString *password; // @synthesize password=_password;
@property(nonatomic) int loginType; // @synthesize loginType=_loginType;
@property(readonly) void *xmppQueueTag; // @synthesize xmppQueueTag;
@property(readonly) NSObject<OS_dispatch_queue> *xmppQueue; // @synthesize xmppQueue;
- (void).cxx_destruct;
- (void)unregisterModule:(id)arg1;
- (void)registerModule:(id)arg1;
- (void)readDataWithTimeout:(double)arg1 tag:(long long)arg2;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)sendProtobufMessage:(id)arg1 andGetReceipt:(id *)arg2;
- (void)sendProtobufMessage:(id)arg1;
- (id)syncIQMessage:(id)arg1;
- (id)syncIQMessage:(id)arg1 ToJid:(id)arg2;
- (void)cancelAllIQMessage;
- (void)failToSendMessage:(id)arg1 error:(id)arg2;
- (void)sendPresenceMessage:(id)arg1;
- (void)sendPresenceMessage:(id)arg1 ToJid:(id)arg2;
- (void)keepAlive;
- (void)setupKeepAliveTimer;
- (void)disconnectAfterSending;
- (void)disconnect;
- (void)disconnectWithError:(id)arg1;
- (_Bool)connectWithTimeout:(double)arg1 error:(id *)arg2;
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (void)srvResolver:(id)arg1 didNotResolveDueToError:(id)arg2;
- (void)srvResolver:(id)arg1 didResolveRecords:(id)arg2;
- (void)tryNextSrvResult;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)socketDidSecure:(id)arg1;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)socket:(id)arg1 didReceiveTrust:(struct __SecTrust *)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)doConnectTimeout;
- (void)endConnectTimeout;
- (void)startConnectTimeout:(double)arg1;
- (_Bool)isConnected;
- (_Bool)isConnecting;
- (_Bool)isDisconnected;
- (_Bool)authenticateWithPassword:(id)arg1 error:(id *)arg2;
- (id)authenticationDate;
- (void)setIsAuthenticated:(_Bool)arg1;
- (_Bool)isAuthenticated;
- (void)setResetByteCountPerConnection:(_Bool)arg1;
- (_Bool)resetByteCountPerConnection;
- (unsigned long long)numberOfBytesReceived;
- (unsigned long long)numberOfBytesSent;
- (void)setKeepAliveWhitespaceCharacter:(BOOL)arg1;
- (BOOL)keepAliveWhitespaceCharacter;
- (void)setKeepAliveInterval:(double)arg1;
- (double)keepAliveInterval;
- (id)remoteJID;
@property(copy) QIM_PB_XMPPJID *myJID;
- (void)setMyJID_setByServer:(id)arg1;
- (void)setMyJID_setByClient:(id)arg1;
@property _Bool autoStartTLS;
@property unsigned short hostPort;
@property(copy) NSString *hostName;
@property(readonly) int state;
- (void)setXmppUtilityRunLoop:(id)arg1;
- (id)xmppUtilityRunLoop;
- (id)xmppUtilityThread;
- (void)removeDelegate:(id)arg1;
- (void)removeDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)addDelegate:(id)arg1 delegateQueue:(id)arg2;
@property _Bool enableBackgroundingOnSocket;
- (id)init;
- (void)commonInit;
- (void)sendPriority:(int)arg1;
- (void)sendHeartBeat;
- (void)sendAuthWithKey:(id)arg1;
- (id)pwd_key_PLAIN:(_Bool)arg1;
- (void)sendBindMessage;
- (void)sendStartTLS;
- (void)sendWelcome;

@end

