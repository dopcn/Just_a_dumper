//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "KTVAUGraphController.h"

@class NSString;
@protocol KTVAUGraphPlayerDelegate;

@interface KTVAUGraphPlayer : KTVAUGraphController
{
    struct OpaqueAudioComponentInstance *lastUnit;
    struct OpaqueAudioComponentInstance *musiclastUnit;
    struct OpaqueAudioComponentInstance *denoiseUnit;
    int _songType;
    struct AudioStreamBasicDescription _asbd;
    int _humanPlayerNode;
    int _musicPlayerNode;
    int _denoiseNode;
    int _denoisePrerenderNode;
    int _reverbNode;
    int _pitchNode;
    int _humanVolumeNode;
    int _inputMixerNode;
    int _bandEQNode;
    int _limiterNode;
    int _compressorNode;
    int _C32fTo16iNode;
    int _C16iTo32fNode;
    int music_C32fTo16iNode;
    int music_C16iTo32fNode;
    int _timePitchNode;
    int _overloadCompressorNode;
    struct OpaqueExtAudioFile *_humanExtFileRef;
    struct OpaqueExtAudioFile *_musicExtFileRef;
    struct OpaqueAudioFileID *_humanFileID;
    struct OpaqueAudioFileID *_musicFileID;
    struct AudioStreamBasicDescription _humanFileASBD;
    struct AudioStreamBasicDescription _musicFileASBD;
    unsigned int _humanFileTotalFrames;
    unsigned int _musicFileTotalFrames;
    double _stepDuration;
    struct KTVEffectMode _effectMode;
    _Bool _isPlaying;
    _Bool _isGraphAddedEffectNodes;
    _Bool _clearAllEffects;
    struct AutoTune *_autoTune;
    struct DoubleYou *_doubleYou;
    struct HarmonicMix *_harmonic;
    struct Denoise *_denoise;
    struct Minions *_minion;
    struct DynamicDelay *_humanVoiceDelay;
    struct DynamicDelay *_musicVoiceDelay;
    float musicDBLinearValue;
    float humanDBLinearValue;
    double _musicPlayedTime;
    _Bool _autoFadeout;
    _Bool _isHarmonicOnlyChorus;
    _Bool _denoiseBypass;
    _Bool _isCurrentPCState;
    unsigned short _echoLevel;
    unsigned short _equalizerLevel;
    unsigned int _playedFrames;
    unsigned int _totalFramesToPlay;
    float _spaceOfFreeReverb;
    float _reverbOfFreeReverb;
    float _vocalGain;
    float _accompanyMax;
    NSString *_musicPathString;
    NSString *_humanPathString;
    NSString *_destPathString;
    NSString *_songMelPathString;
    long long _pitchLevel;
    id <KTVAUGraphPlayerDelegate> _delegate;
    double _dynamicDelayFromRecorder;
    double _sectionStartPoint;
}

@property(nonatomic) _Bool isCurrentPCState; // @synthesize isCurrentPCState=_isCurrentPCState;
@property(nonatomic) _Bool denoiseBypass; // @synthesize denoiseBypass=_denoiseBypass;
@property(nonatomic) double sectionStartPoint; // @synthesize sectionStartPoint=_sectionStartPoint;
@property(nonatomic) double dynamicDelayFromRecorder; // @synthesize dynamicDelayFromRecorder=_dynamicDelayFromRecorder;
@property(nonatomic) __weak id <KTVAUGraphPlayerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool isHarmonicOnlyChorus; // @synthesize isHarmonicOnlyChorus=_isHarmonicOnlyChorus;
@property(nonatomic) _Bool autoFadeout; // @synthesize autoFadeout=_autoFadeout;
@property(nonatomic) float accompanyMax; // @synthesize accompanyMax=_accompanyMax;
@property(nonatomic) float vocalGain; // @synthesize vocalGain=_vocalGain;
@property(nonatomic) float reverbOfFreeReverb; // @synthesize reverbOfFreeReverb=_reverbOfFreeReverb;
@property(nonatomic) float spaceOfFreeReverb; // @synthesize spaceOfFreeReverb=_spaceOfFreeReverb;
@property(nonatomic) long long pitchLevel; // @synthesize pitchLevel=_pitchLevel;
@property(retain, nonatomic) NSString *songMelPathString; // @synthesize songMelPathString=_songMelPathString;
@property(retain, nonatomic) NSString *destPathString; // @synthesize destPathString=_destPathString;
@property(retain, nonatomic) NSString *humanPathString; // @synthesize humanPathString=_humanPathString;
@property(retain, nonatomic) NSString *musicPathString; // @synthesize musicPathString=_musicPathString;
@property(nonatomic) unsigned short equalizerLevel; // @synthesize equalizerLevel=_equalizerLevel;
@property(nonatomic) unsigned int totalFramesToPlay; // @synthesize totalFramesToPlay=_totalFramesToPlay;
@property(nonatomic) unsigned int playedFrames; // @synthesize playedFrames=_playedFrames;
@property(nonatomic) unsigned short echoLevel; // @synthesize echoLevel=_echoLevel;
- (void).cxx_destruct;
- (int)findNodeForKey:(id)arg1;
- (double)regionPlayedTime;
- (double)currentPlayTime;
- (void)tick;
- (void)addNodesForDSPWithReverb:(_Bool)arg1;
- (void)addNodesForEQWithPitch:(_Bool)arg1;
- (void)addNodesForPitch;
- (void)adjustForCurrentDSPMode;
- (void)clearMinion;
- (void)clearDenoise;
- (void)clearHarmonic;
- (void)clearDoubleYou;
- (void)clearAutoTune;
- (void)clearDynamicDelays;
- (void)clearAllDspTool;
- (void)initMinion;
- (void)initHarmonic;
- (void)initDoubleYou;
- (void)initDenoise;
- (void)initAutoTune;
- (void)initDynamicDelays;
- (void)initAllDspTool;
- (void)changeToDSPModeWithReverb:(_Bool)arg1;
- (void)changeToEQModeWithPitch:(_Bool)arg1;
- (void)changeToPitchMode;
- (void)clearAllEffectNodes;
- (void)clearAllEffects;
- (void)removeRenderNotify;
- (void)stopPlayerUnit;
- (void)stop;
- (void)stopAndResetDuration:(_Bool)arg1;
- (void)pauseAtDurration:(double)arg1;
- (void)destroyAugraph;
- (void)startMusicPlayerAfterSeconds:(double)arg1;
- (void)startHumanPlayerAfterSeconds:(double)arg1;
- (void)resume;
- (void)playFromPosition:(double)arg1;
- (void)prepareToPlay;
- (_Bool)isPlaying;
- (void)adjustOnRouteChange;
- (void)addRouteChangeListener;
- (void)dealloc;
- (void)configureAudioSession;
- (id)initWithType:(int)arg1 melPath:(id)arg2;
- (void)setupMusicRegion:(double)arg1;
- (void)setupHumanRegion:(double)arg1;
- (void)openMusicFile;
- (void)openHumanFile;
- (void)onNotificationAudioRouteChange:(id)arg1;
@property(readonly, nonatomic) double audioLantency;
- (void)setIsPlaying:(_Bool)arg1;
- (float)outputMixerGain;
- (_Bool)isHarmonicValid;
- (_Bool)isSupportMelScore;
- (_Bool)isSupportSongFrame;
@property(nonatomic) float musicVolume;
@property(nonatomic) float humanVolume;
- (float)humanLinearDB;
- (void)resetMusicDanymicDelay:(float)arg1;
- (void)resetHumanDanymicDelay:(float)arg1;
- (void)applyCustomEffectWithModel:(id)arg1;
- (void)denoiseDSP:(struct AudioBufferList *)arg1;
- (void)musicrunDSP:(struct AudioBufferList *)arg1;
- (void)runDSP:(struct AudioBufferList *)arg1;

@end

