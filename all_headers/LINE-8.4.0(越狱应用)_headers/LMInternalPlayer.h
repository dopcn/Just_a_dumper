//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "AVAssetResourceLoaderDelegate-Protocol.h"
#import "AVAudioSessionDelegate-Protocol.h"
#import "NSURLConnectionDataDelegate-Protocol.h"
#import "NSURLConnectionDelegate-Protocol.h"

@class AVAssetResourceLoadingRequest, AVPlayer, AVPlayerItem, NSString, NSTimer, NSURL, NSURLConnection;
@protocol LMInternalPlayerDelegate;

@interface LMInternalPlayer : NSObject <AVAudioSessionDelegate, AVAssetResourceLoaderDelegate, NSURLConnectionDelegate, NSURLConnectionDataDelegate>
{
    _Bool _sessionActivated;
    CDStruct_1b6d18a9 _seekTime;
    CDStruct_1b6d18a9 _beginTime;
    _Bool _interrupted;
    NSTimer *_forcePauseTimer;
    AVAssetResourceLoadingRequest *_loadingRequest;
    NSURLConnection *_loadingConnection;
    NSString *_prevCategory;
    _Bool _needToPlayWhenInterruptEnded;
    _Bool _isScrubbing;
    unsigned long long _playerStatus;
    NSObject<LMInternalPlayerDelegate> *_playerContext;
    CDUnknownBlockType _playerObserverBlock;
    NSURL *_currentPlayURL;
    AVPlayerItem *_playerItem;
    AVPlayer *_player;
    id _playerObserver;
}

+ (id)avPlayerItemStatusToString:(long long)arg1;
+ (id)playerStatusToString:(unsigned long long)arg1;
@property(retain, nonatomic) id playerObserver; // @synthesize playerObserver=_playerObserver;
@property(retain, nonatomic) AVPlayer *player; // @synthesize player=_player;
@property(retain, nonatomic) AVPlayerItem *playerItem; // @synthesize playerItem=_playerItem;
@property(retain, nonatomic) NSURL *currentPlayURL; // @synthesize currentPlayURL=_currentPlayURL;
@property(nonatomic) _Bool isScrubbing; // @synthesize isScrubbing=_isScrubbing;
@property(nonatomic) _Bool needToPlayWhenInterruptEnded; // @synthesize needToPlayWhenInterruptEnded=_needToPlayWhenInterruptEnded;
@property(copy, nonatomic) CDUnknownBlockType playerObserverBlock; // @synthesize playerObserverBlock=_playerObserverBlock;
@property(nonatomic) __weak NSObject<LMInternalPlayerDelegate> *playerContext; // @synthesize playerContext=_playerContext;
@property(nonatomic) unsigned long long playerStatus; // @synthesize playerStatus=_playerStatus;
- (void).cxx_destruct;
- (void)clearPlayerItem;
- (unsigned long long)getPlayerStatus;
- (_Bool)isPlaying;
- (CDStruct_1b6d18a9)getDuration;
- (CDStruct_1b6d18a9)getCurrentTime;
- (void)endScrubbing:(double)arg1;
- (_Bool)beginScrubbing;
- (void)changePlayItemWithPlayURL:(id)arg1 seekTime:(CDStruct_1b6d18a9)arg2;
- (void)cancelInterrupted;
- (void)stopWithFadeoutEffect;
- (void)stop;
- (void)pause;
- (void)forcePause;
- (void)play;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (void)resourceLoader:(id)arg1 didCancelLoadingRequest:(id)arg2;
- (_Bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;
- (void)removePlayerObserver;
- (void)addPlayerObserver;
- (void)removePlayerItem;
- (void)addObserverToPlayerItem;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)invalidateTimer;
- (void)onLoadedTime:(CDStruct_e83c9415)arg1;
- (void)onPlaybackLikelyKeepup;
- (void)onBufferEmpty;
- (void)resetForcePauseTimer;
- (void)onFailedWithPlayer;
- (void)onFailedWithPlayerItem:(id)arg1;
- (void)onReadyToPlay;
- (void)endInterruptionWithFlags:(unsigned long long)arg1;
- (void)beginInterruption;
- (void)handleInterruption:(id)arg1;
- (void)internalEndInterruption:(_Bool)arg1;
- (void)internalBeginInterruption;
- (void)routeChanged:(id)arg1;
- (void)deactivateSession;
- (_Bool)activateSession;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

