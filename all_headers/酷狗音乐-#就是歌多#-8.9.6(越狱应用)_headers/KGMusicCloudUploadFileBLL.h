//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSArray, NSLock, NSMutableArray, NSMutableDictionary, YYThreadSafeArray;
@protocol OS_dispatch_queue;

@interface KGMusicCloudUploadFileBLL : NSObject
{
    NSObject<OS_dispatch_queue> *_addJobQueue;
    NSObject<OS_dispatch_queue> *_uploadJobSerialQueue;
    YYThreadSafeArray *_allUploadingSongs;
    NSMutableDictionary *_allUploadingSongDic;
    YYThreadSafeArray *_allUploadJobs;
    NSMutableDictionary *_allUploadJobDic;
    NSLock *_lock;
    NSMutableArray *_uploadQueue;
}

+ (id)keyOfLocalSong:(id)arg1;
+ (id)keyOfMusicCloudUploadJob:(id)arg1;
+ (id)keyOfMusicCloudSong:(id)arg1;
+ (unsigned long long)getAvailbleUseSize;
+ (_Bool)hasEnoughSpaceToUploadSong:(id)arg1;
+ (id)shareInstance;
@property(retain, nonatomic) NSMutableArray *uploadQueue; // @synthesize uploadQueue=_uploadQueue;
@property(retain, nonatomic) NSLock *lock; // @synthesize lock=_lock;
@property(retain, nonatomic) NSMutableDictionary *allUploadJobDic; // @synthesize allUploadJobDic=_allUploadJobDic;
@property(retain, nonatomic) YYThreadSafeArray *allUploadJobs; // @synthesize allUploadJobs=_allUploadJobs;
@property(retain, nonatomic) NSMutableDictionary *allUploadingSongDic; // @synthesize allUploadingSongDic=_allUploadingSongDic;
@property(retain, nonatomic) YYThreadSafeArray *allUploadingSongs; // @synthesize allUploadingSongs=_allUploadingSongs;
- (void).cxx_destruct;
- (void)sendUploadEndBiActionWithError:(id)arg1;
- (void)sendUploadBeginBiAction;
- (id)queryAllUploadedSongs;
- (id)queryAllUploadSongs;
- (id)queryAllUploadedSongDic;
- (id)queryAllUploadingSongs;
- (void)deleteMusicCloudFiles:(id)arg1 deleteUploadBlock:(CDUnknownBlockType)arg2;
- (void)insertMusicCloudFiles:(id)arg1 userId:(id)arg2 insertMusicCloudBlock:(CDUnknownBlockType)arg3;
- (_Bool)updateMusicCloudFilesForUploadStatus:(id)arg1 error:(id *)arg2;
- (_Bool)updateMusicCloudFileForUploadStatus:(id)arg1 error:(id *)arg2;
- (_Bool)updateMusicCloudFiles:(id)arg1 error:(id *)arg2;
- (void)loginHandler:(id)arg1;
- (void)logoutHandler:(id)arg1;
- (void)changeToNoNetWork:(id)arg1;
- (void)changeTo4G:(id)arg1;
- (void)notifyUploadCountChange:(long long)arg1;
- (void)notifyUploadStateChange:(id)arg1;
- (void)uploadFileFinishWithUploadJob:(id)arg1 userId:(id)arg2 uploadInitEntity:(id)arg3 partnumber:(long long)arg4 successBlock:(CDUnknownBlockType)arg5 failBlock:(CDUnknownBlockType)arg6;
- (void)uploadFileWithUploadJob:(id)arg1 userId:(id)arg2 uploadInitEntity:(id)arg3 progressBlock:(CDUnknownBlockType)arg4 successBlock:(CDUnknownBlockType)arg5 failBlock:(CDUnknownBlockType)arg6;
- (void)uploadFileInitWithUploadJob:(id)arg1 userId:(id)arg2 successBlock:(CDUnknownBlockType)arg3 failBlock:(CDUnknownBlockType)arg4;
- (void)requestUploadAuthorizationForUploadJob:(id)arg1 userId:(id)arg2 token:(id)arg3 filePath:(id)arg4 hash:(id)arg5 successBlock:(CDUnknownBlockType)arg6 failBlock:(CDUnknownBlockType)arg7;
- (id)addSongsToSongList:(id)arg1 songList:(id)arg2 error:(id *)arg3;
- (void)existSongInMusicCloud:(id)arg1 checkExistUploadSongBlock:(CDUnknownBlockType)arg2;
- (id)filterNoExistSongs:(id)arg1;
- (void)removeExistSong:(id)arg1 userId:(id)arg2;
- (void)uploadFaildHandler:(id)arg1 error:(id)arg2;
- (void)updateUploadJobStatus:(id)arg1 info:(id)arg2;
- (void)uploadStatusSuccess:(id)arg1 song:(id)arg2 userId:(id)arg3;
- (void)uploadStatusStop:(id)arg1;
- (void)uploadStatusFaild:(id)arg1 info:(id)arg2;
- (void)uploadStatusUploading:(id)arg1;
- (void)uploadStatusWaiting:(id)arg1;
- (void)removeUploadJob:(id)arg1;
- (void)removeUploadJobs:(id)arg1;
- (void)addUploadJob:(id)arg1;
- (id)nextJob;
- (void)removeUploadJobsFromQueue:(id)arg1;
- (void)addUploadJobToQueue:(id)arg1;
- (void)addSongsToSongDic:(id)arg1;
- (void)setUploadSongsToWaitingStatus:(id)arg1;
- (void)setAllUploadSongsToStopStatus;
- (void)setAllTaskFaildForNoNetWork:(_Bool)arg1;
- (void)finishUpload:(id)arg1;
- (void)scheduleUploadFaildHandler:(id)arg1 error:(id)arg2 sendAction:(_Bool)arg3;
- (void)scheduleUpload;
- (void)fillHashAndFilePath:(id)arg1;
- (id)createUploadJobWithSong:(id)arg1 error:(id)arg2;
- (_Bool)updateSongFilePath:(id)arg1;
- (void)stopUploadTask:(id)arg1;
- (void)stopAllUploadTask:(_Bool)arg1 actionCompleteBlock:(CDUnknownBlockType)arg2;
- (void)stopAllUploadTask:(CDUnknownBlockType)arg1;
- (void)resumeUploadTaskInfos:(id)arg1 addToUploadComplete:(CDUnknownBlockType)arg2;
- (void)insertUploadTaskInfo:(id)arg1 addToUploadComplete:(CDUnknownBlockType)arg2;
- (void)addUploadTaskInfos:(id)arg1 addToUploadComplete:(CDUnknownBlockType)arg2;
- (id)allUploadSongDic;
@property(readonly, nonatomic) NSArray *uploadingSongs;
- (void)registerNotification;
- (void)dealloc;
- (id)init;

@end

