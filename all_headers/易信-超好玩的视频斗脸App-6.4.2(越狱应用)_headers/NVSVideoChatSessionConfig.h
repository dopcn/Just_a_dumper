//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSString, NVSCallConfig;

@interface NVSVideoChatSessionConfig : NSObject
{
    unsigned int myVersion;
    unsigned int peerVersion;
    int audioCodec;
    int sampleRate;
    int peerNetType;
    int audioHeaderMajorVersion;
    int audioHeaderMinorVersion;
    _Bool _disableDeactivateAudioSession;
    _Bool _audioDenoise;
    _Bool _voiceDetect;
    _Bool _preferHDAudio;
    _Bool _peerNotSupportHDAudio;
    _Bool _disableAutoRotateRemoteVideo;
    _Bool _provideLocalVideo;
    _Bool _provideLocalAudio;
    _Bool _closeAudio;
    _Bool _shouldReduceVideoFrameRate;
    int targetAudioFrameSize;
    int _audioFrameSize;
    unsigned int _audioEncoderInitBitrate;
    unsigned int _videoEncoderInitBitrate;
    float _videoCropRatio;
    int _videoFormat;
    int _preferredVideoQuality;
    int _videoEncoder;
    int _videoDecoder;
    int _peerSupportedDimens;
    unsigned long long _channelID;
    unsigned long long _videoMaxEncodeBitrate;
    unsigned long long _videoFrameRate;
    NSString *_bypassStreamingUrl;
    long long _videoCaptureOrientation;
    NVSCallConfig *_callConfig;
}

+ (_Bool)cameraSupport720P;
+ (int)videoDimensByQuality:(int)arg1 defaultDimens:(int)arg2;
+ (int)alignVideoDimens:(int)arg1;
+ (int)selectedVideoDimen:(int)arg1;
+ (int)suggestedVideoDimen;
+ (void)adjustAudioRates:(id)arg1 netIndex:(int)arg2;
+ (id)getNetParam:(int)arg1 codec:(int)arg2;
+ (int)enmuFrameSize2Int:(int)arg1;
+ (double)enmuSampleRate2Float:(int)arg1;
+ (id)shareInstance;
@property(retain, nonatomic) NVSCallConfig *callConfig; // @synthesize callConfig=_callConfig;
@property(nonatomic) _Bool shouldReduceVideoFrameRate; // @synthesize shouldReduceVideoFrameRate=_shouldReduceVideoFrameRate;
@property(nonatomic) long long videoCaptureOrientation; // @synthesize videoCaptureOrientation=_videoCaptureOrientation;
@property(copy, nonatomic) NSString *bypassStreamingUrl; // @synthesize bypassStreamingUrl=_bypassStreamingUrl;
@property(nonatomic) _Bool closeAudio; // @synthesize closeAudio=_closeAudio;
@property(nonatomic) _Bool provideLocalAudio; // @synthesize provideLocalAudio=_provideLocalAudio;
@property(nonatomic) _Bool provideLocalVideo; // @synthesize provideLocalVideo=_provideLocalVideo;
@property(nonatomic) int peerSupportedDimens; // @synthesize peerSupportedDimens=_peerSupportedDimens;
@property(nonatomic) unsigned long long videoFrameRate; // @synthesize videoFrameRate=_videoFrameRate;
@property(nonatomic) int videoDecoder; // @synthesize videoDecoder=_videoDecoder;
@property(nonatomic) int videoEncoder; // @synthesize videoEncoder=_videoEncoder;
@property(nonatomic) unsigned long long videoMaxEncodeBitrate; // @synthesize videoMaxEncodeBitrate=_videoMaxEncodeBitrate;
@property(nonatomic) _Bool disableAutoRotateRemoteVideo; // @synthesize disableAutoRotateRemoteVideo=_disableAutoRotateRemoteVideo;
@property(nonatomic) _Bool peerNotSupportHDAudio; // @synthesize peerNotSupportHDAudio=_peerNotSupportHDAudio;
@property(nonatomic) _Bool preferHDAudio; // @synthesize preferHDAudio=_preferHDAudio;
@property(nonatomic) _Bool voiceDetect; // @synthesize voiceDetect=_voiceDetect;
@property(nonatomic) _Bool audioDenoise; // @synthesize audioDenoise=_audioDenoise;
@property(nonatomic) _Bool disableDeactivateAudioSession; // @synthesize disableDeactivateAudioSession=_disableDeactivateAudioSession;
@property(nonatomic) int preferredVideoQuality; // @synthesize preferredVideoQuality=_preferredVideoQuality;
@property(nonatomic) int videoFormat; // @synthesize videoFormat=_videoFormat;
@property(nonatomic) float videoCropRatio; // @synthesize videoCropRatio=_videoCropRatio;
@property(nonatomic) unsigned int videoEncoderInitBitrate; // @synthesize videoEncoderInitBitrate=_videoEncoderInitBitrate;
@property(nonatomic) unsigned int audioEncoderInitBitrate; // @synthesize audioEncoderInitBitrate=_audioEncoderInitBitrate;
@property(nonatomic) int audioFrameSize; // @synthesize audioFrameSize=_audioFrameSize;
@property(nonatomic) unsigned long long channelID; // @synthesize channelID=_channelID;
@property(nonatomic) int targetAudioFrameSize; // @synthesize targetAudioFrameSize;
- (void).cxx_destruct;
- (int)videoFormatValue;
- (void)setVideoCrop:(int)arg1;
- (_Bool)useHDAudio;
- (_Bool)useVideoHWDecoder;
- (_Bool)useVideoHWEncoder;
- (_Bool)supportVideoHWCodec;
- (unsigned long long)videoCaptureFrameRate;
- (float)videoScaleFor480x320;
- (_Bool)force24BytesHeader;
- (_Bool)useNewVideoHeader;
- (_Bool)useFFDecoder;
- (int)netRateIndex:(int)arg1;
- (void)adjustVideoBitrate:(id)arg1 netType:(int)arg2;
- (id)getVideoBitrateParam:(int)arg1 dimen:(int)arg2;
- (void)setVideoInitBitrate:(int)arg1;
- (void)adjustAudioFrameSize;
- (void)setFrameSize:(short)arg1;
- (void)setSampleRate;
- (int)getPeerNet;
- (unsigned int)getAudioEncoderInitBitrate;
- (int)getAudioHeaderMinorVersion;
- (int)getAudioHeaderMajorVersion;
- (void)setAudioHeaderMajorVersion:(int)arg1 minorVersion:(int)arg2;
- (id)getDumpFileDir;
- (id)timeStamp;
- (id)getPlayerDumpFilePath;
- (id)getRecorderDumpFilePath;
- (int)getAudioFrameByteSize;
- (int)getAudioFrameSizeInt;
- (double)getSampleRateFloat;
- (int)getAudioCodecType;
- (int)getSampleRate;
- (_Bool)isCanUseNewHeader;
- (void)setSessionConfig:(unsigned int)arg1 withPeer:(unsigned int)arg2 codecType:(int)arg3 lowNetType:(short)arg4 peerNetType:(short)arg5;
- (id)setup:(id)arg1;
- (void)setupVideoCaptureParam:(id)arg1;
- (void)dealloc;
- (id)init;

@end

