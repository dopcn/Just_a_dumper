//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSNumber, NSString, NSTimer, WXProgressivelyMigrationManager, __YWDBStoreInfo;

@interface __YWDBMigratorStoreItem : NSObject
{
    NSNumber *_storeSize;
    __YWDBStoreInfo *_storeInfo;
    NSString *_storePath;
    WXProgressivelyMigrationManager *_progressiveManager;
    double _fakeProgress;
    NSTimer *_timerForFake;
    CDUnknownBlockType _timerBlockForFake;
}

+ (unsigned long long)estimatedMigrationSpeed;
@property(copy, nonatomic) CDUnknownBlockType timerBlockForFake; // @synthesize timerBlockForFake=_timerBlockForFake;
@property(nonatomic) __weak NSTimer *timerForFake; // @synthesize timerForFake=_timerForFake;
@property(nonatomic) double fakeProgress; // @synthesize fakeProgress=_fakeProgress;
@property(retain, nonatomic) WXProgressivelyMigrationManager *progressiveManager; // @synthesize progressiveManager=_progressiveManager;
@property(copy, nonatomic) NSString *storePath; // @synthesize storePath=_storePath;
- (void).cxx_destruct;
- (void)cancelMigrate;
- (void)migrateWithProgress:(CDUnknownBlockType)arg1 completion:(CDUnknownBlockType)arg2;
- (void)onTimerForFake:(id)arg1;
@property(readonly, nonatomic) _Bool isNeedMigrate;
- (void)updateStoreInfoForMigrating;
- (void)updateStoreInfoForMigrated;
@property(readonly, nonatomic) __YWDBStoreInfo *storeInfo; // @synthesize storeInfo=_storeInfo;
- (void)resetSize;
@property(readonly, copy, nonatomic) NSNumber *storeSize; // @synthesize storeSize=_storeSize;
- (void)dealloc;
- (id)initWithStorePath:(id)arg1;
- (id)_insertNewObjectWithOld:(id)arg1 intoNewContext:(id)arg2 allowedRelationClassNames:(id)arg3;
- (void)_step1ToCleanLargeDBAndGetModelA:(id *)arg1 modelB:(id *)arg2 error:(id *)arg3;
- (void)_step1ToRemoveCipherAndGetModelA:(id *)arg1 modelB:(id *)arg2 error:(id *)arg3;
- (void)_autoMigrateToBakWithSourceModel:(id)arg1 destModel:(id)arg2 sourcePath:(id)arg3 error:(id *)arg4;
- (void)_useBakDBDirToDir:(id)arg1 error:(id *)arg2;
- (void)_clearAndMakeBakDBDirWithError:(id *)arg1;
- (void)_getBakDBDir:(id *)arg1 filePath:(id *)arg2;
- (void)cleanLargeDBToTmpDir:(id)arg1 withError:(id *)arg2;
- (void)removeCipherToTmpDir:(id)arg1 withError:(id *)arg2;

@end

