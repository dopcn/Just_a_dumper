//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AVCaptureAudioDataOutput, AVCaptureDevice, AVCaptureSession, AVCaptureVideoDataOutput, CNvMacCameraAudioDelegate, CNvMacCameraVideoDelegate;

@interface CNvMacCameraSession : NSObject
{
    // Error parsing type: ^{CNvMacCamera=^^?{QAtomicInt={atomic<int>=Ai}}^^?^{CNvMacCameraFactory}^{INvVideoCaptureDeviceCallback}I{SNvVideoCaptureDeviceInfo=ii}Bi^{CNvMacCameraEventHandler}^{CNvVideoCaptureFrameGrabber}@@@{CNvSyncEvent=BB{QWaitCondition=^{QWaitConditionPrivate}}{QMutex={QBasicAtomicPointer<QMutexData>={atomic<QMutexData *>=A^{QMutexData}}}}{QElapsedTimer=qq}}{CNvSyncEvent=BB{QWaitCondition=^{QWaitConditionPrivate}}{QMutex={QBasicAtomicPointer<QMutexData>={atomic<QMutexData *>=A^{QMutexData}}}}{QElapsedTimer=qq}}BBB{?=qiIq}{QAtomicInt={atomic<int>=Ai}}{SNvVideoResolution=II{SNvRational=ii}{SNvRational=ii}}i{SNvRational=ii}{SNvRational=ii}{SNvAudioResolution=IiI}{TNvSmartPtr<INvAVFileWriter>=^{INvAVFileWriter}}{TNvSmartPtr<INvMacFileWriterCMSampleBuffer>=^{INvMacFileWriterCMSampleBuffer}}@fq{TNvSmartPtr<INvVideoFrameAllocator>=^{INvVideoFrameAllocator}}{vector<QSize, std::__1::allocator<QSize> >=^{QSize}^{QSize}{__compressed_pair<QSize *, std::__1::allocator<QSize> >=^{QSize}}}{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}BBBqII{QSize=ii}IIi}, name: m_camera
    // Error parsing type: {QMutex="d_ptr"{QBasicAtomicPointer<QMutexData>="_q_value"{atomic<QMutexData *>="__a_"A^{QMutexData}}}}, name: m_mutex
    AVCaptureSession *_captureSession;
    AVCaptureDevice *_videoDevice;
    AVCaptureVideoDataOutput *_videoDataOutput;
    AVCaptureAudioDataOutput *_audioDataOutput;
    CNvMacCameraVideoDelegate *_videoDelegate;
    CNvMacCameraAudioDelegate *_audioDelegate;
}

@property(retain, nonatomic) CNvMacCameraAudioDelegate *audioDelegate; // @synthesize audioDelegate=_audioDelegate;
@property(retain, nonatomic) CNvMacCameraVideoDelegate *videoDelegate; // @synthesize videoDelegate=_videoDelegate;
@property(retain, nonatomic) AVCaptureAudioDataOutput *audioDataOutput; // @synthesize audioDataOutput=_audioDataOutput;
@property(retain, nonatomic) AVCaptureVideoDataOutput *videoDataOutput; // @synthesize videoDataOutput=_videoDataOutput;
@property(retain, nonatomic) AVCaptureDevice *videoDevice; // @synthesize videoDevice=_videoDevice;
@property(retain, nonatomic) AVCaptureSession *captureSession; // @synthesize captureSession=_captureSession;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)close:(id)arg1;
- (_Bool)startCapture:(id)arg1;
-     // Error parsing type: @24@0:8^{CNvMacCamera=^^?{QAtomicInt={atomic<int>=Ai}}^^?^{CNvMacCameraFactory}^{INvVideoCaptureDeviceCallback}I{SNvVideoCaptureDeviceInfo=ii}Bi^{CNvMacCameraEventHandler}^{CNvVideoCaptureFrameGrabber}@@@{CNvSyncEvent=BB{QWaitCondition=^{QWaitConditionPrivate}}{QMutex={QBasicAtomicPointer<QMutexData>={atomic<QMutexData *>=A^{QMutexData}}}}{QElapsedTimer=qq}}{CNvSyncEvent=BB{QWaitCondition=^{QWaitConditionPrivate}}{QMutex={QBasicAtomicPointer<QMutexData>={atomic<QMutexData *>=A^{QMutexData}}}}{QElapsedTimer=qq}}BBB{?=qiIq}{QAtomicInt={atomic<int>=Ai}}{SNvVideoResolution=II{SNvRational=ii}{SNvRational=ii}}i{SNvRational=ii}{SNvRational=ii}{SNvAudioResolution=IiI}{TNvSmartPtr<INvAVFileWriter>=^{INvAVFileWriter}}{TNvSmartPtr<INvMacFileWriterCMSampleBuffer>=^{INvMacFileWriterCMSampleBuffer}}@fq{TNvSmartPtr<INvVideoFrameAllocator>=^{INvVideoFrameAllocator}}{vector<QSize, std::__1::allocator<QSize> >=^{QSize}^{QSize}{__compressed_pair<QSize *, std::__1::allocator<QSize> >=^{QSize}}}{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}BBBqII{QSize=ii}IIi}16, name: initWithCamera:

@end

