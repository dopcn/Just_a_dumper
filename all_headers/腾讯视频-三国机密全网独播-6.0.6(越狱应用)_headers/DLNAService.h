//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "DeviceService.h"

#import "DeviceServiceReachabilityDelegate-Protocol.h"
#import "MediaControl-Protocol.h"
#import "MediaPlayer-Protocol.h"
#import "PlayListControl-Protocol.h"
#import "ServiceCommandDelegate-Protocol.h"
#import "VolumeControl-Protocol.h"

@class DeviceServiceReachability, NSMutableDictionary, NSString, NSURL, ServiceDescription;
@protocol ServiceCommandDelegate;

@interface DLNAService : DeviceService <ServiceCommandDelegate, DeviceServiceReachabilityDelegate, MediaPlayer, MediaControl, VolumeControl, PlayListControl>
{
    NSMutableDictionary *_httpServerSessionIds;
    DeviceServiceReachability *_serviceReachability;
    double lastAbsCurrentTime;
    _Bool _DlnaXmlTransformEnable;
    _Bool _legitimateForAbsTime;
    ServiceDescription *_serviceDescription;
    id <ServiceCommandDelegate> _serviceCommandDelegate;
    NSURL *_avTransportControlURL;
    NSURL *_avTransportEventURL;
    NSURL *_renderingControlControlURL;
    NSURL *_renderingControlEventURL;
}

+ (id)discoveryParameters;
@property(retain, nonatomic) NSURL *renderingControlEventURL; // @synthesize renderingControlEventURL=_renderingControlEventURL;
@property(retain, nonatomic) NSURL *renderingControlControlURL; // @synthesize renderingControlControlURL=_renderingControlControlURL;
@property(retain, nonatomic) NSURL *avTransportEventURL; // @synthesize avTransportEventURL=_avTransportEventURL;
@property(retain, nonatomic) NSURL *avTransportControlURL; // @synthesize avTransportControlURL=_avTransportControlURL;
@property(retain, nonatomic) id <ServiceCommandDelegate> serviceCommandDelegate; // @synthesize serviceCommandDelegate=_serviceCommandDelegate;
@property(nonatomic) _Bool legitimateForAbsTime; // @synthesize legitimateForAbsTime=_legitimateForAbsTime;
@property(nonatomic) _Bool DlnaXmlTransformEnable; // @synthesize DlnaXmlTransformEnable=_DlnaXmlTransformEnable;
- (id)serviceDescription;
- (void).cxx_destruct;
- (void)writeSubtitleElementsForURL:(id)arg1 mimeType:(id)arg2 andType:(id)arg3 toWriter:(id)arg4;
- (void)writePVSubtitleAttributesForURL:(id)arg1 andType:(id)arg2 toWriter:(id)arg3;
- (id)playMediaMetadataXMLForMediaInfo:(id)arg1 error:(out id *)arg2;
- (id)subtypeFromMimeType:(id)arg1;
- (_Bool)isValidMimeType:(id)arg1;
- (id)createDeviceServiceReachabilityWithTargetURL:(id)arg1;
- (void)jumpToTrackWithIndex:(long long)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)playPreviousWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)playNextWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (int)playListControlPriority;
- (id)playListControl;
- (id)subscribeMuteWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)setMute:(_Bool)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)getMuteWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)subscribeVolumeWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)setVolume:(float)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)getVolumeWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)volumeDownWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)volumeUpWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (int)volumeControlPriority;
- (id)volumeControl;
- (void)closeMedia:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)playMediaWithMediaInfo:(id)arg1 shouldLoop:(_Bool)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (void)playMedia:(id)arg1 shouldLoop:(_Bool)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (void)playMedia:(id)arg1 iconURL:(id)arg2 title:(id)arg3 description:(id)arg4 mimeType:(id)arg5 shouldLoop:(_Bool)arg6 success:(CDUnknownBlockType)arg7 failure:(CDUnknownBlockType)arg8;
- (void)displayImageWithMediaInfo:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)displayImage:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)displayImage:(id)arg1 iconURL:(id)arg2 title:(id)arg3 description:(id)arg4 mimeType:(id)arg5 success:(CDUnknownBlockType)arg6 failure:(CDUnknownBlockType)arg7;
- (int)mediaPlayerPriority;
- (id)mediaPlayer;
- (id)responseDataFromResponse:(id)arg1 forMethod:(id)arg2;
- (_Bool)isValidUrl:(id)arg1;
- (id)parseMetadataDictionaryFromXMLString:(id)arg1;
- (id)stringForTime:(double)arg1;
- (double)timeForString:(id)arg1;
- (id)subscribeMediaInfoWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)getMediaMetaDataWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)getPositionInfoWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (id)subscribePlayStateWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)getPositionAndDurationWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)getPositionWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)getDurationWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)getPlayStateWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)seek:(double)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
- (void)fastForwardWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)rewindWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)stopWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)pauseWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)playWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (int)mediaControlPriority;
- (id)mediaControl;
- (id)serviceURLForPath:(id)arg1;
- (void)unsubscribeServices;
- (void)resubscribeSubscriptions;
- (void)subscribeServices;
- (int)sendSubscription:(id)arg1 type:(int)arg2 payload:(id)arg3 toURL:(id)arg4 withId:(int)arg5;
- (int)sendCommand:(id)arg1 withPayload:(id)arg2 toURL:(id)arg3;
- (long long)valueForVolumeKey:(id)arg1 atChannel:(id)arg2 inResponse:(id)arg3;
- (id)transString:(id)arg1;
- (id)commandXMLForCommandName:(id)arg1 commandNamespace:(id)arg2 andWriterBlock:(CDUnknownBlockType)arg3;
- (void)didLoseReachability:(id)arg1;
- (void)disconnect;
- (void)connect;
- (_Bool)isConnectable;
- (void)updateControlURLs;
- (void)setServiceDescription:(id)arg1;
- (id)initWithJSONObject:(id)arg1;
- (void)updateCapabilities;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

