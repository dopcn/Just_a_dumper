//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "GPUImageFilter.h"

@class FMAudioPlayer, FMFDBackgorund, FMFDBox, FMFDStatus, FMFDTotalPoint, FMFaceDanceNode, FMFaceDanceResource, FMFaceFeature, FMGameNodeCache, GLProgram;
@protocol FMSceneMaterialProvider><FMSceneDelegate;

@interface FMFaceDanceFilter : GPUImageFilter
{
    float *uTime;
    float lastFrameTime;
    FMFaceDanceNode *yinfuNode;
    FMFaceDanceNode *scoreBoardNode;
    FMFaceDanceNode *inputImageNode;
    FMFaceDanceNode *tipNode;
    FMFaceDanceNode *highscoreNode;
    FMFaceDanceNode *countDownNode;
    FMFaceDanceNode *starNode;
    FMFDBackgorund *bgNode;
    FMFDBackgorund *lineNode;
    FMFDBox *boxNode;
    FMFDStatus *statusBGNode;
    FMFDStatus *statusTextNode;
    FMFDTotalPoint *totalPointNode;
    FMFDTotalPoint *perfectcountNode;
    FMFDTotalPoint *greatcountNode;
    FMFDTotalPoint *goodcountNode;
    FMFDTotalPoint *misscountNode;
    FMFDTotalPoint *percentNode;
    GLProgram *faceProgram;
    GLProgram *bgProgram;
    GLProgram *spriteProgram;
    GLProgram *boxProgram;
    GLProgram *lineProgram;
    GLProgram *statusBGProgram;
    GLProgram *statusTextProgram;
    GLProgram *scoreProgram;
    GLProgram *addScoreProgram;
    GLProgram *scoreBoardProgram;
    GLProgram *inputImageProgram;
    struct {
        int bgTextureid;
        int yinfuTextureid;
        int boxTextureid;
        int lineTextureid;
        int faceTextureid;
        int statusBGTextureid;
        int statusTextTextureid;
        int digitalTextureid;
        int scoreBoardTexureid;
        int tipsTextureid;
        int highestTextureid;
        int perfectStartTextureid;
        int greatStartTexutreid;
        int countDownTextureid;
    } textures;
    FMGameNodeCache *faceCache;
    FMGameNodeCache *scoreCache;
    FMAudioPlayer *hitSound;
    FMAudioPlayer *BGMusic;
    double fireTime;
    double gameTime;
    _Bool isPause;
    int vibrateTimes;
    int vibrateMultiple;
    int typeCount[4];
    float (*offset)[2];
    id <FMSceneMaterialProvider><FMSceneDelegate> _provider;
    FMFaceFeature *_face;
    FMFaceDanceResource *_resource;
}

@property(retain, nonatomic) FMFaceDanceResource *resource; // @synthesize resource=_resource;
@property(retain, nonatomic) FMFaceFeature *face; // @synthesize face=_face;
@property(retain, nonatomic) id <FMSceneMaterialProvider><FMSceneDelegate> provider; // @synthesize provider=_provider;
- (void).cxx_destruct;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2 touchPosition:(struct CGPoint)arg3;
- (void)fireAFace;
- (void)setViewPort;
- (void)vibrate;
- (void)setNeedVibrate:(int)arg1;
- (void)checkhit;
- (int)getPercent;
- (void)drawScoreBoard;
- (void)renderToTextureWithVertices:(const float *)arg1 textureCoordinates:(const float *)arg2;
- (void)resume;
- (void)pause;
- (void)clear;
- (void)loadResource;
- (void)loadProgram;
- (void)loadTexture;
- (void)resetStatus;
- (void)setup;
- (void)dealloc;
- (id)initWithResouce:(id)arg1 provider:(id)arg2;

@end

