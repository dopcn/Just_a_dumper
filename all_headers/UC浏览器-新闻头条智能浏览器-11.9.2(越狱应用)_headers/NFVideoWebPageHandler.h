//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "NFVideoFinishMaskViewDelegate-Protocol.h"
#import "NFVideoFreeFlowTipActionDelegate-Protocol.h"
#import "NFVideoHandlerProxy-Protocol.h"
#import "NFVideoLogUploadHandlerDataSource-Protocol.h"
#import "NFVideoWaStatisticsObserver-Protocol.h"
#import "NewsFlowManagerObserver-Protocol.h"
#import "NewsFlowVideoProxy-Protocol.h"
#import "UCMoviePlayerListener-Protocol.h"
#import "WMSubscribeObserver-Protocol.h"

@class NFBaseTableViewController, NFDiversionAnimationController, NFVideoFinishMaskView, NFVideoLogDataCenter, NFVideoStatInfo, NSArray, NSDictionary, NSMapTable, NSMutableDictionary, NSString, ObserverContainer, UCMoviePlayerInfo, UIView;
@protocol INewsFlowArticleItem, INewsFlowItem;

@interface NFVideoWebPageHandler : NSObject <UCMoviePlayerListener, WMSubscribeObserver, NFVideoLogUploadHandlerDataSource, NFVideoFinishMaskViewDelegate, NFVideoWaStatisticsObserver, NFVideoFreeFlowTipActionDelegate, NewsFlowManagerObserver, NewsFlowVideoProxy, NFVideoHandlerProxy>
{
    _Bool _isPlayingInVideoWebPage;
    _Bool _hasUserAuthorization;
    _Bool _isWiFiAutoPlay;
    _Bool _handlingWMTitleClick;
    _Bool _handlingFollowBtnClick;
    _Bool _changeToEmbedOnPlay;
    _Bool _videoShowPreload;
    double playbackTime;
    double totalDuration;
    long long _langdingFromType;
    UCMoviePlayerInfo *_moviePlayerInfo;
    NFBaseTableViewController *_targetChannelViewController;
    long long _playVideoType;
    id <INewsFlowArticleItem> _currentPlayingItem;
    NSArray *_playList;
    NSDictionary *_videoStatistData;
    long long _continuePlayType;
    long long _videoForm;
    long long _oriVideoForm;
    NSDictionary *_extInfo;
    long long _pauseVideoType;
    long long _currentShowType;
    double _totalPlayTime;
    double _startPlayTime;
    id <INewsFlowItem> _itemForWIFIStat;
    NSMapTable *_followStatMapTable;
    NFVideoStatInfo *_wifiAutoPlayStatInfo;
    long long _oriLangdingFromType;
    long long _maskShowType;
    ObserverContainer *_observerContainer;
    NFDiversionAnimationController *_educationController;
    UIView *_embedParentView;
    NSMutableDictionary *_jsTitleDict;
    NFVideoLogDataCenter *_webSiteRelateVideoLogHelper;
    NFVideoFinishMaskView *_finishMaskView;
    struct CGRect _embedViewFrame;
}

+ (id)sharedInstance;
@property(nonatomic) _Bool videoShowPreload; // @synthesize videoShowPreload=_videoShowPreload;
@property(nonatomic) _Bool changeToEmbedOnPlay; // @synthesize changeToEmbedOnPlay=_changeToEmbedOnPlay;
@property(retain, nonatomic) NFVideoFinishMaskView *finishMaskView; // @synthesize finishMaskView=_finishMaskView;
@property(retain, nonatomic) NFVideoLogDataCenter *webSiteRelateVideoLogHelper; // @synthesize webSiteRelateVideoLogHelper=_webSiteRelateVideoLogHelper;
@property(retain, nonatomic) NSMutableDictionary *jsTitleDict; // @synthesize jsTitleDict=_jsTitleDict;
@property(nonatomic) struct CGRect embedViewFrame; // @synthesize embedViewFrame=_embedViewFrame;
@property(retain, nonatomic) UIView *embedParentView; // @synthesize embedParentView=_embedParentView;
@property(nonatomic) _Bool handlingFollowBtnClick; // @synthesize handlingFollowBtnClick=_handlingFollowBtnClick;
@property(nonatomic) _Bool handlingWMTitleClick; // @synthesize handlingWMTitleClick=_handlingWMTitleClick;
@property(retain, nonatomic) NFDiversionAnimationController *educationController; // @synthesize educationController=_educationController;
@property(retain, nonatomic) ObserverContainer *observerContainer; // @synthesize observerContainer=_observerContainer;
@property(nonatomic) long long maskShowType; // @synthesize maskShowType=_maskShowType;
@property(nonatomic) _Bool isWiFiAutoPlay; // @synthesize isWiFiAutoPlay=_isWiFiAutoPlay;
@property(nonatomic) long long oriLangdingFromType; // @synthesize oriLangdingFromType=_oriLangdingFromType;
@property(retain, nonatomic) NFVideoStatInfo *wifiAutoPlayStatInfo; // @synthesize wifiAutoPlayStatInfo=_wifiAutoPlayStatInfo;
@property(retain, nonatomic) NSMapTable *followStatMapTable; // @synthesize followStatMapTable=_followStatMapTable;
@property(retain, nonatomic) id <INewsFlowItem> itemForWIFIStat; // @synthesize itemForWIFIStat=_itemForWIFIStat;
@property(nonatomic) _Bool hasUserAuthorization; // @synthesize hasUserAuthorization=_hasUserAuthorization;
@property(nonatomic) double startPlayTime; // @synthesize startPlayTime=_startPlayTime;
@property(nonatomic) double totalPlayTime; // @synthesize totalPlayTime=_totalPlayTime;
@property(nonatomic) long long currentShowType; // @synthesize currentShowType=_currentShowType;
@property(nonatomic) long long pauseVideoType; // @synthesize pauseVideoType=_pauseVideoType;
@property(retain, nonatomic) NSDictionary *extInfo; // @synthesize extInfo=_extInfo;
@property(nonatomic) long long oriVideoForm; // @synthesize oriVideoForm=_oriVideoForm;
@property(nonatomic) long long videoForm; // @synthesize videoForm=_videoForm;
@property(nonatomic) long long continuePlayType; // @synthesize continuePlayType=_continuePlayType;
@property(copy, nonatomic) NSDictionary *videoStatistData; // @synthesize videoStatistData=_videoStatistData;
@property(retain, nonatomic) NSArray *playList; // @synthesize playList=_playList;
@property(nonatomic) _Bool isPlayingInVideoWebPage; // @synthesize isPlayingInVideoWebPage=_isPlayingInVideoWebPage;
@property(retain, nonatomic) id <INewsFlowArticleItem> currentPlayingItem; // @synthesize currentPlayingItem=_currentPlayingItem;
@property(nonatomic) long long playVideoType; // @synthesize playVideoType=_playVideoType;
@property(retain, nonatomic) NFBaseTableViewController *targetChannelViewController; // @synthesize targetChannelViewController=_targetChannelViewController;
@property(retain, nonatomic) UCMoviePlayerInfo *moviePlayerInfo; // @synthesize moviePlayerInfo=_moviePlayerInfo;
@property(nonatomic) long long langdingFromType; // @synthesize langdingFromType=_langdingFromType;
- (_Bool)isMicroWindowOpen;
- (void)onMicroWindowDoubleClick:(id)arg1;
- (void)didLoadDataSucceed:(id)arg1 reqInfo:(id)arg2;
- (void)didNewsFlowTabChange;
- (void)didNewsFlowChannelChange;
- (void)statMaskViewContinusPlayVideoBehave:(_Bool)arg1;
- (void)nfVideoFinishMaskViewDidCancelNextPlayVideo:(id)arg1;
- (void)nfVideoFinishMaskViewDidContinusNextPlayVideo:(id)arg1;
- (void)updateStatInfo:(id)arg1;
- (void)playVideoWithArticleItem:(id)arg1 parentView:(id)arg2 frame:(struct CGRect)arg3 source:(id)arg4;
- (void)continueToPlayVideo:(id)arg1;
- (void)freeFlowPlayTipViewContinueButtonClick:(id)arg1;
- (void)freeFlowPlayTipViewCancelButtonClick:(id)arg1;
- (void)initChangeToEmbedOnPlayFunction;
- (void)setupPlayerPosterImage:(id)arg1;
- (void)stopEducationTipShow;
- (void)stopEmbedVideoInCardIfNeeded;
- (void)tryVPSPrefetchWithViewController:(id)arg1 fromCurrentPlaying:(_Bool)arg2;
- (long long)preferredPlayForm:(id)arg1;
- (_Bool)shouldShowNetworkUnReachableTips;
- (void)didVideoScreenChange:(id)arg1;
- (void)movieplayerWindowChange:(id)arg1;
- (void)notifyObserversWithSelector:(SEL)arg1;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (_Bool)shouldPlayVideoInCurrentNetworkWithExtInfo:(id)arg1;
- (_Bool)currentPageInTopMargin;
- (id)currentPageItem;
- (id)activeItem;
- (void)checkWmId:(id)arg1 validBlock:(CDUnknownBlockType)arg2;
- (void)unsubscribe:(id)arg1 from:(id)arg2 didFailWithError:(id)arg3;
- (void)unsubscribe:(id)arg1 from:(id)arg2 didSuccessWithUserId:(id)arg3;
- (void)subscribe:(id)arg1 from:(id)arg2 didFailWithError:(id)arg3;
- (void)subscribe:(id)arg1 from:(id)arg2 didSuccessWithUserId:(id)arg3;
- (void)calcAutoPlaytime;
- (void)statAutoPlayFinish:(long long)arg1;
- (void)videoWaStatistics:(id)arg1 didPlayVideoEvent:(id)arg2;
- (void)continuePlayNextVideo:(_Bool)arg1;
- (void)pauseVideo;
- (void)stopVideo:(_Bool)arg1;
- (void)syncStopVideo;
- (void)stopVideo;
- (void)playCurrentVideoItemWithPageUrl:(id)arg1 parentView:(id)arg2 extInfo:(id)arg3;
- (void)createWiFiAutoPlayInfo;
- (void)StopMoviePlayer;
- (void)asyncStopMoviePlayer;
- (void)updateBusinessInfo:(id)arg1;
- (void)updateCurrentDataWithItem:(id)arg1;
- (void)tryToPlayNextMovieWithItem:(id)arg1 channelType:(id)arg2;
- (void)tryToPlayNextMovie;
- (_Bool)canPlayNextVideoWithNextItem:(id)arg1;
- (_Bool)canPlayNextVideoInWebPage;
- (_Bool)showVideoMaskViewIfNeed;
- (_Bool)canShowWMFollowGuide;
- (void)resetStartTime;
- (void)updateTotalPlayTime;
- (void)moviePlayer:(id)arg1 didTipsPluginTriggerEvent:(long long)arg2;
- (void)stopLoopPlayVideo;
- (void)canclePlayVideoInCurrentNetwork;
- (void)didChangePlaybackState:(int)arg1;
- (long long)changeToScreenChangeLogString:(id)arg1;
- (void)statPlayerScreenShowTypeChangeTo:(long long)arg1;
- (void)didMoviePlayerViewScreenShowTypeChange:(long long)arg1 oldType:(long long)arg2;
- (void)moviePlayerDidUserChangePlayStateToPlay:(_Bool)arg1;
- (void)moviePlayerToolPanelBehaveState:(id)arg1;
- (void)moviePlayerPlayWillReachEnd;
- (void)moviePlayerPlayFirstThroughOk;
- (id)wmAuthorFromCurrentPlayingItem;
- (void)moviePlayerExtendBtnDidClick:(unsigned long long)arg1;
- (void)followCurrentWeMediaWithPlayerBehave:(long long)arg1 enterSource:(long long)arg2;
- (_Bool)shouldPlayRelatedInfoAtIndex:(long long)arg1;
- (void)moviePlayerDidFinishWithPlaybackInfo:(id)arg1;
- (void)moviePlayerDidClickAdURLWithState:(_Bool)arg1 inFullScreen:(_Bool)arg2 process:(int)arg3;
- (void)moviePlayerSyncCurrentPlaybackTime:(double)arg1 playableDuration:(double)arg2;
- (_Bool)moviePlayerHasNextVideoWhenPlayEnd;
- (_Bool)moviePlayerTryToPlayNextMovie;
- (void)moviePlayerWillChangeListenerTo:(id)arg1;
- (void)moviePlayerWillBeControlledByOtherPlay;
- (void)nfVideoFinishMaskViewDidSeeAdDetailClick:(id)arg1;
- (void)nfVideoFinishMaskViewDidShow:(id)arg1;
- (void)nfVideoFinishMaskViewDidNextBtnClick:(id)arg1;
- (void)nfVideoFinishMaskViewDidReplayBtnClick:(id)arg1;
- (void)didFullScreenBeginDismiss:(id)arg1;
- (void)didJSVideoPlay:(id)arg1;
- (void)didChannelRefresh:(id)arg1;
- (void)baseViewControllerDidViewFristShow:(id)arg1;
- (void)baseViewController:(id)arg1 didChannelActived:(id)arg2;
- (void)baseViewController:(id)arg1 didLoadMoreData:(id)arg2;
- (void)baseViewController:(id)arg1 didScroll:(id)arg2;
- (void)baseViewController:(id)arg1 didEndScrolling:(id)arg2;
- (void)seekToTime:(double)arg1;
- (void)stop;
- (void)pause;
- (void)play;
@property(readonly, nonatomic) double totalDuration; // @synthesize totalDuration;
@property(readonly, nonatomic) double playbackTime; // @synthesize playbackTime;
- (void)setSeekingEnabled:(_Bool)arg1 hideProgressTipView:(_Bool)arg2;
- (void)setSeekingEnabled:(_Bool)arg1;
- (id)currentVideoAVPlayerView;
- (double)playerProgress;
- (void)setPlayerFrame:(struct CGRect)arg1;
- (void)setPlayerMute:(_Bool)arg1;
- (void)updatePlayList:(id)arg1;
- (void)showEducationIfNeeded;
- (void)transferVideoPlaying:(id)arg1;
- (void)openAdDetailWithPlayerState:(_Bool)arg1 inFullScreen:(_Bool)arg2 process:(int)arg3;
- (void)openVideoWebPageWithItem:(id)arg1 pageUrl:(id)arg2 parentView:(id)arg3 extInfo:(id)arg4;
- (void)openVideoWebPageWithItem:(id)arg1 preferPageUrl:(id)arg2 andParentView:(id)arg3 enterType:(long long)arg4;
- (void)openVideoWebPageWithItem:(id)arg1 andParentView:(id)arg2;
- (_Bool)playerIsUsing;
- (_Bool)stopPlayVideoAd;
- (void)notifyScrollMoviePlayer:(id)arg1;
- (void)checkPlayerHandlerWithScrollView:(id)arg1 notification:(id)arg2;
- (void)playMovie:(id)arg1 container:(id)arg2 recordID:(id)arg3 channelType:(id)arg4 videoFrame:(struct CGRect)arg5 extInfo:(id)arg6;
- (void)baseViewController:(id)arg1 playMovie:(id)arg2 container:(id)arg3 recordID:(id)arg4 channelType:(id)arg5 videoFrame:(struct CGRect)arg6;
- (void)seupVideoSubBusinessPlayListImmerse;
- (unsigned long long)pageTypeWithBussinessInfo:(id)arg1;
- (void)playVideoWithParentView:(id)arg1 showInTop:(_Bool)arg2 item:(id)arg3 recordID:(id)arg4 channelType:(id)arg5 videoFrame:(struct CGRect)arg6 isPlayInVideoWebPage:(_Bool)arg7 pageUrl:(id)arg8 extInfo:(id)arg9;
- (void)playMovie:(id)arg1 listener:(id)arg2 channel:(id)arg3 dataItem:(id)arg4 recordID:(id)arg5 isPlayInVideoWebPage:(_Bool)arg6 extInfo:(id)arg7;
- (void)releaseMoviePlayerInfo;
- (id)moviePlayerDataSource;
- (void)releaseFinishMaskView;
- (void)dealloc;
- (id)init;
- (void)statPauseVideoWithPauseType:(long long)arg1;
- (void)statPlayerBehaveEventWithBehaveFunction:(long long)arg1 extInfo:(id)arg2;
- (void)statPlayerBehaveEventWithBehaveFunction:(long long)arg1;
- (void)statPlayerBehaveEventWithItemId:(id)arg1 onFollowStatus:(long long)arg2 extInfo:(id)arg3;
- (void)statPlayerBehaveEventWithItemId:(id)arg1 onFollowStatus:(long long)arg2;
- (void)moviePlayerDidRotationEnterFullScreen:(id)arg1;
- (void)moviePlayerDidDoubleClickEnterFullScreen:(id)arg1;
- (id)findNextVideoRelateItemWithCurrentTitle:(id)arg1;
- (id)findRelateItemWithItemId:(id)arg1;
- (id)articleIdWithItem:(id)arg1;
- (id)channelIdWithItem:(id)arg1;
- (_Bool)isVideoAd;
- (_Bool)canAutoPlayNextVideo;
- (struct CGSize)videoSizeForItem:(id)arg1;
- (id)currentWMID;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

