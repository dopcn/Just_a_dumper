//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "GCDAsyncSocketDelegate-Protocol.h"

@class BIMGCDAsyncSocket, BIMResponse, NSMutableData, NSMutableDictionary, NSNumber, NSTimer;
@protocol OS_dispatch_queue;

@interface BIMConnector : NSObject <GCDAsyncSocketDelegate>
{
    int _currentRequestId;
    unsigned int _remainSize;
    _Bool _packaging;
    _Bool _usingTls;
    NSTimer *_heartbeatTimer;
    NSTimer *_heartbeatTimerDown;
    BIMResponse *_response;
    _Bool _isConnected;
    _Bool _isConnecting;
    NSNumber *_trigger_id;
    NSMutableDictionary *_requests;
    id _multiDelegate;
    NSMutableData *_remainData;
    NSObject<OS_dispatch_queue> *_socket_queue;
    NSObject<OS_dispatch_queue> *_delegate_queue;
    BIMGCDAsyncSocket *_socket;
}

+ (id)shareInstance;
@property(retain, nonatomic) BIMGCDAsyncSocket *socket; // @synthesize socket=_socket;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *delegate_queue; // @synthesize delegate_queue=_delegate_queue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *socket_queue; // @synthesize socket_queue=_socket_queue;
@property(retain, nonatomic) NSMutableData *remainData; // @synthesize remainData=_remainData;
@property(retain, nonatomic) id multiDelegate; // @synthesize multiDelegate=_multiDelegate;
@property(retain, nonatomic) NSMutableDictionary *requests; // @synthesize requests=_requests;
@property(readonly, nonatomic) _Bool isConnecting; // @synthesize isConnecting=_isConnecting;
@property(nonatomic) _Bool isConnected; // @synthesize isConnected=_isConnected;
@property(retain, nonatomic) NSNumber *trigger_id; // @synthesize trigger_id=_trigger_id;
- (void).cxx_destruct;
- (void)socketDidSecure:(id)arg1;
- (void)socket:(id)arg1 didReceiveTrust:(struct __SecTrust *)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)socket:(id)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (double)socket:(id)arg1 shouldTimeoutWriteWithTag:(long long)arg2 elapsed:(double)arg3 bytesDone:(unsigned long long)arg4;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)socket:(id)arg1 didAcceptNewSocket:(id)arg2;
- (void)startTLS;
- (void)disconnect;
- (void)sendHeartBeat;
- (void)timeoutInvoke:(id)arg1;
- (void)send:(id)arg1;
- (id)connectWithHost:(id)arg1 Port:(long long)arg2;
- (void)connectSuccess:(_Bool)arg1;
- (void)connect;
- (void)removeObserver:(id)arg1;
- (void)registObserver:(id)arg1;
- (id)postErrorDic:(id)arg1 withRequestMethod:(id)arg2;
- (void)package;
- (void)receiveResponse;
- (void)staticErrorLogWithMethod:(id)arg1;
- (void)removeRequestForKey:(id)arg1;
- (void)addRequest:(id)arg1 toKey:(id)arg2;
- (id)createRequestDictionaryforRequest:(id)arg1;
- (id)hasRequest:(id)arg1;
- (_Bool)hasRequestForKey:(id)arg1;
- (void)stopHeartBeatDwon;
- (void)stopHeartBeat;
- (void)restartHeartForDown;
- (void)restartHeartBeat;
- (id)init;

@end

