//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "BackforwardSnapshotDelegate-Protocol.h"
#import "H3TContentView-Protocol.h"
#import "IWebViewEx-Protocol.h"
#import "PreReadWebViewInterface-Protocol.h"
#import "UCChallengeHandlerDispatcherDelegate-Protocol.h"
#import "UCDocInteractNotifyReceiver-Protocol.h"
#import "UCURLProgressManagerObserver-Protocol.h"
#import "UIActionSheetDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"
#import "UIScrollViewDelegate-Protocol.h"
#import "UIWebViewExProtocol-Protocol.h"
#import "UIWebViewPubDelegate-Protocol.h"
#import "URLRequestThrottleObserver-Protocol.h"

@class BackforwardSnapshot, NSDate, NSMutableDictionary, NSString, NSTimer, NSURL, NSURLRequest, PreReadWebClient, RequestEnterRecord, UCDLInfo, UCPVStatInfo, UIColor, UIImageView, UITapGestureRecognizer, UIWebBgMaskView, UIWebViewLoadParam, UIWebViewPub, UserNaivgationRequestInfo, WKMsgBridge, WebViewJSHandler, WebViewLoadingState;
@protocol UCPVStatObserverProtocol, WebViewWrapperDelegate_internal, WebViewWrapperDelegate_menuAction, WebViewWrapperDelegate_scrolling;

@interface UIWebViewPubEx : UIView <UIWebViewPubDelegate, IWebViewEx, UIGestureRecognizerDelegate, UIScrollViewDelegate, UCURLProgressManagerObserver, UIActionSheetDelegate, PreReadWebViewInterface, H3TContentView, UCChallengeHandlerDispatcherDelegate, BackforwardSnapshotDelegate, URLRequestThrottleObserver, UCDocInteractNotifyReceiver, UIWebViewExProtocol>
{
    _Bool m_bFlashScrollIndicators;
    int m_cacheFontSizeHeight;
    int m_cacheFontSize;
    int m_nFrameLoadCount;
    int m_nBackForwardCount;
    _Bool m_bBackForwardProgress;
    _Bool m_bBackForwardLoading;
    _Bool m_nIsForceWebKitReq;
    UITapGestureRecognizer *m_tapGestureRecognizer;
    unsigned int m_InFullScreenMode:1;
    _Bool m_isWaitingForNewPage;
    _Bool m_isInMessageCenter;
    _Bool m_shouldCheckForm;
    _Bool m_markReload;
    _Bool m_bTriggeredByStop;
    _Bool m_everEnterNightMode;
    _Bool m_isTerminal;
    _Bool m_isCustomMenuInit;
    _Bool backwardNeeded;
    _Bool forwardNeeded;
    _Bool backForwardByScrolling;
    _Bool m_active;
    _Bool m_textSizeAdjustEnabled;
    _Bool m_isEnterNovelMode;
    _Bool m_tapScrollPageEnabled;
    _Bool m_isAdpativeMode;
    _Bool _isProgressLoading;
    _Bool m_waitingForStopRequestThrottle;
    _Bool m_isPreReadPageHit;
    _Bool _isRotating;
    _Bool _enabledReaderMode;
    _Bool _enabledADBlock;
    _Bool _enabledShopping;
    _Bool _enabledNightMode;
    _Bool _enabledVideoDetect;
    _Bool _isLocalPageMode;
    _Bool _disableAutoContentInset;
    _Bool _shouldUseInsetForTopPadding;
    _Bool _isNextBackforwardDoneFullCall;
    _Bool _shouldHandleNightModeOnPage;
    _Bool _isSuggestTitleValidForTitle;
    _Bool _shouldUseSuggestTitle;
    _Bool _isDocumentInteractive;
    _Bool _shouldForceCheckLoadFinish;
    _Bool _webViewNightMode;
    _Bool _everLoadAnything;
    _Bool _documentURLChanged;
    _Bool _shouldNotifyBackforwardDone;
    _Bool _observingScrollViewContentOffset;
    _Bool _bottomBlackFixed;
    _Bool _needLater304Verify;
    int m_connectionMode;
    int _fontSize;
    int _injectJsTypeMask;
    UIWebViewPub *m_webView;
    id <WebViewWrapperDelegate_internal> m_webViewDelegate;
    id <UCPVStatObserverProtocol> _pvDelegate;
    id <WebViewWrapperDelegate_scrolling> _scrollDelegate;
    id <WebViewWrapperDelegate_menuAction> _menuDelegate;
    NSString *_currentWebPageUniqueId;
    WebViewJSHandler *m_webviewJsHandler;
    UIImageView *m_bgView;
    UIWebBgMaskView *m_bgMaskView;
    NSString *_uuidString;
    PreReadWebClient *m_preReadWebClient;
    RequestEnterRecord *m_requestEnterRecord;
    NSMutableDictionary *_wapCountInfo;
    NSString *_referURL;
    NSDate *_lastProgressStartDate;
    NSURL *_lastShouldStartLoadURL;
    double _progress;
    NSString *_lastInjectBlockJSURL;
    NSString *_hrefForSuggestTitle;
    NSString *_suggestTitle;
    NSTimer *m_stopRequestThrottleGuaranteeTimer;
    NSString *_loadingMainDocumnetURL;
    NSString *_latestLoadingRequestURL;
    BackforwardSnapshot *m_backforwardSnapshot;
    UCPVStatInfo *_pvInfo;
    unsigned long long _windowType;
    double _contentInsetTop;
    double _topContentPadding;
    NSTimer *_delayNotifyBackforwardDoneTimer;
    UserNaivgationRequestInfo *_userNaviRequestInfo;
    WebViewLoadingState *_loadingState;
    UCDLInfo *_dlInfo;
    NSString *_lastPageURL_Original;
    NSString *_lastPageURL_NoUCParam;
    UIColor *_webContentBGColor;
    NSDate *_clickingDate;
    NSURLRequest *_userCanceledRequest;
    NSTimer *_delayNightModeTimer;
    WKMsgBridge *_msgBridge;
    UIWebViewLoadParam *_loadingParams;
    struct CGPoint _clickingPoint;
    struct CGPoint _scrollViewOffset;
    struct CGPoint _draggingBeginOffset;
    struct UIEdgeInsets _contentInset;
}

@property(nonatomic) _Bool needLater304Verify; // @synthesize needLater304Verify=_needLater304Verify;
@property(retain, nonatomic) UIWebViewLoadParam *loadingParams; // @synthesize loadingParams=_loadingParams;
@property(nonatomic) _Bool bottomBlackFixed; // @synthesize bottomBlackFixed=_bottomBlackFixed;
@property _Bool observingScrollViewContentOffset; // @synthesize observingScrollViewContentOffset=_observingScrollViewContentOffset;
@property _Bool shouldNotifyBackforwardDone; // @synthesize shouldNotifyBackforwardDone=_shouldNotifyBackforwardDone;
@property _Bool documentURLChanged; // @synthesize documentURLChanged=_documentURLChanged;
@property _Bool everLoadAnything; // @synthesize everLoadAnything=_everLoadAnything;
@property(retain, nonatomic) WKMsgBridge *msgBridge; // @synthesize msgBridge=_msgBridge;
@property(retain, nonatomic) NSTimer *delayNightModeTimer; // @synthesize delayNightModeTimer=_delayNightModeTimer;
@property(getter=isWebViewNightMode) _Bool webViewNightMode; // @synthesize webViewNightMode=_webViewNightMode;
@property(retain, nonatomic) NSURLRequest *userCanceledRequest; // @synthesize userCanceledRequest=_userCanceledRequest;
@property(retain, nonatomic) NSDate *clickingDate; // @synthesize clickingDate=_clickingDate;
@property(retain, nonatomic) UIColor *webContentBGColor; // @synthesize webContentBGColor=_webContentBGColor;
@property(retain, nonatomic) NSString *lastPageURL_NoUCParam; // @synthesize lastPageURL_NoUCParam=_lastPageURL_NoUCParam;
@property(retain, nonatomic) NSString *lastPageURL_Original; // @synthesize lastPageURL_Original=_lastPageURL_Original;
@property(retain, nonatomic) UCDLInfo *dlInfo; // @synthesize dlInfo=_dlInfo;
@property(retain, nonatomic) WebViewLoadingState *loadingState; // @synthesize loadingState=_loadingState;
@property(nonatomic) _Bool shouldForceCheckLoadFinish; // @synthesize shouldForceCheckLoadFinish=_shouldForceCheckLoadFinish;
@property(retain, nonatomic) UserNaivgationRequestInfo *userNaviRequestInfo; // @synthesize userNaviRequestInfo=_userNaviRequestInfo;
@property(nonatomic) struct CGPoint draggingBeginOffset; // @synthesize draggingBeginOffset=_draggingBeginOffset;
@property(nonatomic) struct CGPoint scrollViewOffset; // @synthesize scrollViewOffset=_scrollViewOffset;
@property(nonatomic) _Bool isDocumentInteractive; // @synthesize isDocumentInteractive=_isDocumentInteractive;
@property(nonatomic) _Bool shouldUseSuggestTitle; // @synthesize shouldUseSuggestTitle=_shouldUseSuggestTitle;
@property(nonatomic) _Bool isSuggestTitleValidForTitle; // @synthesize isSuggestTitleValidForTitle=_isSuggestTitleValidForTitle;
@property(nonatomic) _Bool shouldHandleNightModeOnPage; // @synthesize shouldHandleNightModeOnPage=_shouldHandleNightModeOnPage;
@property(nonatomic) _Bool isNextBackforwardDoneFullCall; // @synthesize isNextBackforwardDoneFullCall=_isNextBackforwardDoneFullCall;
@property(retain, nonatomic) NSTimer *delayNotifyBackforwardDoneTimer; // @synthesize delayNotifyBackforwardDoneTimer=_delayNotifyBackforwardDoneTimer;
@property(nonatomic) double topContentPadding; // @synthesize topContentPadding=_topContentPadding;
@property(nonatomic) _Bool shouldUseInsetForTopPadding; // @synthesize shouldUseInsetForTopPadding=_shouldUseInsetForTopPadding;
@property(nonatomic) _Bool disableAutoContentInset; // @synthesize disableAutoContentInset=_disableAutoContentInset;
@property _Bool isLocalPageMode; // @synthesize isLocalPageMode=_isLocalPageMode;
@property _Bool enabledVideoDetect; // @synthesize enabledVideoDetect=_enabledVideoDetect;
@property _Bool enabledNightMode; // @synthesize enabledNightMode=_enabledNightMode;
@property _Bool enabledShopping; // @synthesize enabledShopping=_enabledShopping;
@property _Bool enabledADBlock; // @synthesize enabledADBlock=_enabledADBlock;
@property _Bool enabledReaderMode; // @synthesize enabledReaderMode=_enabledReaderMode;
@property(nonatomic) int injectJsTypeMask; // @synthesize injectJsTypeMask=_injectJsTypeMask;
@property(nonatomic) unsigned long long windowType; // @synthesize windowType=_windowType;
@property(retain, nonatomic) UCPVStatInfo *pvInfo; // @synthesize pvInfo=_pvInfo;
@property(retain, nonatomic) BackforwardSnapshot *backforwardSnapshot; // @synthesize backforwardSnapshot=m_backforwardSnapshot;
@property(nonatomic) _Bool isRotating; // @synthesize isRotating=_isRotating;
@property(retain, nonatomic) NSString *latestLoadingRequestURL; // @synthesize latestLoadingRequestURL=_latestLoadingRequestURL;
@property(retain, nonatomic) NSString *loadingMainDocumnetURL; // @synthesize loadingMainDocumnetURL=_loadingMainDocumnetURL;
@property(nonatomic) int fontSize; // @synthesize fontSize=_fontSize;
@property(nonatomic) struct CGPoint clickingPoint; // @synthesize clickingPoint=_clickingPoint;
@property(nonatomic) _Bool isPreReadPageHit; // @synthesize isPreReadPageHit=m_isPreReadPageHit;
@property(retain, nonatomic) NSTimer *stopRequestThrottleGuaranteeTimer; // @synthesize stopRequestThrottleGuaranteeTimer=m_stopRequestThrottleGuaranteeTimer;
@property(nonatomic) _Bool waitingForStopRequestThrottle; // @synthesize waitingForStopRequestThrottle=m_waitingForStopRequestThrottle;
@property(retain, nonatomic) NSString *suggestTitle; // @synthesize suggestTitle=_suggestTitle;
@property(retain, nonatomic) NSString *hrefForSuggestTitle; // @synthesize hrefForSuggestTitle=_hrefForSuggestTitle;
@property(retain, nonatomic) NSString *lastInjectBlockJSURL; // @synthesize lastInjectBlockJSURL=_lastInjectBlockJSURL;
@property(retain, nonatomic) NSURL *lastShouldStartLoadURL; // @synthesize lastShouldStartLoadURL=_lastShouldStartLoadURL;
@property(retain, nonatomic) NSDate *lastProgressStartDate; // @synthesize lastProgressStartDate=_lastProgressStartDate;
@property(nonatomic) _Bool isProgressLoading; // @synthesize isProgressLoading=_isProgressLoading;
@property(nonatomic) _Bool isAdpativeMode; // @synthesize isAdpativeMode=m_isAdpativeMode;
@property(retain, nonatomic) NSString *referURL; // @synthesize referURL=_referURL;
@property(nonatomic) int connectionMode; // @synthesize connectionMode=m_connectionMode;
@property(nonatomic) _Bool tapScrollPageEnabled; // @synthesize tapScrollPageEnabled=m_tapScrollPageEnabled;
@property(nonatomic) _Bool isEnterNovelMode; // @synthesize isEnterNovelMode=m_isEnterNovelMode;
@property(nonatomic) _Bool textSizeAdjustEnabled; // @synthesize textSizeAdjustEnabled=m_textSizeAdjustEnabled;
@property(retain, nonatomic) NSMutableDictionary *wapCountInfo; // @synthesize wapCountInfo=_wapCountInfo;
@property(retain, nonatomic) RequestEnterRecord *requestEnterRecord; // @synthesize requestEnterRecord=m_requestEnterRecord;
@property(retain, nonatomic) PreReadWebClient *preReadWebClient; // @synthesize preReadWebClient=m_preReadWebClient;
@property(readonly, nonatomic) NSString *uuidString; // @synthesize uuidString=_uuidString;
@property(retain, nonatomic) UIWebBgMaskView *maskView; // @synthesize maskView=m_bgMaskView;
@property(retain, nonatomic) UIImageView *bgView; // @synthesize bgView=m_bgView;
@property(retain, nonatomic) WebViewJSHandler *webviewJsHandler; // @synthesize webviewJsHandler=m_webviewJsHandler;
@property(retain, nonatomic) NSString *currentWebPageUniqueId; // @synthesize currentWebPageUniqueId=_currentWebPageUniqueId;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=m_active;
@property(nonatomic) id <WebViewWrapperDelegate_menuAction> menuDelegate; // @synthesize menuDelegate=_menuDelegate;
@property(nonatomic) id <WebViewWrapperDelegate_scrolling> scrollDelegate; // @synthesize scrollDelegate=_scrollDelegate;
@property(nonatomic) id <UCPVStatObserverProtocol> pvDelegate; // @synthesize pvDelegate=_pvDelegate;
@property(nonatomic) id <WebViewWrapperDelegate_internal> webViewDelegate; // @synthesize webViewDelegate=m_webViewDelegate;
@property(nonatomic) _Bool backForwardByScrolling; // @synthesize backForwardByScrolling;
@property(nonatomic) _Bool forwardNeeded; // @synthesize forwardNeeded;
@property(nonatomic) _Bool backwardNeeded; // @synthesize backwardNeeded;
@property(retain, nonatomic) UIWebViewPub *webView; // @synthesize webView=m_webView;
- (_Bool)isAdvertiseForceDirect;
- (_Bool)isAdvertisePage;
- (void)documentInWebViewAtPoint:(struct CGPoint)arg1 complete:(CDUnknownBlockType)arg2;
- (_Bool)getMenuData:(struct WebViewContextMenuData *)arg1 inWebViewAtPoint:(struct CGPoint)arg2;
- (struct CGPoint)randomLinkPosition;
- (void)bodyHijackDetect;
- (void)doWorksAfterPageOnload:(unsigned long long)arg1;
- (_Bool)isUserNaivgationOutsideWK;
- (void)notifyViewBackforwardDone:(id)arg1;
- (void)delayNotifyViewBackforwardDone;
- (void)delayNotifyViewBackforwardDoneFullCall;
- (void)onFrameFinishLoad:(_Bool)arg1;
- (void)onFrameCommitLoad:(_Bool)arg1;
- (void)webViewPageDidChange;
- (void)webView:(id)arg1 didNavigateWithNavigationData:(id)arg2;
- (void)webViewWillShowInteractionHighlight;
- (void)viewBackforwardDone;
- (id)getBackForwardItemSnapshot:(_Bool)arg1 snapshotIsNightMode:(_Bool *)arg2 hasMaskView:(_Bool *)arg3 contentOffsetY:(float *)arg4;
- (_Bool)isPortrait;
- (id)resizableSnapshotBrowserView;
- (id)coreUIWebView;
- (void)updateCurrentSnapshot;
- (void)setPVInfoOnPageLoaded;
- (void)markPageLoadFinish;
- (void)markT3Arrive;
- (void)markT1Arrive;
- (void)markT0Arrive;
- (void)markAsT3Arrive;
- (void)markAsT1Arrive;
- (void)markAsT0Arrive;
- (void)stopURLRequestThrottle;
- (void)stopURLRequestThrottleByTimer;
- (void)startURLRequestThrottle;
- (void)onMainFrameCommitLoad;
- (void)onPageLoadFailedWithError:(id)arg1;
- (void)onPageLoadFinish;
- (void)checkAndStatPVOnURLChange;
- (void)onPVFinishOnce:(_Bool)arg1;
- (void)startPerformanceRecordOnRequest:(id)arg1 requestType:(int)arg2 isRedirect:(_Bool)arg3;
- (void)onDocumentInteractive;
- (void)onDocumentInteractiveCallback;
- (void)saveSuggestTitle:(id)arg1 withHref:(id)arg2;
- (void)checkSuggestTitleValidForRequest:(id)arg1;
- (void)tryShowSuggestTitle;
- (void)setSuggestTitleValid:(_Bool)arg1;
- (void)resetSuggestTitleInfo;
- (_Bool)shouldDisplaySuggestTitle;
- (void)evaluatingLongPressScript;
- (void)saveHrefInfoAtPoint:(struct CGPoint)arg1;
- (void)checkShouldEnableFastClick;
- (_Bool)canEnableFastClick;
- (void)onPageStateChange:(id)arg1 title:(id)arg2 url:(id)arg3;
- (float)currentSystemFontSizeScaleSetting;
- (void)checkFonSizeChangeWhenPageReset;
- (void)onFontSizeChanged;
- (void)setPageFontSize:(int)arg1;
- (void)calculatePV;
- (id)metaContentForName:(id)arg1;
- (void)webViewMetaDataDidChange:(id)arg1;
- (void)doJavascriptApiAuth;
- (void)detectMetaTagForTextSizeAdjust;
- (_Bool)judgmentMetaForForumPage;
- (void)injectMessageJsonIfNeed;
- (_Bool)judgmentMetaForFullScreen;
- (_Bool)isInAppFullScreenMode;
- (void)willEnterAppFullScreen;
- (void)didExitAppFullScreenModeByUser;
- (void)didEnterAppFullScreenMode;
- (_Bool)checkFullScreen;
- (id)autoFillJSWithHost:(id)arg1;
- (void)checkAutoFill;
- (void)checkFormWithNavigationType:(long long)arg1;
- (void)challengeHandlerDidFinishHandleForError:(id)arg1 error:(id)arg2;
- (_Bool)checkHttpsCertificateUntrustedError:(id)arg1;
- (void)injectLocalADBlockJS;
- (_Bool)injectADBlockJavaScript;
- (_Bool)injectADBlockJS:(int)arg1 requestURL:(id)arg2 adbInited:(_Bool)arg3;
- (void)statNightModePerfermanceWithParams:(id)arg1;
- (void)onThemeCallBack:(id)arg1;
- (_Bool)isSendingMessage:(id)arg1 clearIfMatch:(_Bool)arg2;
- (void)documentInteractiveWithMsg:(id)arg1;
- (void)ucURLProgressManager:(id)arg1 requestTransitFailedWithURLString:(id)arg2 errCode:(long long)arg3 inWebWindowWithUUID:(id)arg4;
- (void)ucURLProgressManager:(id)arg1 progressEndedAlmostWithURLString:(id)arg2 inWebWindowWithUUID:(id)arg3;
- (void)ucURLProgressManager:(id)arg1 requestCommitLoadWithURLString:(id)arg2 inWebWindowWithUUID:(id)arg3;
- (void)ucURLProgressManager:(id)arg1 progressEndedWithURLString:(id)arg2 inWebWindowWithUUID:(id)arg3;
- (void)ucURLProgressManager:(id)arg1 progressChangedTo:(double)arg2 withURLString:(id)arg3 inWebWindowWithUUID:(id)arg4;
- (void)notifyDelegateProgressChanged;
- (void)notifyProgressManagerWindowClose;
- (void)notifyProgressManagerFrameLoadFinishOrFailed;
- (void)notifyProgressManagerDocumentInteractive;
- (void)notifyProgressManagerMainURLStartedWithRequest:(id)arg1;
- (void)injectShoppingJSIfPossible:(id)arg1;
- (void)onProgressEnd;
- (void)onProgressStart;
- (void)onProgressChange:(float)arg1;
- (_Bool)shouldShowProgress;
- (void)pageProgressFinishGuard;
- (void)onMainDocumentShouldStartLoadWithRequest:(id)arg1 navigationType:(long long)arg2 inWebView:(id)arg3;
- (id)urlStringWithRemovingFragmentOfURL:(id)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)isCanTapScrollPageByPoint:(struct CGPoint)arg1;
- (id)findWebScrollView;
- (void)keyboardWillHide:(id)arg1;
- (void)keyboardWillShow:(id)arg1;
- (void)registerKeyboardObs;
- (void)tapScrollPageAtPoint:(struct CGPoint)arg1;
- (void)tapRecognized:(id)arg1;
- (struct CGPoint)convertPointToUIWebView:(struct CGPoint)arg1;
- (void)removeTapGestureRecognizer;
- (void)requireGestureRecognizerToOtherTapGestureRecognizerFailed;
- (void)addTapGestureRecognizer;
- (void)openContextMenuWithData:(struct WebViewContextMenuData *)arg1;
- (void)openPreReadURL;
- (_Bool)canGoForwardToPreReadPage;
- (void)detectPreReadLink;
- (id)getThumbnail;
- (int)getCurLocalPageType;
- (_Bool)canBeShared;
- (_Bool)isHomePageOrInvalidPage;
- (int)getCurPageType;
- (void)dispatchVisibilityChangeWithHidden:(_Bool)arg1;
- (void)dispatchJSEventWithTarget:(id)arg1 eventName:(id)arg2 userInfo:(id)arg3;
- (void)dispatchJSEventName:(id)arg1 userInfo:(id)arg2;
- (void)deregisterMsgHandlerWithMsgName:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
- (_Bool)registerMsgHandlerWithMsgName:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
- (void)deregisterHandleV2WithName:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (_Bool)registerHandlerV2WithName:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (void)deregisterForJSHandler:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (_Bool)registerForJSHandler:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (_Bool)registerForJSHandler:(id)arg1 selector:(SEL)arg2 target:(id)arg3 internal:(_Bool)arg4;
- (_Bool)isInnerAnchor:(id)arg1;
- (void)dismissActiveCtrls;
- (_Bool)canBeRemovedFromSuperview;
- (_Bool)isLoadingOrFirstLayout;
- (id)getUserSelectedContent;
- (_Bool)isContentOffsetIncludeContentInsets;
- (struct CGPoint)contentOffset;
- (_Bool)setUserAgent:(id)arg1;
- (void)setScrollsToTop:(_Bool)arg1;
- (void)setHidden:(_Bool)arg1;
- (void)updateLastRenderPageUrl;
- (void)enableScroll:(_Bool)arg1;
- (void)setContentOffset:(struct CGPoint)arg1 animated:(_Bool)arg2 shouldNotify:(_Bool)arg3;
- (void)setContentOffset:(struct CGPoint)arg1 animated:(_Bool)arg2;
- (void)setScrollIndicatorInsets:(struct UIEdgeInsets)arg1;
- (void)fixWebContentInitialBlack;
@property(nonatomic) struct UIEdgeInsets contentInset; // @synthesize contentInset=_contentInset;
- (id)readerCheckJs;
- (void)checkIfReaderAvailable;
- (void)onReaderDidFinishCheck:(id)arg1;
- (void)onReaderNotify:(id)arg1;
- (_Bool)canCheckReaderMode;
- (void)crossoverIn:(id)arg1;
- (void)crossoverOut:(id)arg1;
- (void)handleMemoryWarning;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)resumeScriptTimers;
- (void)suspendScriptTimers;
- (void)setNotify:(void *)arg1;
- (void)updateForReadModePageCountChange;
- (void)updateForReadModeScroll;
- (void)readingPageChange;
- (void)onReadingModeStateDidChange;
- (id)currentReadingModeInfo;
- (void)onReadModeEndScroll;
- (void)onUCScrollViewDidScroll:(id)arg1;
- (void)checkReadingModeState;
- (void)enableReadingMode:(_Bool)arg1;
- (_Bool)isReadingModeEnabled;
- (_Bool)isSupportReadingMode;
- (void)willChangeToAnotherView:(_Bool)arg1;
- (id)getPageListFromBackForwardList;
- (_Bool)enableSnapshot;
- (void)removePageFromIndex:(int)arg1 beforeIndex:(int)arg2;
- (void)willRemovePagesFromIndex:(int)arg1 beforeIndex:(int)arg2;
- (void)clearFlagsForLoad;
- (void)detachWebView;
- (void)attachWebView;
- (void)releaseWebView;
- (void)createWebViewWithFrame:(struct CGRect)arg1;
- (void)setNeedRedraw:(_Bool)arg1;
- (void)clearLayer;
- (id)getClickDate;
- (struct CGPoint)getClickPoint;
@property(nonatomic) _Bool mediaPlaybackRequiresUserAction;
- (_Bool)inBackforward;
- (_Bool)isBackForarding;
- (void)createWebMaskView;
- (void)releaseBGView;
- (void)hideBGView;
- (void)showBGView;
- (void)createBGView;
- (_Bool)isWebViewOpaque;
- (void)setWebViewOpaque:(_Bool)arg1;
- (_Bool)setContentInsetTopIsValid;
@property(nonatomic) double contentInsetTop; // @synthesize contentInsetTop=_contentInsetTop;
- (void)flashScrollIndicators;
- (id)webViewBackClr;
- (void)setWebViewBackClr:(id)arg1;
- (float)contentOffsetY;
- (_Bool)hasLoadErrorPage;
- (_Bool)isErrorPage;
- (_Bool)isHomePage;
- (id)ucCoreScrollView;
- (id)basicWebView;
- (void)willCloseWebView;
- (id)getRefererUrl;
- (void)evaluatingJavaScript:(id)arg1 withID:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (_Bool)evaluatingJavaScript:(id)arg1 withID:(id)arg2;
- (id)webViewScrollView;
- (id)viewOfWindow;
- (id)webPageURL;
- (id)webPageTitle;
- (void)evaluateJavaScript:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)stringByEvaluatingJavaScriptFromString:(id)arg1;
- (_Bool)isNetworkActive;
- (_Bool)isLoading;
- (_Bool)canGoForward;
- (_Bool)canGoBack;
- (void)preBackForward;
- (void)goForward;
- (void)goBack;
- (void)stopLoading;
- (void)reload;
- (void)loadHTMLString:(id)arg1 baseURL:(id)arg2;
- (void)loadRequest:(id)arg1;
- (_Bool)tryEnableWebVideoUrlSniff:(_Bool)arg1;
- (_Bool)checkIfVideoAvailable;
- (void)startDetectVideoURLs;
- (void)getVideoInfo:(CDUnknownBlockType)arg1;
- (void)updateUCParamURLCacheWithURL:(id)arg1;
- (id)getURLWithoutModify;
- (id)url;
- (id)webViewURL;
- (id)requestURL;
- (id)getURL;
- (id)request;
- (id)getTitle;
- (_Bool)loadWithURL:(id)arg1;
- (void)loadRequest:(id)arg1 nWapCountType:(id)arg2 extID:(id)arg3 isExtWebkitPrefix:(_Bool)arg4 options:(id)arg5;
- (void)setCurrentLoadingParam:(id)arg1;
- (void)resetCurrentLoadingParam:(id)arg1;
- (id)currentLoadingParam;
- (void)loadRequestWithParam:(id)arg1;
- (long long)getFindResultIndex;
- (void)cleanFindResult;
- (void)scrollCurrentTargetToVisibleRange;
- (long long)scrollToCurrentTargetByBtn:(_Bool)arg1;
- (void)clearPageFindResult;
- (id)findImageToShare;
- (long long)findString:(id)arg1;
- (_Bool)canPageSearch;
- (_Bool)handleSpecialURLString:(id)arg1 navigationType:(long long)arg2;
- (void)webViewPageURLDidChange:(id)arg1;
- (void)webViewWillLoadErrorPage:(id)arg1;
- (void)webViewErrorPageDidChange:(id)arg1;
- (void)resetLoadingState;
- (void)forceResetFrameLoadAndBackForwardCountRef;
- (void)updateFrameLoadState:(_Bool)arg1;
- (void)checkIfNotifyBackforwardDone;
- (void)webViewPageFirstFinishLoad:(id)arg1;
- (void)webViewDidSetFrame;
- (_Bool)checkErrorForDownload:(id)arg1;
- (_Bool)checkErrorForVideo:(id)arg1;
- (_Bool)webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)updateConnectionMode;
- (void)savePerformaceTiming;
- (void)webViewDidFinishLoad:(id)arg1;
- (void)webViewDidStartLoad:(id)arg1;
- (void)webViewLoadRequest:(id)arg1;
- (void)onShouldLoadRequest:(id)arg1 navType:(long long)arg2 isMainRequest:(_Bool)arg3;
- (void)onShouldNOTLoadRequest:(id)arg1 navType:(long long)arg2 isMainRequest:(_Bool)arg3;
- (_Bool)shouldLoadMainFrameRequest:(id)arg1 navType:(long long)arg2;
- (_Bool)shouldLoadSubFrameRequest:(id)arg1;
- (_Bool)shouldLoadRequest:(id)arg1 navType:(long long)arg2 isMainRequest:(_Bool)arg3;
- (_Bool)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(long long)arg3 isMainRequest:(_Bool)arg4;
- (void)sendStateChangeToWebViewDelgate:(int)arg1;
- (_Bool)canTurnPageBtnBeOn;
- (void)setFlashScrollIndicators:(_Bool)arg1;
- (void)pageDown:(_Bool)arg1;
- (void)pageUp:(_Bool)arg1;
- (void)JSSyncPageMove;
- (void)scrollPageWithAnimation:(id)arg1 offset:(struct CGPoint)arg2;
- (void)onDidEndScrolling:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDecelerating:(id)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (_Bool)scrollViewShouldScrollToTop:(id)arg1;
- (double)getContentHeight;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)doWorkWithoutObservingScrollContentOffset:(CDUnknownBlockType)arg1;
- (void)removeScrollViewContentOffsetObserver;
- (void)addScrollViewContentOffsetObserver;
- (void)setWebScrollViewContentInset:(struct UIEdgeInsets)arg1;
- (long long)scrollViewTop;
- (void)setWebViewProperty;
- (void)setOpaque:(_Bool)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (id)toUIView;
@property(nonatomic, getter=getProgress, setter=setProgress:) double progress; // @synthesize progress=_progress;
- (void)dealloc;
- (void)willDetachWebView;
- (id)initWithFrame:(struct CGRect)arg1;
- (_Bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)findTextMenu:(id)arg1;
- (void)bigbang:(id)arg1;
- (void)searchMenu:(id)arg1;
- (void)translateMenu:(id)arg1;
- (void)openMenu:(id)arg1;
- (void)copyMenu:(id)arg1;
- (void)share:(id)arg1;
- (void)initCustomMenu;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

