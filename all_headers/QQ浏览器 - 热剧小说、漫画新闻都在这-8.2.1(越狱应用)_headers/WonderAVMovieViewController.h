//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "AirTransferDelegate-Protocol.h"
#import "BaseMoviePlayer-Protocol.h"
#import "MttAlertViewDelegate-Protocol.h"
#import "MttMediaPlaybackObserver-Protocol.h"
#import "MttShareBusinessCenterDataSource-Protocol.h"
#import "MttShareBusinessCenterDelegate-Protocol.h"
#import "MttVideoJSHandlerControlProtocol-Protocol.h"

@class MPVolumeView, NSArray, NSString, NSURL, ShareInfoPack, UIView, WonderLoadingAnimationView, WonderPlayerLayerView;
@protocol BaseMoviePlayerDelegate, BatQvZipDownloader, MovieControlSource, MovieInfoObtainer, MttMediaPlayback;

@interface WonderAVMovieViewController : UIViewController <AirTransferDelegate, MttAlertViewDelegate, MttShareBusinessCenterDataSource, MttShareBusinessCenterDelegate, MttVideoJSHandlerControlProtocol, BaseMoviePlayer, MttMediaPlaybackObserver>
{
    double _startProgress;
    double _startTime;
    _Bool isSeeking;
    _Bool _isScrubbing;
    int _seekingCount;
    _Bool _isBuffering;
    double _fakeBufferProgress;
    _Bool _isEnd;
    _Bool _wasPlaying;
    _Bool _hasStarted;
    _Bool _isStartToLoadDrama;
    _Bool _isAppeared;
    _Bool _isBackToForeground;
    _Bool _inForeground;
    _Bool _prefersStatusBarHidden;
    int _initControlSourceState;
    _Bool _isPlayedFromLocalVideoListView;
    long long _lastSecond;
    _Bool _addObserver;
    _Bool _isFullScreenMode;
    _Bool _isSourceUrl;
    double _playStartTime;
    _Bool _isWifiNetWork;
    _Bool _hasShowNetworkAlert;
    _Bool _isPlayedSniffByNormal;
    _Bool _isInitWithViaWWAN;
    _Bool _shouldSupportPortrait;
    _Bool _doNotSaveInfoWhenDisappear;
    _Bool _adsClick;
    CDUnknownBlockType crossScreenBlock;
    CDUnknownBlockType exitBlock;
    CDUnknownBlockType loginBlock;
    CDUnknownBlockType downloadBlock;
    id <BatQvZipDownloader> batQvZipDownloader;
    CDUnknownBlockType myVideoBlock;
    CDUnknownBlockType errorBlock;
    CDUnknownBlockType openBookmarkBlock;
    CDUnknownBlockType openDownloadBlock;
    id <MovieControlSource> controlSource;
    id <BaseMoviePlayerDelegate> delegate;
    NSURL *_movieURL;
    NSURL *_muDyRealURL;
    NSString *_webURL;
    double _currentPlaybackTime;
    double _adPlaybackTime;
    id <MttMediaPlayback> _videoPlayer;
    long long _playIndex;
    NSArray *_movieURLStrings;
    id <MovieInfoObtainer> _movieInfoObtainer;
    WonderPlayerLayerView *_playerLayerView;
    UIView *_maskView;
    UIView *_overlayView;
    UIView *_controlView;
    ShareInfoPack *_tempShareInfoPack;
    MPVolumeView *_volumeView;
    WonderLoadingAnimationView *_loadingBackgroundView;
}

@property(nonatomic) _Bool adsClick; // @synthesize adsClick=_adsClick;
@property(retain, nonatomic) WonderLoadingAnimationView *loadingBackgroundView; // @synthesize loadingBackgroundView=_loadingBackgroundView;
@property(retain, nonatomic) MPVolumeView *volumeView; // @synthesize volumeView=_volumeView;
@property(nonatomic) _Bool doNotSaveInfoWhenDisappear; // @synthesize doNotSaveInfoWhenDisappear=_doNotSaveInfoWhenDisappear;
@property(nonatomic) _Bool shouldSupportPortrait; // @synthesize shouldSupportPortrait=_shouldSupportPortrait;
@property(retain, nonatomic) ShareInfoPack *tempShareInfoPack; // @synthesize tempShareInfoPack=_tempShareInfoPack;
@property(nonatomic) _Bool isInitWithViaWWAN; // @synthesize isInitWithViaWWAN=_isInitWithViaWWAN;
@property(retain, nonatomic) UIView *controlView; // @synthesize controlView=_controlView;
@property(retain, nonatomic) UIView *overlayView; // @synthesize overlayView=_overlayView;
@property(retain, nonatomic) UIView *maskView; // @synthesize maskView=_maskView;
@property(retain, nonatomic) WonderPlayerLayerView *playerLayerView; // @synthesize playerLayerView=_playerLayerView;
@property(nonatomic) __weak id <MovieInfoObtainer> movieInfoObtainer; // @synthesize movieInfoObtainer=_movieInfoObtainer;
@property(nonatomic) _Bool isPlayedSniffByNormal; // @synthesize isPlayedSniffByNormal=_isPlayedSniffByNormal;
@property(retain, nonatomic) NSArray *movieURLStrings; // @synthesize movieURLStrings=_movieURLStrings;
@property(nonatomic) long long playIndex; // @synthesize playIndex=_playIndex;
@property(retain, nonatomic) id <MttMediaPlayback> videoPlayer; // @synthesize videoPlayer=_videoPlayer;
@property(nonatomic) _Bool hasShowNetworkAlert; // @synthesize hasShowNetworkAlert=_hasShowNetworkAlert;
@property(nonatomic) _Bool isWifiNetWork; // @synthesize isWifiNetWork=_isWifiNetWork;
@property(nonatomic, getter=getAdPlaybackTime) double adPlaybackTime; // @synthesize adPlaybackTime=_adPlaybackTime;
@property(nonatomic, getter=getCurrentPlaybackTime) double currentPlaybackTime; // @synthesize currentPlaybackTime=_currentPlaybackTime;
@property(retain, nonatomic) NSString *webURL; // @synthesize webURL=_webURL;
@property(retain, nonatomic) NSURL *muDyRealURL; // @synthesize muDyRealURL=_muDyRealURL;
@property(retain, nonatomic) NSURL *movieURL; // @synthesize movieURL=_movieURL;
@property(nonatomic) __weak id <BaseMoviePlayerDelegate> delegate; // @synthesize delegate;
@property(nonatomic) _Bool isEnd; // @synthesize isEnd=_isEnd;
@property(retain, nonatomic) id <MovieControlSource> controlSource; // @synthesize controlSource;
@property(copy, nonatomic) CDUnknownBlockType openDownloadBlock; // @synthesize openDownloadBlock;
@property(copy, nonatomic) CDUnknownBlockType openBookmarkBlock; // @synthesize openBookmarkBlock;
@property(copy, nonatomic) CDUnknownBlockType errorBlock; // @synthesize errorBlock;
@property(copy, nonatomic) CDUnknownBlockType myVideoBlock; // @synthesize myVideoBlock;
@property(retain, nonatomic) id <BatQvZipDownloader> batQvZipDownloader; // @synthesize batQvZipDownloader;
@property(copy, nonatomic) CDUnknownBlockType downloadBlock; // @synthesize downloadBlock;
@property(copy, nonatomic) CDUnknownBlockType loginBlock; // @synthesize loginBlock;
@property(copy, nonatomic) CDUnknownBlockType exitBlock; // @synthesize exitBlock;
@property(copy, nonatomic) CDUnknownBlockType crossScreenBlock; // @synthesize crossScreenBlock;
- (void).cxx_destruct;
- (void)checkVRPlay;
- (void)videoJSHandlerControlSetCurrentTime:(double)arg1;
- (_Bool)isShowingAdsVideo;
- (void)showToast:(id)arg1;
- (void)setMute:(_Bool)arg1;
- (void)hideLoadingBackgroundImage;
- (void)showLoadingBackgroundImage;
- (void)shareBusinessCenterPanelDidDismiss;
- (void)willShareToChannel:(int)arg1;
- (id)controllerShareViewWillBePresented;
- (id)shareInfoPack;
- (id)shareText;
- (id)shareURL;
- (void)movieControlSourceOnVideoShare:(id)arg1;
- (void)movieControlSourceOnFeedBack:(id)arg1;
- (void)reportForScalingMode:(long long)arg1;
- (void)mttAlertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)showAlertViewForNoWifiNet;
- (void)checkNetWorkForPlay;
- (void)checkNetWork;
- (void)onReachabilityChanged:(id)arg1;
- (void)shouldStopPlayerNotification;
- (void)didEnterFullScreenNotification;
- (void)willEnterFullScreenNotification;
- (void)resumePlayback;
- (void)onEnterBackground:(id)arg1;
- (void)onResignActive:(id)arg1;
- (void)onEnterForeground:(id)arg1;
- (void)delayPuase;
- (void)movieInfoObtainerFailObtainMovieInfo:(id)arg1;
- (void)movieInfoObtainer:(id)arg1 successObtainMovieInfoWithMutiMovieURL:(id)arg2 withWebURL:(id)arg3 isSourceUrl:(_Bool)arg4 withProgressInfo:(CDStruct_6a564687)arg5;
- (void)movieInfoObtainer:(id)arg1 successObtainMovieInfoWithMovieURL:(id)arg2 withWebURL:(id)arg3 withProgressInfo:(CDStruct_6a564687)arg4;
- (void)movieInfoObtainerBeginObtainMovieInfo:(id)arg1;
- (void)cancelDownloadQvZip;
- (void)batQvZipDownloaderDidAddAllTasks:(id)arg1;
- (void)movieControlSourceDealWithInboxVideo:(id)arg1 copyVideo:(_Bool)arg2;
- (_Bool)movieControlSourceDidStartPlay;
- (void)movieControlSourceDidError:(id)arg1;
- (_Bool)movieControlSourceIsPlayedFromSourceUrl;
- (_Bool)movieControlSourceIsPlayedSniffByNormal;
- (_Bool)movieControlSourceIsLocalMovie:(id)arg1;
- (struct CGRect)movieControlSourceVideoRect;
- (void)movieControlSourceOnCommentLogin:(id)arg1;
- (void)movieControlSourceOpenExternalDownload:(id)arg1;
- (void)movieControlSourceOpenExternalBookmark:(id)arg1;
- (void)movieControlSourceHandleError:(id)arg1;
- (void)movieControlSourceFailToPlayNext:(id)arg1;
- (void)movieControlSource:(id)arg1 didPlayNextMultiStream:(id)arg2 isLocalVideo:(_Bool)arg3 startProgress:(double)arg4;
- (void)movieControlSource:(id)arg1 didPlayNext:(id)arg2 isLocalVideo:(_Bool)arg3 startProgress:(double)arg4;
- (void)movieControlSourceWillPlayNext:(id)arg1;
- (void)movieControlSourceDramaLoadFinished:(id)arg1;
- (void)movieControlSourceRefreshScaleMode:(id)arg1;
- (void)movieControlSource:(id)arg1 showControlView:(_Bool)arg2;
- (void)movieControlSourceOnMyVideo:(id)arg1;
- (void)movieControlSourceOnDownload:(id)arg1;
- (void)setVolumeToSystem:(double)arg1;
- (void)movieControlSource:(id)arg1 increaseVolume:(double)arg2;
- (void)movieControlSource:(id)arg1 increaseBrightness:(double)arg2;
- (void)movieControlSource:(id)arg1 setMaskViewAlpha:(double)arg2;
- (void)movieControlSourceOnCrossScreen:(id)arg1;
- (void)movieControlSourceSwitchToFloatWindow:(id)arg1;
- (void)movieControlSourceEnterFullScreen:(id)arg1;
- (void)movieControlSourceMiniPlay:(id)arg1;
- (void)movieControlSourceExitMiniPlay:(id)arg1;
- (void)movieControlSourceHandlePanGesture:(id)arg1;
- (void)movieControlSourceChangeVROr360;
- (void)movieControlSourceExit:(id)arg1;
- (void)movieControlSourceRetryPlay:(id)arg1 fromProgress:(double)arg2;
- (void)movieControlSourceLoaded:(id)arg1;
- (void)moviePlayControlSwitchVideoScalingMode:(long long)arg1;
- (void)moviePlayControlReplay;
- (void)moviePlayControlendChangeProgress:(double)arg1;
- (void)moviePlayControlBeginChangeProgress;
- (void)moviePlayControlEnd;
- (void)moviePlayControlSetProgress:(double)arg1;
- (void)moviePlayControlResume;
- (void)moviePlayControlPause;
- (void)moviePlayControlPlay;
- (double)playedProgress;
- (id)screenShot:(double)arg1 size:(struct CGSize)arg2;
- (double)getPlayTotalTime;
- (double)getRealWatchTime;
@property(readonly, nonatomic, getter=getDuration) double duration;
- (_Bool)isPlayingAd;
- (void)clearAdTimeAndStatus;
@property(readonly, nonatomic, getter=getAdPlayStatus) long long adPlayStatus;
- (void)miniPlay;
- (void)exit;
- (void)play;
- (void)pause;
- (void)unbuffer;
- (void)buffer;
- (void)scrub:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)endScrubbing:(double)arg1;
- (void)beginScrubbing;
- (_Bool)isLiveCast;
- (void)updateControlInfo;
- (void)updateControlSourceTimeInfo;
- (void)prepareForAdditionalInfo;
- (void)checkAndUpateLiveCastState;
- (void)setupControlSource:(_Bool)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)startToLoadDramaInfo;
- (void)startLoadDramaInfoIfNeed;
- (void)removeAllObserver;
- (float)estimatedDataRate;
- (id)playerError;
- (struct CGSize)naturalSize;
- (void)stroeControllerDisappear;
- (void)stroeControllerPresent;
- (void)addAllObserver;
- (void)videoAdSkipClick;
- (void)videoAdFullClick:(_Bool)arg1;
- (void)videoAdAction:(id)arg1;
- (void)videoAdPlayed;
- (void)videoAdStateChanged:(int)arg1 withError:(id)arg2;
- (void)moviePlayerFailedToPrepareForPlayback;
- (void)moviePlayerLoadStateLoading;
- (void)moviePlayerLikelyToKeepUp;
- (void)moviePlayerBufferEmpty;
- (void)moviePlayerLoadStateReadyForPlay;
- (void)onLoadedTimeRangesChanged;
- (void)moviePlayerLoadStatePreparing;
- (void)moviePlayerScalingModeDidChange;
- (void)moviePlayerPlaybackStatePlaying;
- (void)moviePlayerPlaybackStatePause;
- (void)moviePlayerPlaybackDidFinish:(id)arg1;
- (void)moviePlayerPlayProgressChange;
- (void)moviePlayerPlayGetItem;
- (void)moviePlayerFileToPlayWithErrorCode:(unsigned long long)arg1;
- (_Bool)isFfmPegPlayer;
- (void)playMovieStreamAfterChecking;
- (void)playMutiMovieStream:(long long)arg1 fromProgress:(double)arg2;
- (void)playMovieStream:(id)arg1 fromProgress:(double)arg2;
- (void)playMovieStream:(id)arg1 fromTime:(double)arg2;
- (void)playWithVideoUrl:(id)arg1;
- (void)retryToObtainMovie;
- (void)disableAutoSleep;
- (void)setMovieObtainer:(id)arg1;
- (void)playWithMovieObtainer:(id)arg1;
- (void)playedFromLocalVideoListView;
- (_Bool)isLocalMovie;
- (_Bool)isPlayWhileXz;
- (id)getPlayingMovieURL;
- (id)getPlayingMuDyURL;
- (void)dismissVideoPlayer;
- (void)dismissOnPageVideoPlayerWindow;
- (void)didReceiveMemoryWarning;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (long long)preferredStatusBarUpdateAnimation;
- (long long)preferredStatusBarStyle;
- (_Bool)prefersStatusBarHidden;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)setupView;
- (void)viewDidLayoutSubviews;
- (void)showViaWWANNoticeIfNeed;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)videoWebURL;
- (long long)videoTotalTime;
- (long long)videoPlaybackTime;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(readonly, nonatomic) _Bool usingQBWebView;

@end

