//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "AVPlayerItemOutputPullDelegate-Protocol.h"
#import "TVKQQMPlayback-Protocol.h"

@class AVPlayerItemVideoOutput, AVURLAsset, NSArray, NSDate, NSHashTable, NSMutableURLRequest, NSString, NSTimer, NSURL, NSURLConnection, TVKQLAVPlayer, TVKQLAVPlayerItem, UIImage, UIView;

@interface TVKQQMediaPlayerController : NSObject <AVPlayerItemOutputPullDelegate, TVKQQMPlayback>
{
    _Bool allowsAirPlay;
    _Bool mediaAirPlayVideoActive;
    _Bool fullscreen;
    _Bool mediaExternalPlaybackActive;
    _Bool usesExternalPlaybackWhileExternalScreenIsActive;
    _Bool useApplicationAudioSession;
    _Bool shouldAutoplay;
    _Bool wasScrubbed;
    _Bool wasNeedCancedCache;
    _Bool wasItem0AddedObserver;
    _Bool wasItem1AddedObserver;
    _Bool wasPlayer0AddedObserver;
    _Bool wasPlayer0AddedTimerObserver;
    _Bool wasPlayer1AddedTimerObserver;
    _Bool itemNeedSeek;
    _Bool needRequestFailedItem;
    _Bool wasUpdatedUrls;
    _Bool no302Redirect;
    _Bool sysVersionIs43AndLater;
    _Bool sysVersionIs50AndLater;
    _Bool sysVersionIs60AndLater;
    _Bool manualPaused;
    _Bool maualPlayed;
    _Bool initalPlayed;
    _Bool isReduceFilesArray;
    _Bool shouldCheckAssetKeyStatus;
    _Bool enableVideoScreenShot;
    _Bool isMuted;
    _Bool isResetting;
    _Bool _isInAudioMode;
    _Bool _allowsPictureInPicture;
    _Bool _enableResourceLoader;
    _Bool _enableVRMode;
    _Bool _cacheOederFildDidCached;
    _Bool _isSeeking;
    _Bool _isAirplayActive;
    _Bool _playedFinished;
    NSURL *contentURL;
    NSString *externalPlaybackVideoGravity;
    double duration;
    double playableDuration;
    UIView *view;
    long long checkUrlState;
    long long requestState;
    long long loadState;
    long long playbackState;
    long long seekState;
    double initialPlaybackTime;
    id delegate;
    NSString *version;
    double currentPlaybackTime;
    TVKQLAVPlayer *player;
    TVKQLAVPlayer *player0;
    TVKQLAVPlayer *player1;
    TVKQLAVPlayerItem *playerItem;
    TVKQLAVPlayerItem *cacheItem;
    AVURLAsset *cacheAsset;
    long long selectCachePlayer;
    long long selectPlayingPlayer;
    long long mediaUrlType;
    NSArray *fileUrlsArray;
    NSArray *times;
    long long cacheOrder;
    long long playToOrder;
    long long playingOrder;
    long long seekOrder;
    unsigned long long mediaQuence;
    double itemNeedSeekTime;
    double scrubedTime;
    double preItemsTime;
    double preCacheItemsTime;
    id timeObserver0;
    id timeObserver1;
    NSTimer *protectPlayTimer;
    long long retryConnectNums;
    NSMutableURLRequest *request302;
    NSURLConnection *connection302;
    NSTimer *advancePLayMediaTimer;
    double nextAdvanceTime;
    NSTimer *checkPlayedUsedTimer;
    long long networkType;
    long long needCacheFilesNum;
    double seekNeedToWaitingTime;
    AVPlayerItemVideoOutput *hlsVideoOutput;
    NSHashTable *_observerPlayerItems;
    long long _forceSelectPlayerIndex;
    double _rate;
    double _volume;
    NSTimer *_outputFrameTimer;
    NSDate *_outputPauseStart;
    NSDate *_outputPreviousFireDate;
    AVPlayerItemVideoOutput *_videoOutput0;
    AVPlayerItemVideoOutput *_videoOutput1;
    double _lastGotFrameTime;
    UIImage *_image;
    struct CGSize naturalSize;
    struct CachedFailedData cachedFailedData;
}

@property(nonatomic) _Bool playedFinished; // @synthesize playedFinished=_playedFinished;
@property(nonatomic) UIImage *image; // @synthesize image=_image;
@property(nonatomic) _Bool isAirplayActive; // @synthesize isAirplayActive=_isAirplayActive;
@property(nonatomic) _Bool isSeeking; // @synthesize isSeeking=_isSeeking;
@property(nonatomic) double lastGotFrameTime; // @synthesize lastGotFrameTime=_lastGotFrameTime;
@property(retain, nonatomic) AVPlayerItemVideoOutput *videoOutput1; // @synthesize videoOutput1=_videoOutput1;
@property(retain, nonatomic) AVPlayerItemVideoOutput *videoOutput0; // @synthesize videoOutput0=_videoOutput0;
@property(retain, nonatomic) NSDate *outputPreviousFireDate; // @synthesize outputPreviousFireDate=_outputPreviousFireDate;
@property(retain, nonatomic) NSDate *outputPauseStart; // @synthesize outputPauseStart=_outputPauseStart;
@property(retain, nonatomic) NSTimer *outputFrameTimer; // @synthesize outputFrameTimer=_outputFrameTimer;
@property(nonatomic) double volume; // @synthesize volume=_volume;
@property(nonatomic) double rate; // @synthesize rate=_rate;
@property(nonatomic) _Bool cacheOederFildDidCached; // @synthesize cacheOederFildDidCached=_cacheOederFildDidCached;
@property(nonatomic) long long forceSelectPlayerIndex; // @synthesize forceSelectPlayerIndex=_forceSelectPlayerIndex;
@property(retain, nonatomic) NSHashTable *observerPlayerItems; // @synthesize observerPlayerItems=_observerPlayerItems;
@property(nonatomic) _Bool enableVRMode; // @synthesize enableVRMode=_enableVRMode;
@property(nonatomic) _Bool enableResourceLoader; // @synthesize enableResourceLoader=_enableResourceLoader;
@property(nonatomic) _Bool allowsPictureInPicture; // @synthesize allowsPictureInPicture=_allowsPictureInPicture;
@property(nonatomic) _Bool isInAudioMode; // @synthesize isInAudioMode=_isInAudioMode;
@property(nonatomic) _Bool isResetting; // @synthesize isResetting;
@property(nonatomic) _Bool isMuted; // @synthesize isMuted;
@property(retain, nonatomic) AVPlayerItemVideoOutput *hlsVideoOutput; // @synthesize hlsVideoOutput;
@property(nonatomic) _Bool enableVideoScreenShot; // @synthesize enableVideoScreenShot;
@property(nonatomic) _Bool shouldCheckAssetKeyStatus; // @synthesize shouldCheckAssetKeyStatus;
@property(nonatomic) double seekNeedToWaitingTime; // @synthesize seekNeedToWaitingTime;
@property(nonatomic) struct CachedFailedData cachedFailedData; // @synthesize cachedFailedData;
@property(nonatomic) _Bool isReduceFilesArray; // @synthesize isReduceFilesArray;
@property(nonatomic) long long needCacheFilesNum; // @synthesize needCacheFilesNum;
@property(nonatomic) long long networkType; // @synthesize networkType;
@property(retain, nonatomic) NSTimer *checkPlayedUsedTimer; // @synthesize checkPlayedUsedTimer;
@property(nonatomic) _Bool initalPlayed; // @synthesize initalPlayed;
@property(nonatomic) _Bool maualPlayed; // @synthesize maualPlayed;
@property(nonatomic) _Bool manualPaused; // @synthesize manualPaused;
@property(nonatomic) double nextAdvanceTime; // @synthesize nextAdvanceTime;
@property(retain, nonatomic) NSTimer *advancePLayMediaTimer; // @synthesize advancePLayMediaTimer;
@property(nonatomic) _Bool sysVersionIs60AndLater; // @synthesize sysVersionIs60AndLater;
@property(nonatomic) _Bool sysVersionIs50AndLater; // @synthesize sysVersionIs50AndLater;
@property(nonatomic) _Bool sysVersionIs43AndLater; // @synthesize sysVersionIs43AndLater;
@property(retain, nonatomic) NSURLConnection *connection302; // @synthesize connection302;
@property(retain, nonatomic) NSMutableURLRequest *request302; // @synthesize request302;
@property(nonatomic) _Bool no302Redirect; // @synthesize no302Redirect;
@property(nonatomic) long long retryConnectNums; // @synthesize retryConnectNums;
@property(retain, nonatomic) NSTimer *protectPlayTimer; // @synthesize protectPlayTimer;
@property(retain, nonatomic) id timeObserver1; // @synthesize timeObserver1;
@property(retain, nonatomic) id timeObserver0; // @synthesize timeObserver0;
@property(nonatomic) double preCacheItemsTime; // @synthesize preCacheItemsTime;
@property(nonatomic) double preItemsTime; // @synthesize preItemsTime;
@property(nonatomic) double scrubedTime; // @synthesize scrubedTime;
@property(nonatomic) _Bool wasUpdatedUrls; // @synthesize wasUpdatedUrls;
@property(nonatomic) _Bool needRequestFailedItem; // @synthesize needRequestFailedItem;
@property(nonatomic) double itemNeedSeekTime; // @synthesize itemNeedSeekTime;
@property(nonatomic) _Bool itemNeedSeek; // @synthesize itemNeedSeek;
@property(nonatomic) _Bool wasPlayer1AddedTimerObserver; // @synthesize wasPlayer1AddedTimerObserver;
@property(nonatomic) _Bool wasPlayer0AddedTimerObserver; // @synthesize wasPlayer0AddedTimerObserver;
@property(nonatomic) _Bool wasPlayer0AddedObserver; // @synthesize wasPlayer0AddedObserver;
@property(nonatomic) _Bool wasItem1AddedObserver; // @synthesize wasItem1AddedObserver;
@property(nonatomic) _Bool wasItem0AddedObserver; // @synthesize wasItem0AddedObserver;
@property(nonatomic) _Bool wasNeedCancedCache; // @synthesize wasNeedCancedCache;
@property(nonatomic) _Bool wasScrubbed; // @synthesize wasScrubbed;
@property(nonatomic) unsigned long long mediaQuence; // @synthesize mediaQuence;
@property(nonatomic) long long seekOrder; // @synthesize seekOrder;
@property(nonatomic) long long playingOrder; // @synthesize playingOrder;
@property(readonly, nonatomic) long long playToOrder; // @synthesize playToOrder;
@property(nonatomic) long long cacheOrder; // @synthesize cacheOrder;
@property(retain, nonatomic) NSArray *times; // @synthesize times;
@property(retain, nonatomic) NSArray *fileUrlsArray; // @synthesize fileUrlsArray;
@property(nonatomic) long long mediaUrlType; // @synthesize mediaUrlType;
@property(nonatomic) long long selectPlayingPlayer; // @synthesize selectPlayingPlayer;
@property(nonatomic) long long selectCachePlayer; // @synthesize selectCachePlayer;
@property(retain, nonatomic) AVURLAsset *cacheAsset; // @synthesize cacheAsset;
@property(nonatomic) TVKQLAVPlayerItem *cacheItem; // @synthesize cacheItem;
@property(nonatomic) TVKQLAVPlayerItem *playerItem; // @synthesize playerItem;
@property(retain, nonatomic) TVKQLAVPlayer *player1; // @synthesize player1;
@property(retain, nonatomic) TVKQLAVPlayer *player0; // @synthesize player0;
@property(nonatomic) TVKQLAVPlayer *player; // @synthesize player;
@property(copy, nonatomic) NSString *version; // @synthesize version;
@property(nonatomic) __weak id delegate; // @synthesize delegate;
@property(nonatomic) _Bool shouldAutoplay; // @synthesize shouldAutoplay;
@property(nonatomic) double initialPlaybackTime; // @synthesize initialPlaybackTime;
@property(readonly, nonatomic) long long seekState; // @synthesize seekState;
@property(readonly, nonatomic) long long playbackState; // @synthesize playbackState;
@property(readonly, nonatomic) long long loadState; // @synthesize loadState;
@property(readonly, nonatomic) long long requestState; // @synthesize requestState;
@property(readonly, nonatomic) long long checkUrlState; // @synthesize checkUrlState;
@property(readonly, nonatomic) UIView *view; // @synthesize view;
@property(nonatomic) _Bool useApplicationAudioSession; // @synthesize useApplicationAudioSession;
@property(readonly, nonatomic) double duration; // @synthesize duration;
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity; // @synthesize externalPlaybackVideoGravity;
@property(nonatomic) _Bool usesExternalPlaybackWhileExternalScreenIsActive; // @synthesize usesExternalPlaybackWhileExternalScreenIsActive;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen; // @synthesize fullscreen;
@property(readonly, nonatomic) struct CGSize naturalSize; // @synthesize naturalSize;
@property(nonatomic) _Bool allowsAirPlay; // @synthesize allowsAirPlay;
@property(retain, nonatomic) NSURL *contentURL; // @synthesize contentURL;
- (void).cxx_destruct;
- (struct CGSize)currentVideoRect;
- (_Bool)isPictureInPicturePossible;
- (void)stopPIPMode;
- (void)startPIPMode;
@property(readonly, nonatomic) NSDate *currentDate;
- (void)countPlayedTime:(id)arg1;
- (void)manualSwithPlayersView:(id)arg1;
- (void)monitorCurrentPlayingStatus:(id)arg1;
- (void)mediaCurrentItemTimeBaseChange:(double)arg1;
- (void)timebaseNotification:(id)arg1;
- (void)playerItemDidReachEnd:(id)arg1;
- (_Bool)shouldPlayNextMediaFileWithItem:(id)arg1;
- (void)starttoPLayTheNextMediaFile:(id)arg1;
- (void)changeOrderValues;
- (void)checkPlayerIsVisual;
- (void)monitorPlayingStateWithItemEndToPlay;
- (void)monitorPlayingStateWithItemEnd;
- (void)removeObserversAfterItemEnd;
- (void)checkMediaUrlError:(long long)arg1 withError:(id)arg2 withIsCurrentMediaFile:(_Bool)arg3;
- (_Bool)seekFinishedShouldStartPlay;
- (void)checkPlay:(CDUnknownBlockType)arg1;
- (void)changePlayerLoadState:(long long)arg1 withError:(id)arg2 withMediaCacheOrder:(long long)arg3 withIsCurrentMediaFile:(_Bool)arg4;
- (void)changePlayerPlaybackState:(long long)arg1 withError:(id)arg2 withMediaCacheOrder:(long long)arg3 withIsCurrentMediaFile:(_Bool)arg4;
- (void)endPlayerCache;
- (void)changePlayerRequestState:(long long)arg1 withError:(id)arg2 withMediaRequestOrder:(long long)arg3 withIsCurrentMediaFile:(_Bool)arg4;
- (void)changeStructCachedFailedData:(_Bool)arg1 withCacheOrder:(long long)arg2;
- (void)changeWhichPlayerToPlay:(_Bool)arg1 withJumpTime:(CDStruct_1b6d18a9)arg2;
- (void)changeWhichPlayerIsCurrentPlayer;
- (id)otherPlayer;
- (void)removeOtherPlayerResourceWithPlayerIndex:(long long)arg1;
- (void)itemDidRemoved:(id)arg1;
- (void)removeNotificaton:(id)arg1;
- (void)removePlayerItemObserver:(id)arg1 withPlayerObserver:(id)arg2;
- (void)removePlayerObserver:(id)arg1;
- (void)removeAVPlayerItemObservers:(id)arg1;
- (void)removePlayerTimeObserver;
- (void)clearPlayerResource:(id)arg1;
- (void)initScrubberTimer;
- (void)playerAddTimeObserver:(id)arg1 withTimeObserverIndex:(long long)arg2;
- (void)mediaPlayerCacheStateDidChangeUpdateCanPlayTime;
- (void)syncScrubber;
- (void)checkPlayingIsNormalInSeperate:(id)arg1;
- (void)mediaPLayerOccuredFailed:(id)arg1;
- (void)startPlayWithInterval:(id)arg1;
- (void)monitorStartPlayWithInterval:(id)arg1;
- (void)startToCacheNextMP4;
- (CDStruct_1b6d18a9)playerItemDuration;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)checkDuration;
- (void)playerCacheStateDidChangeWithError:(id)arg1 withFileCacheOrder:(long long)arg2 withCacheState:(long long)arg3 withIsCurrentPlayFile:(_Bool)arg4;
- (_Bool)checkThePlayerBufferState:(id)arg1;
- (void)retryConnectMediaFileWithPlayFailed:(id)arg1;
- (void)startConnectMediaFileWithCancelOtherRequests;
- (void)resetValues;
- (void)makePlayerItemToNil:(id)arg1;
- (void)makePlayerToNil;
- (void)makePlayer1ToNil;
- (void)makePlayer0ToNil;
- (void)controlPlayerItem:(id)arg1 withJumpTime:(double)arg2 withChangePlayState:(_Bool)arg3;
- (void)slideAirplay:(id)arg1;
- (void)switchPlayerAndView:(_Bool)arg1 withJumpTime:(CDStruct_1b6d18a9)arg2;
- (_Bool)checkAirplayEffect:(id)arg1;
- (void)removeHLSVideoOutput;
- (id)getMp4CurrentShots:(long long)arg1 timeTolerance:(double)arg2 interval:(double)arg3 error:(id *)arg4;
- (id)getHLSCurrentShot;
- (id)getCurrentVideoScreenShot;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
- (void)cancelTheAssetLoading:(id)arg1;
- (void)reConnectMediaFileWithApplication:(id)arg1;
- (void)closeMediaPlayer;
- (void)mediaPlayerRetryRequestUrls:(double)arg1;
- (void)slideHLS:(double)arg1;
- (void)updateContentsUrls:(id)arg1 withTimes:(id)arg2 withStartCacheNextFile:(_Bool)arg3;
- (void)updateContentsUrls:(id)arg1;
- (void)mediaContentsUrls:(id)arg1 withContentTimes:(id)arg2 withContentType:(long long)arg3;
- (id)initWithContentUrls:(id)arg1 withContentTimes:(id)arg2 withContentType:(long long)arg3;
- (void)checkTheInitaTimeToSeekItem;
- (id)init;
- (void)dealloc;
- (void)removeAppDelegateNotification;
- (void)addAppDelegateNotification;
- (void)applicationDidBecomeActive;
- (void)applicationDidEnterBackground;
- (void)addPlayItemByURL:(id)arg1 withCacheOrder:(long long)arg2;
- (void)prepareToPlayAsset:(id)arg1 withMediaUrl:(id)arg2 withIsAsset:(_Bool)arg3 withKeys:(id)arg4 withCacheOrder:(long long)arg5 withMediaQuence:(long long)arg6;
- (void)makeFirstPlayer:(id)arg1 withSecondPlayer:(id)arg2 withCacheOrder:(long long)arg3;
- (void)makeAssetSate;
- (void)addObserverForPlayer:(id)arg1;
- (void)addobserverForPlayerItem:(id)arg1 withForPlayer:(id)arg2;
@property(readonly, nonatomic) double downloadSpeed;
- (id)checkCurrentCachePlayer;
- (long long)mediaPlayerCacheState;
@property(readonly, nonatomic) double playableDuration; // @synthesize playableDuration;
@property(nonatomic) double currentPlaybackTime; // @synthesize currentPlaybackTime;
@property(readonly, nonatomic) _Bool mediaExternalPlaybackActive; // @synthesize mediaExternalPlaybackActive;
@property(readonly, nonatomic) _Bool mediaAirPlayVideoActive; // @synthesize mediaAirPlayVideoActive;
- (void)slideMP4:(double)arg1;
@property(readonly, nonatomic) NSArray *urls;
- (long long)countMP4Order:(double)arg1;
- (double)countPasedMP4Times:(long long)arg1;
- (void)cancelTheCachingItem:(long long)arg1 withToCacheOrder:(long long)arg2;
- (void)cancelFailedCachingItem:(long long)arg1 withToCacheOrder:(long long)arg2;
- (void)switchToPlay:(long long)arg1 withTime:(CDStruct_1b6d18a9)arg2;
- (void)modieyStates;
- (void)removeAllObserversAndStopPlayers;
- (void)stop;
- (void)pause;
- (void)play:(_Bool)arg1;
- (void)play;
- (void)tryToPlay:(_Bool)arg1;
- (void)tryToPlay;
- (void)changePlayerPlaybackStateToPause;
- (_Bool)changePlayerPlaybackStateToPlaying:(_Bool)arg1;
- (_Bool)changePlayerPlaybackStateToPlaying;
- (void)removeAllSeeksRequests;
- (void)cancelPlayerItemPending:(id)arg1 WithIOSVersion:(double)arg2;
- (void)handleTimedMetadata:(id)arg1;
- (void)outputSequenceWasFlushed:(id)arg1;
- (void)outputMediaDataWillChange:(id)arg1;
- (void)outputFrameTimerFunc:(id)arg1;
- (void)resumeOutputFrame;
- (void)pauseOutputFrame;
- (void)stopOutputFrame;
- (void)startOutputFrame:(double)arg1;
- (double)getPlayerVolume;
- (void)setPlayerVolume:(double)arg1;
- (float)getCurrentPlayerItemTimebaseRate;
- (float)getCurrentPlayerRate;
- (float)getPlayerRateSetting;
- (void)setPlayerRate:(double)arg1;
- (void)setCurrentPlayerMuted:(_Bool)arg1;
- (void)checkRedirect:(id)arg1;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)redirectTheRealUrl:(id)arg1;
- (void)mediaPlayerAirPlayVideoActive:(_Bool)arg1;
- (void)sendMediaPlayerLog:(int)arg1 withLogInfo:(id)arg2;
- (void)sendItemTimeInfo:(id)arg1;
- (void)sendDebugInfo:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

