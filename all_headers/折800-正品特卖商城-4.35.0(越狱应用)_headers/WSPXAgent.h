//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "WSPXHTTPProtocolDelegate-Protocol.h"

@class NSArray, NSDictionary, NSString, WSPXAuth, WSPXConfig, WSPXConfiguration, WSPXHookManager, WSPXLogReportManager, WSPXMtunnelManager, WSPXNetDiagnoseManager, WSPXNetworkTypeManager, WSPXPrecacheManager, WSPXProbeManager, WSPXThirdTestManager;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface WSPXAgent : NSObject <WSPXHTTPProtocolDelegate>
{
    NSObject<OS_dispatch_source> *_timer;
    NSObject<OS_dispatch_queue> *_hijackDetectionQueue;
    _Bool _shouldHijack;
    WSPXConfig *config;
    WSPXAuth *authManager;
    long long _startAndAuthResult;
    NSDictionary *_latestConfig;
    WSPXHookManager *_hookManager;
    WSPXMtunnelManager *_mtunnelManager;
    WSPXProbeManager *_probeManager;
    WSPXNetworkTypeManager *_networkManager;
    WSPXLogReportManager *_logManager;
    WSPXConfiguration *_wspxConfiguration;
    WSPXPrecacheManager *_precacheManager;
    WSPXThirdTestManager *_thirdTestManager;
    WSPXNetDiagnoseManager *_netDiagnoseManager;
    NSArray *_ipListFromDNS;
    NSString *_maaNodeHost;
    NSString *_maaNodeIp;
    NSArray *_maaNodeIpList;
}

+ (id)shareInstance;
@property(copy, nonatomic) NSArray *maaNodeIpList; // @synthesize maaNodeIpList=_maaNodeIpList;
@property(copy, nonatomic) NSString *maaNodeIp; // @synthesize maaNodeIp=_maaNodeIp;
@property(copy, nonatomic) NSString *maaNodeHost; // @synthesize maaNodeHost=_maaNodeHost;
@property(retain) NSArray *ipListFromDNS; // @synthesize ipListFromDNS=_ipListFromDNS;
@property(retain, nonatomic) WSPXNetDiagnoseManager *netDiagnoseManager; // @synthesize netDiagnoseManager=_netDiagnoseManager;
@property(retain, nonatomic) WSPXThirdTestManager *thirdTestManager; // @synthesize thirdTestManager=_thirdTestManager;
@property(retain, nonatomic) WSPXPrecacheManager *precacheManager; // @synthesize precacheManager=_precacheManager;
@property(retain, nonatomic) WSPXConfiguration *wspxConfiguration; // @synthesize wspxConfiguration=_wspxConfiguration;
@property(retain, nonatomic) WSPXLogReportManager *logManager; // @synthesize logManager=_logManager;
@property(retain, nonatomic) WSPXNetworkTypeManager *networkManager; // @synthesize networkManager=_networkManager;
@property(retain, nonatomic) WSPXProbeManager *probeManager; // @synthesize probeManager=_probeManager;
@property(retain, nonatomic) WSPXMtunnelManager *mtunnelManager; // @synthesize mtunnelManager=_mtunnelManager;
@property(retain, nonatomic) WSPXHookManager *hookManager; // @synthesize hookManager=_hookManager;
@property(retain, nonatomic) NSDictionary *latestConfig; // @synthesize latestConfig=_latestConfig;
@property(nonatomic) _Bool shouldHijack; // @synthesize shouldHijack=_shouldHijack;
@property(nonatomic) long long startAndAuthResult; // @synthesize startAndAuthResult=_startAndAuthResult;
@property(retain, nonatomic) WSPXAuth *authManager; // @synthesize authManager;
@property(retain, nonatomic) WSPXConfig *config; // @synthesize config;
- (void).cxx_destruct;
- (void)wspxHTTPProtocol:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)wspxHTTPProtocol:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (_Bool)wspxHTTPProtocol:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)resetMtunnelWithBestNode:(id)arg1 secondNode:(id)arg2 additionalBacken:(id)arg3;
- (void)resetMtunnelWithAdditionalBacken:(id)arg1;
- (void)resetMtunnelWithBestNode:(id)arg1 secondNode:(id)arg2;
- (void)resetMtunnelWithBestNode:(id)arg1;
- (_Bool)shouldSendAccessLogToUser;
- (void)stopHijackDetection;
- (void)startHijackDetection;
- (void)loadConfig;
- (void)buildAgent;
- (id)init;
- (void)setup;
- (int)hookTcpWithAddr:(const char *)arg1 port:(int)arg2;
- (void)unhook;
- (void)hook;
- (_Bool)hookActivated;
- (_Bool)enableSDK;
- (id)startFailedDescriptionWithReason:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

