//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "VideoItem.h"

@class NSDate, NSString;

@interface SVPDownloadVideoInfo : VideoItem
{
    _Bool _isADPlayed;
    _Bool _isMadPlayed;
    _Bool _hasAlbumInfo;
    _Bool _savePhotoAlbum;
    _Bool _videoAlbumInfoIsRecording;
    float _score;
    long long _videoDefinition;
    NSString *_copyrightID;
    NSString *_albumImageUrl;
    unsigned long long _standardDefinitionVideoSize;
    unsigned long long _standardH265DefinitionVideoSize;
    unsigned long long _highDefinitionVideoSize;
    unsigned long long _highH265DefinitionVideoSize;
    unsigned long long _ultraDefinitionVideoSize;
    unsigned long long _ultraH265DefinitionVideoSize;
    unsigned long long _originalDefinitionVideoSize;
    unsigned long long _originalH265DefinitionVideoSize;
    NSString *_videoMP4Url;
    NSString *_redirectedVideoM3U8Url;
    long long _videoPlaybackTime;
    NSDate *_finishedPlayingDate;
    NSString *_pgcVideoTitle;
    long long _showTitleStyle;
    NSString *_videoTransCodeTime;
    long long _effectiveAlbum;
    long long _videoAlbumDataType;
    NSString *_recordVideoM3U8Url;
}

@property(copy, nonatomic) NSString *recordVideoM3U8Url; // @synthesize recordVideoM3U8Url=_recordVideoM3U8Url;
@property(nonatomic) _Bool videoAlbumInfoIsRecording; // @synthesize videoAlbumInfoIsRecording=_videoAlbumInfoIsRecording;
@property(nonatomic) long long videoAlbumDataType; // @synthesize videoAlbumDataType=_videoAlbumDataType;
@property(nonatomic) long long effectiveAlbum; // @synthesize effectiveAlbum=_effectiveAlbum;
@property(nonatomic) _Bool savePhotoAlbum; // @synthesize savePhotoAlbum=_savePhotoAlbum;
@property(copy, nonatomic) NSString *videoTransCodeTime; // @synthesize videoTransCodeTime=_videoTransCodeTime;
@property(nonatomic) long long showTitleStyle; // @synthesize showTitleStyle=_showTitleStyle;
@property(copy, nonatomic) NSString *pgcVideoTitle; // @synthesize pgcVideoTitle=_pgcVideoTitle;
@property(retain, nonatomic) NSDate *finishedPlayingDate; // @synthesize finishedPlayingDate=_finishedPlayingDate;
@property(nonatomic) long long videoPlaybackTime; // @synthesize videoPlaybackTime=_videoPlaybackTime;
@property(copy, nonatomic) NSString *redirectedVideoM3U8Url; // @synthesize redirectedVideoM3U8Url=_redirectedVideoM3U8Url;
@property(copy, nonatomic) NSString *videoMP4Url; // @synthesize videoMP4Url=_videoMP4Url;
@property(nonatomic) unsigned long long originalH265DefinitionVideoSize; // @synthesize originalH265DefinitionVideoSize=_originalH265DefinitionVideoSize;
@property(nonatomic) unsigned long long originalDefinitionVideoSize; // @synthesize originalDefinitionVideoSize=_originalDefinitionVideoSize;
@property(nonatomic) unsigned long long ultraH265DefinitionVideoSize; // @synthesize ultraH265DefinitionVideoSize=_ultraH265DefinitionVideoSize;
@property(nonatomic) unsigned long long ultraDefinitionVideoSize; // @synthesize ultraDefinitionVideoSize=_ultraDefinitionVideoSize;
@property(nonatomic) unsigned long long highH265DefinitionVideoSize; // @synthesize highH265DefinitionVideoSize=_highH265DefinitionVideoSize;
@property(nonatomic) unsigned long long highDefinitionVideoSize; // @synthesize highDefinitionVideoSize=_highDefinitionVideoSize;
@property(nonatomic) unsigned long long standardH265DefinitionVideoSize; // @synthesize standardH265DefinitionVideoSize=_standardH265DefinitionVideoSize;
@property(nonatomic) unsigned long long standardDefinitionVideoSize; // @synthesize standardDefinitionVideoSize=_standardDefinitionVideoSize;
@property(copy, nonatomic) NSString *albumImageUrl; // @synthesize albumImageUrl=_albumImageUrl;
@property(nonatomic) _Bool hasAlbumInfo; // @synthesize hasAlbumInfo=_hasAlbumInfo;
@property(nonatomic) _Bool isMadPlayed; // @synthesize isMadPlayed=_isMadPlayed;
@property(nonatomic) _Bool isADPlayed; // @synthesize isADPlayed=_isADPlayed;
@property(copy, nonatomic) NSString *copyrightID; // @synthesize copyrightID=_copyrightID;
@property(nonatomic) long long videoDefinition; // @synthesize videoDefinition=_videoDefinition;
@property(nonatomic) float score; // @synthesize score=_score;
- (void).cxx_destruct;
- (_Bool)isPGC;
@property(readonly, getter=isDownloadUrlExpired) _Bool downloadUrlExpired;
@property(readonly, copy, nonatomic) NSString *playRecordDisplayTip; // @dynamic playRecordDisplayTip;
@property(readonly, nonatomic) _Bool hasFinishedPlaying; // @dynamic hasFinishedPlaying;
- (id)getVideoM3U8UrlWithDefinition:(long long)arg1;
@property(readonly, copy, nonatomic) NSString *videoM3U8Url; // @dynamic videoM3U8Url;
@property(readonly, nonatomic) unsigned long long videoSize; // @dynamic videoSize;
- (id)toJSONDictionary;
- (void)updateWithJSONDictionary:(id)arg1;
- (void)removeAlbumAndBigHorImage;
- (void)preLoadVideoAlbumImage;
- (void)preLoadVideoImage;
- (id)_videoImageUrl;
- (void)_downImage:(id)arg1 expirationInterval:(double)arg2;

@end

