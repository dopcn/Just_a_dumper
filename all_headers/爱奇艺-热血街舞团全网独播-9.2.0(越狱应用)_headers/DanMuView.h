//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "CAAnimationDelegate-Protocol.h"

@class DMSystemModel, DanMuModel, DanMuNewView, NSMutableArray, NSString, QYDanmuLabelConfiguration;
@protocol OS_dispatch_queue;

@interface DanMuView : NSObject <CAAnimationDelegate>
{
    _Bool _isSplitScreen;
    _Bool _hidden;
    _Bool _isMaskColor;
    _Bool _isMaskPicture;
    _Bool _isPaused;
    _Bool _isEmotionSwitch;
    float _opacity;
    float _dmLabelContentHeight;
    long long _danMuCellNum;
    DanMuNewView *_danmuBaseView;
    long long _bullet_spd;
    long long _barrage_distancetotop;
    long long _barrage_linebetweenspace;
    long long _barrage_cellheight;
    QYDanmuLabelConfiguration *_danmuLabelSetting;
    long long _danmuFont;
    long long _danmuDefaultFont;
    NSString *_regularRule;
    NSString *_imgResoursePath;
    CDUnknownBlockType _dmviewBc;
    CDUnknownBlockType _isLockScreenBc;
    unsigned long long _callType;
    unsigned long long _numOfProcessingTransaction;
    NSMutableArray *_danMuAllCellArray;
    NSMutableArray *_fixedDanmuTrackArray;
    NSMutableArray *_dmLabelPool;
    long long _currentTime;
    long long _RtrackCount;
    long long _markDrawMSTime;
    double _trackHeight;
    NSObject<OS_dispatch_queue> *_dataQueue;
    NSMutableArray *_danMuAllArray;
    NSMutableArray *_danMuTextArray;
    NSMutableArray *_danMuPicArray;
    DanMuModel *_fakeDanmu;
    DMSystemModel *_lastSystemDanmu;
    long long _lastSystemDanmuShowTime;
    NSMutableArray *_systemDanmuArray;
    NSMutableArray *_topDanmuArray;
    NSMutableArray *_bottomDanmuArray;
    long long _markSetDataMSTime;
    struct CGRect _superFrame;
}

@property(nonatomic) long long markSetDataMSTime; // @synthesize markSetDataMSTime=_markSetDataMSTime;
@property(retain, nonatomic) NSMutableArray *bottomDanmuArray; // @synthesize bottomDanmuArray=_bottomDanmuArray;
@property(retain, nonatomic) NSMutableArray *topDanmuArray; // @synthesize topDanmuArray=_topDanmuArray;
@property(retain, nonatomic) NSMutableArray *systemDanmuArray; // @synthesize systemDanmuArray=_systemDanmuArray;
@property(nonatomic) long long lastSystemDanmuShowTime; // @synthesize lastSystemDanmuShowTime=_lastSystemDanmuShowTime;
@property(retain, nonatomic) DMSystemModel *lastSystemDanmu; // @synthesize lastSystemDanmu=_lastSystemDanmu;
@property(retain, nonatomic) DanMuModel *fakeDanmu; // @synthesize fakeDanmu=_fakeDanmu;
@property(retain, nonatomic) NSMutableArray *danMuPicArray; // @synthesize danMuPicArray=_danMuPicArray;
@property(retain, nonatomic) NSMutableArray *danMuTextArray; // @synthesize danMuTextArray=_danMuTextArray;
@property(retain, nonatomic) NSMutableArray *danMuAllArray; // @synthesize danMuAllArray=_danMuAllArray;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dataQueue; // @synthesize dataQueue=_dataQueue;
@property(nonatomic) double trackHeight; // @synthesize trackHeight=_trackHeight;
@property(nonatomic) float dmLabelContentHeight; // @synthesize dmLabelContentHeight=_dmLabelContentHeight;
@property(nonatomic) long long markDrawMSTime; // @synthesize markDrawMSTime=_markDrawMSTime;
@property(nonatomic) long long RtrackCount; // @synthesize RtrackCount=_RtrackCount;
@property(nonatomic) long long currentTime; // @synthesize currentTime=_currentTime;
@property(nonatomic) _Bool isEmotionSwitch; // @synthesize isEmotionSwitch=_isEmotionSwitch;
@property(retain, nonatomic) NSMutableArray *dmLabelPool; // @synthesize dmLabelPool=_dmLabelPool;
@property(retain, nonatomic) NSMutableArray *fixedDanmuTrackArray; // @synthesize fixedDanmuTrackArray=_fixedDanmuTrackArray;
@property(retain, nonatomic) NSMutableArray *danMuAllCellArray; // @synthesize danMuAllCellArray=_danMuAllCellArray;
@property(nonatomic) unsigned long long numOfProcessingTransaction; // @synthesize numOfProcessingTransaction=_numOfProcessingTransaction;
@property(nonatomic) _Bool isPaused; // @synthesize isPaused=_isPaused;
@property(nonatomic) unsigned long long callType; // @synthesize callType=_callType;
@property(copy, nonatomic) CDUnknownBlockType isLockScreenBc; // @synthesize isLockScreenBc=_isLockScreenBc;
@property(copy, nonatomic) CDUnknownBlockType dmviewBc; // @synthesize dmviewBc=_dmviewBc;
@property(retain, nonatomic) NSString *imgResoursePath; // @synthesize imgResoursePath=_imgResoursePath;
@property(retain, nonatomic) NSString *regularRule; // @synthesize regularRule=_regularRule;
@property(nonatomic) long long danmuDefaultFont; // @synthesize danmuDefaultFont=_danmuDefaultFont;
@property(nonatomic) _Bool isMaskPicture; // @synthesize isMaskPicture=_isMaskPicture;
@property(nonatomic) _Bool isMaskColor; // @synthesize isMaskColor=_isMaskColor;
@property(nonatomic) long long danmuFont; // @synthesize danmuFont=_danmuFont;
@property(retain, nonatomic) QYDanmuLabelConfiguration *danmuLabelSetting; // @synthesize danmuLabelSetting=_danmuLabelSetting;
@property(nonatomic) struct CGRect superFrame; // @synthesize superFrame=_superFrame;
@property(nonatomic) long long barrage_cellheight; // @synthesize barrage_cellheight=_barrage_cellheight;
@property(nonatomic) long long barrage_linebetweenspace; // @synthesize barrage_linebetweenspace=_barrage_linebetweenspace;
@property(nonatomic) long long barrage_distancetotop; // @synthesize barrage_distancetotop=_barrage_distancetotop;
@property(nonatomic) float opacity; // @synthesize opacity=_opacity;
@property(nonatomic) long long bullet_spd; // @synthesize bullet_spd=_bullet_spd;
@property(nonatomic) _Bool hidden; // @synthesize hidden=_hidden;
@property(retain, nonatomic) DanMuNewView *danmuBaseView; // @synthesize danmuBaseView=_danmuBaseView;
@property(nonatomic) _Bool isSplitScreen; // @synthesize isSplitScreen=_isSplitScreen;
@property(nonatomic) long long danMuCellNum; // @synthesize danMuCellNum=_danMuCellNum;
- (void).cxx_destruct;
- (void)addToReusePool:(id)arg1;
- (id)dequeueDMLabel;
- (_Bool)__isFixedDanmu:(id)arg1;
- (_Bool)__isRoleDanmu:(id)arg1;
- (_Bool)__isSystemDanmu:(id)arg1;
- (_Bool)_isScreenLock;
- (void)handleDanmuLabelClickWithType:(_Bool)arg1 andData:(id)arg2;
- (_Bool)handleSpecilDanmuIsMask:(id)arg1;
- (_Bool)shouldDanmuBeFiltered:(id)arg1;
- (void)seekToTimeToUpdateDanMu;
- (void)configurateDanmuLabel:(id)arg1 withInfo:(id)arg2 layerHeight:(double)arg3;
- (void)setupDanmuLabel:(id)arg1 info:(id)arg2 fontSize:(double)arg3 cellNum:(unsigned long long)arg4 superView:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)clearCurrentDanMuIsALL:(_Bool)arg1;
- (void)removeOutsideDanmuLayerForPartlyMask;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (void)createFixedAnimation:(id)arg1 mirrorLabel:(id)arg2;
- (void)createAnimationDanmuWithDirectionType:(unsigned long long)arg1 WithLabel:(id)arg2 WithMirrorLabel:(id)arg3 WithRate:(float)arg4;
- (void)stop;
- (void)resume;
- (void)pause;
- (void)setEmotionSwitch:(_Bool)arg1;
- (void)createLabelWith:(id)arg1 andBase:(id)arg2 andMirror:(id)arg3 andLastLabel:(id)arg4 andNum:(unsigned long long)arg5 andArr:(id)arg6;
- (id)getDanmuFromArray:(id)arg1 currentTime:(unsigned long long)arg2;
- (id)getSystemDanmuWithCurrentTime:(unsigned long long)arg1 isPreprocessed:(_Bool)arg2;
- (id)getFixedDanmuFromBottom:(_Bool)arg1 currentTime:(unsigned long long)arg2;
- (id)getDanmu:(unsigned long long)arg1 currentTime:(unsigned long long)arg2 maxTrackCount:(unsigned long long)arg3;
- (void)setSystemDanmuList:(id)arg1;
- (void)addUserSender:(id)arg1;
- (void)classifiesDanmuData;
- (void)setDanMuData:(id)arg1;
- (long long)findEmptySlot:(id)arg1 fromBottom:(_Bool)arg2 lower:(long long)arg3 upper:(long long)arg4;
- (void)continuingDrawAndShowDanMu:(double)arg1;
- (void)updateDanmuCurrentTime:(double)arg1;
- (void)updateSpeedWithPlayerRate:(double)arg1;
- (void)updateTrackProps;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 Line:(long long)arg2 fromType:(unsigned long long)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

