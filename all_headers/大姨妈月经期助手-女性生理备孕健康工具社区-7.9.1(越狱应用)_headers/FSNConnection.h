//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSURLConnectionDelegate-Protocol.h"

@class NSData, NSDictionary, NSError, NSHTTPURLResponse, NSMutableData, NSOutputStream, NSRecursiveLock, NSString, NSURL, NSURLConnection, NSURLResponse;
@protocol NSObject;

@interface FSNConnection : NSObject <NSURLConnectionDelegate>
{
    _Bool _shouldRunInBackground;
    _Bool _didStart;
    _Bool _didFinishLoading;
    _Bool _didComplete;
    int _method;
    int _concurrencyCountAtStart;
    NSURL *_url;
    NSDictionary *_headers;
    NSDictionary *_parameters;
    CDUnknownBlockType _parseBlock;
    CDUnknownBlockType _completionBlock;
    CDUnknownBlockType _progressBlock;
    NSURLResponse *_response;
    NSOutputStream *_responseStream;
    id <NSObject> _parseResult;
    NSError *_error;
    long long _uploadProgressBytes;
    long long _uploadExpectedBytes;
    long long _downloadProgressBytes;
    double _startTime;
    double _challengeInterval;
    double _responseInterval;
    double _finishOrFailInterval;
    double _parseInterval;
    NSMutableData *_mutableResponseData;
    NSURLConnection *_connection;
    NSRecursiveLock *_blocksLock;
    unsigned long long _taskIdentifier;
}

+ (id)withUrl:(id)arg1 method:(int)arg2 headers:(id)arg3 parameters:(id)arg4 parseBlock:(CDUnknownBlockType)arg5 completionBlock:(CDUnknownBlockType)arg6 progressBlock:(CDUnknownBlockType)arg7;
+ (void)cancelAllConnections;
+ (id)connections;
+ (id)mutableConnections;
@property(nonatomic) unsigned long long taskIdentifier; // @synthesize taskIdentifier=_taskIdentifier;
@property(retain, nonatomic) NSRecursiveLock *blocksLock; // @synthesize blocksLock=_blocksLock;
@property(retain, nonatomic) NSURLConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) NSMutableData *mutableResponseData; // @synthesize mutableResponseData=_mutableResponseData;
@property(nonatomic) double parseInterval; // @synthesize parseInterval=_parseInterval;
@property(nonatomic) double finishOrFailInterval; // @synthesize finishOrFailInterval=_finishOrFailInterval;
@property(nonatomic) double responseInterval; // @synthesize responseInterval=_responseInterval;
@property(nonatomic) double challengeInterval; // @synthesize challengeInterval=_challengeInterval;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) int concurrencyCountAtStart; // @synthesize concurrencyCountAtStart=_concurrencyCountAtStart;
@property(nonatomic) long long downloadProgressBytes; // @synthesize downloadProgressBytes=_downloadProgressBytes;
@property(nonatomic) long long uploadExpectedBytes; // @synthesize uploadExpectedBytes=_uploadExpectedBytes;
@property(nonatomic) long long uploadProgressBytes; // @synthesize uploadProgressBytes=_uploadProgressBytes;
@property(nonatomic) _Bool didComplete; // @synthesize didComplete=_didComplete;
@property(nonatomic) _Bool didFinishLoading; // @synthesize didFinishLoading=_didFinishLoading;
@property(nonatomic) _Bool didStart; // @synthesize didStart=_didStart;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) id <NSObject> parseResult; // @synthesize parseResult=_parseResult;
@property(retain, nonatomic) NSOutputStream *responseStream; // @synthesize responseStream=_responseStream;
@property(retain, nonatomic) NSURLResponse *response; // @synthesize response=_response;
@property(copy, nonatomic) CDUnknownBlockType progressBlock; // @synthesize progressBlock=_progressBlock;
@property(copy, nonatomic) CDUnknownBlockType completionBlock; // @synthesize completionBlock=_completionBlock;
@property(copy, nonatomic) CDUnknownBlockType parseBlock; // @synthesize parseBlock=_parseBlock;
@property(retain, nonatomic) NSDictionary *parameters; // @synthesize parameters=_parameters;
@property(retain, nonatomic) NSDictionary *headers; // @synthesize headers=_headers;
@property(nonatomic) _Bool shouldRunInBackground; // @synthesize shouldRunInBackground=_shouldRunInBackground;
@property(nonatomic) int method; // @synthesize method=_method;
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
- (void).cxx_destruct;
- (id)makeNSURLRequest;
- (id)makePostBodyWithBoundary:(id)arg1;
- (id)makeRequestString;
- (void)reportProgress;
- (void)performReportProgress;
@property(readonly, nonatomic) float downloadProgress;
@property(readonly, nonatomic) float uploadProgress;
@property(readonly, nonatomic) long long downloadExpectedBytes;
- (void)didExpireInBackground;
- (void)endBackgroundTask;
- (void)cancel;
- (id)start;
- (void)complete;
- (void)performComplete;
- (void)failWithError:(id)arg1;
- (void)parse;
- (void)callOrDispatchParse;
- (void)cancelConnection;
- (void)cleanup;
- (void)clearBlocks;
- (double)intervalSinceStart;
@property(readonly, nonatomic) NSData *responseData;
@property(readonly, nonatomic) NSHTTPURLResponse *httpResponse;
@property(readonly, nonatomic) _Bool didSucceed;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (_Bool)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (_Bool)connectionShouldUseCredentialStorage:(id)arg1;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (id)init;
@property(readonly, copy) NSString *description;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

