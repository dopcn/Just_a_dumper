//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "BasePlayer.h"

#import "APIServiceDelegate-Protocol.h"
#import "CloudServiceDelegate-Protocol.h"
#import "CoverLrcSearchDelegate-Protocol.h"
#import "CustActionSheetDelegate-Protocol.h"
#import "DownloadHanlderDelegate-Protocol.h"
#import "MTStatusBarOverlayDelegate-Protocol.h"
#import "MusicPopViewDelegate-Protocol.h"
#import "OnlinePlayLeftVcDelegate-Protocol.h"
#import "ScrollTextViewDelegate-Protocol.h"
#import "UITextFieldDelegate-Protocol.h"

@class Accompany, AlertViewHandle, CustActionSheet, MusicPopView, MusicSlider, NSArray, NSString, NSTimer, NonAdTypeContent, OnlinePlayLeftVC, QualitySelectActionView, UIActivityIndicatorView, UIButton, UIImageView, UILabel, UIPageControl, UITableView, UITextField, UIView;

@interface OnlinePlayerVC : BasePlayer <ScrollTextViewDelegate, OnlinePlayLeftVcDelegate, MTStatusBarOverlayDelegate, CustActionSheetDelegate, APIServiceDelegate, DownloadHanlderDelegate, MusicPopViewDelegate, CloudServiceDelegate, CoverLrcSearchDelegate, UITextFieldDelegate>
{
    NSArray *tracks;
    UIImageView *frontViewBgImage;
    _Bool _showAlbumSearchBtn;
    _Bool _haveAlbum;
    UITextField *searchTrackName;
    UITextField *searchArtistName;
    UIButton *accompanyBtn;
    UIView *playProgressSliderBg;
    MusicSlider *playProgressSlider;
    UIButton *_progressBoxBtn;
    UIImageView *sliderFill;
    _Bool isSliding;
    UILabel *currentTime;
    UILabel *TotalTime;
    UILabel *totalTimeLabel;
    _Bool trackFailed;
    UIView *blackView;
    UIActivityIndicatorView *indicator;
    double alphaValue;
    AlertViewHandle *_alertView;
    UIView *_playAlbumViewBg;
    UIView *frontViewBgImageBlackMaskView;
    UILabel *_plTrackCount;
    UILabel *_plName;
    UIView *_plBgView;
    NSArray *_errReportInfoArray;
    _Bool playlistDidEnd;
    _Bool _becomaviableisExecuted;
    _Bool _isLocalList;
    _Bool _needBlurWhenTrackChanged;
    CustActionSheet *downloadActionSheet;
    CustActionSheet *shareActionSheet;
    NSString *originalNavItemTitle;
    UITextField *_searchTrackName;
    UITextField *_searchArtistName;
    UIButton *_songQBtn;
    MusicPopView *_popView;
    UIPageControl *_pagesControl;
    NSString *_currentTimeString;
    UILabel *_thirdPartyLabel;
    Accompany *_curAccompany;
    double _tracklArtistLabelYGap;
    UIButton *_moreButton;
    UIButton *_listButton;
    QualitySelectActionView *_qualitySelectActionView;
    UIButton *_bgButton;
    UIView *_playilistHeader;
    UIButton *_playlistHideBtn;
    UIView *_upBlack;
    long long _fetchImageCount;
    UIView *_tpAdContentView;
    UIImageView *_reverseAdBgView;
    UIImageView *_albumReverseAdView;
    UIImageView *_blurAlbumReverseAdView;
    UIImageView *_topAlbumImagView;
    UIImageView *_topBlurBgImagView;
    NSTimer *_reverseFirstTimer;
    NSTimer *_reverseTimer;
    NonAdTypeContent *_typeContent;
    OnlinePlayLeftVC *_leftSrVC;
    NSArray *_artistList;
    UITableView *_artistListView;
    UITableView *_errReportListView;
    UIButton *_rewardBtn;
}

+ (id)player;
+ (id)playerWithTrackList:(id)arg1 bLocalList:(_Bool)arg2;
@property(retain, nonatomic) UIButton *rewardBtn; // @synthesize rewardBtn=_rewardBtn;
@property(retain, nonatomic) UITableView *errReportListView; // @synthesize errReportListView=_errReportListView;
@property(retain, nonatomic) UITableView *artistListView; // @synthesize artistListView=_artistListView;
@property(retain, nonatomic) NSArray *artistList; // @synthesize artistList=_artistList;
@property(retain, nonatomic) OnlinePlayLeftVC *leftSrVC; // @synthesize leftSrVC=_leftSrVC;
@property(retain, nonatomic) NonAdTypeContent *typeContent; // @synthesize typeContent=_typeContent;
@property(retain, nonatomic) NSTimer *reverseTimer; // @synthesize reverseTimer=_reverseTimer;
@property(retain, nonatomic) NSTimer *reverseFirstTimer; // @synthesize reverseFirstTimer=_reverseFirstTimer;
@property(retain, nonatomic) UIImageView *topBlurBgImagView; // @synthesize topBlurBgImagView=_topBlurBgImagView;
@property(retain, nonatomic) UIImageView *topAlbumImagView; // @synthesize topAlbumImagView=_topAlbumImagView;
@property(retain, nonatomic) UIImageView *blurAlbumReverseAdView; // @synthesize blurAlbumReverseAdView=_blurAlbumReverseAdView;
@property(retain, nonatomic) UIImageView *albumReverseAdView; // @synthesize albumReverseAdView=_albumReverseAdView;
@property(retain, nonatomic) UIImageView *reverseAdBgView; // @synthesize reverseAdBgView=_reverseAdBgView;
@property(nonatomic) __weak UIView *tpAdContentView; // @synthesize tpAdContentView=_tpAdContentView;
@property(nonatomic) long long fetchImageCount; // @synthesize fetchImageCount=_fetchImageCount;
@property(retain, nonatomic) UIView *upBlack; // @synthesize upBlack=_upBlack;
@property(retain, nonatomic) UIButton *playlistHideBtn; // @synthesize playlistHideBtn=_playlistHideBtn;
@property(retain, nonatomic) UIView *playilistHeader; // @synthesize playilistHeader=_playilistHeader;
@property(retain, nonatomic) UIButton *bgButton; // @synthesize bgButton=_bgButton;
@property _Bool needBlurWhenTrackChanged; // @synthesize needBlurWhenTrackChanged=_needBlurWhenTrackChanged;
@property(retain, nonatomic) QualitySelectActionView *qualitySelectActionView; // @synthesize qualitySelectActionView=_qualitySelectActionView;
@property(retain, nonatomic) UIButton *listButton; // @synthesize listButton=_listButton;
@property(retain, nonatomic) UIButton *moreButton; // @synthesize moreButton=_moreButton;
@property(nonatomic) double tracklArtistLabelYGap; // @synthesize tracklArtistLabelYGap=_tracklArtistLabelYGap;
@property(retain, nonatomic) Accompany *curAccompany; // @synthesize curAccompany=_curAccompany;
@property(retain, nonatomic) UILabel *thirdPartyLabel; // @synthesize thirdPartyLabel=_thirdPartyLabel;
@property(copy, nonatomic) NSString *currentTimeString; // @synthesize currentTimeString=_currentTimeString;
@property(nonatomic) _Bool isLocalList; // @synthesize isLocalList=_isLocalList;
@property(retain, nonatomic) UIPageControl *pagesControl; // @synthesize pagesControl=_pagesControl;
@property(retain, nonatomic) MusicPopView *popView; // @synthesize popView=_popView;
@property(retain) UIButton *songQBtn; // @synthesize songQBtn=_songQBtn;
@property _Bool becomaviableisExecuted; // @synthesize becomaviableisExecuted=_becomaviableisExecuted;
@property(retain, nonatomic) UITextField *searchArtistName; // @synthesize searchArtistName=_searchArtistName;
@property(retain, nonatomic) UITextField *searchTrackName; // @synthesize searchTrackName=_searchTrackName;
@property(copy, nonatomic) NSString *originalNavItemTitle; // @synthesize originalNavItemTitle;
@property(nonatomic) _Bool playlistDidEnd; // @synthesize playlistDidEnd;
@property(retain, nonatomic) CustActionSheet *shareActionSheet; // @synthesize shareActionSheet;
@property(retain, nonatomic) CustActionSheet *downloadActionSheet; // @synthesize downloadActionSheet;
@property(retain, nonatomic) NSArray *tracks; // @synthesize tracks;
- (void).cxx_destruct;
- (void)showTencentResourceTipWithTrack:(id)arg1 completeBlock:(CDUnknownBlockType)arg2;
- (_Bool)canPlayTencentResourceWithIndex:(long long)arg1;
- (void)showPlayList;
- (void)hidePlayList;
- (void)adjustPlayingCell;
- (void)actionDislike;
- (void)actionaccompanyBtn;
- (void)applyTheme;
- (void)picturesByTrackIdFetched:(id)arg1 userInfo:(id)arg2;
- (void)searchLrcPicFetched:(id)arg1 userInfo:(id)arg2;
- (_Bool)picturesFetched:(id)arg1 memTrack:(id)arg2;
- (void)showOldSmallImageOrDefault:(id)arg1;
- (void)httpFailed:(id)arg1 userInfo:(id)arg2;
- (_Bool)fetchCoverByTrackImageURL:(id)arg1 memTrack:(id)arg2 readLocal:(_Bool)arg3;
- (_Bool)fetchCoverForLocalTrack:(id)arg1;
- (id)loadLocalSearchPic:(id)arg1;
- (void)_loadLrcFailed;
- (_Bool)parseLRCData:(id)arg1;
- (void)showRewardViewAction;
- (void)rewardBtnDidClick:(id)arg1;
- (void)prepareForRewardEntranceView;
- (void)lrcView:(id)arg1 didFinishWithResult:(_Bool)arg2;
- (void)switchBlurBgWithAnimationWithImg:(id)arg1;
- (void)switchAlbumImg:(id)arg1;
- (void)setDefaultAlbumImage;
- (void)_albumIsDefault;
- (void)headerImageGaussianBlur;
- (void)_albumIsAvailable;
- (void)doBlurOrShowDefault;
- (void)_albumIsReady:(id)arg1;
- (_Bool)_isNativeTrack:(id)arg1;
- (void)coverLrcFetched:(id)arg1 coverUrl:(id)arg2 lrcUrl:(id)arg3 lrcData:(id)arg4 image:(id)arg5;
- (void)sliderOnEndingMove:(id)arg1;
- (void)sliderValueChanged:(id)arg1;
- (void)resetIsSliding;
- (void)sliderOnMoving:(id)arg1;
- (void)progressChangeTo:(id)arg1;
- (void)bufferCachedTo:(id)arg1;
- (void)handleBufferCached:(id)arg1;
- (void)handlePlayListChanged:(id)arg1;
- (void)player:(id)arg1 didFail:(id)arg2 errorType:(int)arg3 aPlayerErrorType:(int)arg4;
- (void)trackFaild:(id)arg1;
- (void)didFinishLoading;
- (void)fadeOutPause;
- (void)sleepTimer;
- (void)playListDidEnd;
- (void)_trackDidEndPlaying:(id)arg1;
- (void)playerTrackDidEndPlaying:(id)arg1;
- (void)showAd;
- (void)playerTrackDidBecomeAvailable:(id)arg1;
- (void)readyToPlayTrack:(id)arg1;
- (void)playerTrackReadyToPlay:(id)arg1;
- (void)handleDidSelectTrack:(id)arg1;
- (void)updateAlbumAndArtistName:(id)arg1;
- (void)handleFadeOut:(id)arg1;
- (void)startPlayingTrackAtIndex:(int)arg1 isPause:(_Bool)arg2;
- (void)startPlayingTrackAtIndex:(int)arg1;
- (_Bool)isLocalPlayList;
- (void)playSongWithIndex:(long long)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (void)addFavSongToLikeSongList:(id)arg1;
- (void)favSongNotificationToWatchWithTrack:(id)arg1;
- (void)doRemoveFavSongFailed:(id)arg1;
- (void)doRemoveFavSongSuccess:(id)arg1;
- (void)doAddFavSongFailed:(id)arg1 errorText:(id)arg2;
- (void)doAddFavSongSuccess:(id)arg1;
- (void)downloadActionStarted:(_Bool)arg1 withTrackID:(id)arg2;
- (void)doFinish:(id)arg1;
- (_Bool)shouldFinish:(id)arg1;
- (_Bool)textField:(id)arg1 shouldChangeCharactersInRange:(struct _NSRange)arg2 replacementString:(id)arg3;
- (void)textFieldDidChange:(id)arg1;
- (_Bool)checkBlockForImportedSong;
- (void)share;
- (void)setFavor;
- (void)actionToFavSong;
- (void)download;
- (void)actionSleep;
- (void)actionSongQualitySettingBtn;
- (void)actionEqSettingButton;
- (void)didSelectType:(int)arg1;
- (void)actionMoreButton;
- (void)actionPlayList;
- (void)addToPlaylist;
- (void)actionMVDetailBtn:(id)arg1;
- (void)refreshMVFeedBackFrom;
- (void)actionAlbumDetailBtn:(id)arg1;
- (void)actionSingerDetailBtn:(id)arg1;
- (void)actionSearchBtn:(id)arg1;
- (void)hideErrReportInfo;
- (void)actionReportErrInfo:(id)arg1;
- (void)reportErrorInfoWithIndex:(unsigned long long)arg1;
- (void)sendFeedBackASIWithContent:(id)arg1 contact:(id)arg2;
- (void)actionArtistName;
- (void)changeMode;
- (void)shuffleMode;
- (void)setMode:(int)arg1;
- (void)skip;
- (void)pre;
- (void)playBtnTaped;
- (void)pauseBtnTaped;
- (void)reverseAdJumpToDetail;
- (void)loadTPAd;
- (void)dismissMobileAd;
- (void)dismissNonMobileAd;
- (void)setplayerDownloadBtnStatus:(_Bool)arg1;
- (void)setFavButtonPressed;
- (void)setFavButtonNormal;
- (void)setFavButtonStatus:(_Bool)arg1;
- (void)searchLrcPicViewStatus;
- (void)kingSongMusicLabelStatus:(id)arg1;
- (void)thirdPartyMusicLabelStatus:(id)arg1;
- (void)trackNameLabelView;
- (void)layoutLabelButtonOnNameChanged;
- (void)layoutMarks;
- (void)playerViewUIStatus:(id)arg1 enable:(_Bool)arg2;
- (void)uiStatusFromOnline:(id)arg1 buttonEnable:(_Bool)arg2;
- (void)uiStatusOfDownloadedOrOfflinedFromLocal;
- (void)uiStatusOfIpodOrImported;
- (void)uiStatusOfIpodLibrary;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)bgScrollView:(id)arg1 scrollToPage:(int)arg2;
- (void)refreshSleepTimeStatus;
- (void)accompanyBtnStates:(id)arg1 force:(_Bool)arg2;
- (void)refreshPlayListTableView:(_Bool)arg1;
- (void)updateUI;
- (void)clean;
- (void)resetUIStatus;
- (void)playerTrackFailed:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (void)viewDidUnload;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)refreshPlayerView:(_Bool)arg1;
- (void)updatePlayBtn;
- (void)refreshCommentUI;
- (void)getCommentNum;
- (void)changeAdTheme;
- (void)hideAlbumReverseAdViewAfterdisplayTime;
- (void)showReverseTime:(id)arg1 blurImg:(id)arg2 displayTime:(long long)arg3 delay:(long long)arg4;
- (void)removeReverseAdContent;
- (void)showAlbumReverseAd;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (id)lrcView;
- (void)updateTrackNamesAlphaForIp4s:(double)arg1;
- (void)loadView;
- (id)onlinePlayProgress;
- (id)songQualitySettingBtn;
- (id)nextBtn;
- (id)prevBtn;
- (id)modeBtn;
- (id)pauseBtn;
- (id)playBtn;
- (id)modeImagePressNames;
- (id)modeImageNormalNames;
- (void)initPageIndecators;
- (void)initFrontViewMaskView;
- (void)initAirPlayView;
- (void)jumpToSinger:(id)arg1 SingerId:(id)arg2 status:(id)arg3;
- (void)hideArtists:(CDUnknownBlockType)arg1;
- (void)hideArtistListWithAnimation;
- (void)showArtists:(id)arg1;
- (void)leftVcOnHeadCellTappedWithIndex:(unsigned long long)arg1;
- (void)viewTapped:(id)arg1;
- (void)viewTapped:(id)arg1 withTouches:(id)arg2;
- (void)updateSongQualityTitile;
- (void)actionSongQuality:(id)arg1;
- (void)initArtistAlbumNameImgView;
- (void)initScrollViewPages;
- (void)initBgScrollView;
- (void)initPlayListTableView;
- (void)commentButtonClick;
- (void)initPlayProgress;
- (void)initPlayPageNavView;
- (void)initAlbumBgView;
- (void)initFrontView;
- (void)downloadFinish:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

