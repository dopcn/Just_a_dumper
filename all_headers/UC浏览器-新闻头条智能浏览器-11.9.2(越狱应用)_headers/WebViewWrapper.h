//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "Horizontal3TabScrollViewDataSrc-Protocol.h"
#import "JSHandlerRegisteProtocol-Protocol.h"
#import "ReaderWebViewDelegate-Protocol.h"
#import "ReaderWebViewScrollDelegate-Protocol.h"
#import "UCPVStatObserverProtocol-Protocol.h"
#import "WebViewWrapperDelegate_internal-Protocol.h"
#import "WebViewWrapperDelegate_menuAction-Protocol.h"
#import "WebViewWrapperDelegate_scroll-Protocol.h"
#import "WebViewWrapperDelegate_scrolling-Protocol.h"
#import "WebkitBasicWebView-Protocol.h"
#import "WebkitJSEventProtocol-Protocol.h"

@class Horizontal3TabScrollView, NSDate, NSMutableArray, NSString, ReaderWebView, UCWebViewEx, WebViewFacade;
@protocol BackForwardCoordinator, UCPVStatObserverProtocol, UIWebViewExProtocol, WebViewDelegate, WebViewWrapperDelegate_menuAction;

@interface WebViewWrapper : UIView <JSHandlerRegisteProtocol, WebkitBasicWebView, UCPVStatObserverProtocol, ReaderWebViewDelegate, ReaderWebViewScrollDelegate, WebViewWrapperDelegate_menuAction, Horizontal3TabScrollViewDataSrc, WebViewWrapperDelegate_internal, WebViewWrapperDelegate_scroll, WebViewWrapperDelegate_scrolling, WebkitJSEventProtocol>
{
    id <UIWebViewExProtocol> _uiWebView;
    ReaderWebView *_readerWebView;
    _Bool _active;
    _Bool _naviTop;
    _Bool _pageTop;
    _Bool _backforwardAnimationEnabled;
    _Bool _isPendingRequest;
    _Bool _excludeHomePage;
    _Bool _isWKWebViewEnv;
    int _injectJsMask;
    UCWebViewEx *_ucWebView;
    struct MUINotify *_notify;
    id <WebViewWrapperDelegate_menuAction> menuDelegate;
    id _activeViewDummy;
    id <WebViewDelegate> _delegate;
    unsigned long long _windowType;
    unsigned long long _webviewType;
    NSDate *_lastGoBackDate;
    id <UCPVStatObserverProtocol> _pvObserver;
    NSString *_pendingSuggestTitle;
    NSString *_pendingHrefForSuggestTitle;
    id <BackForwardCoordinator> _webViewCoordinator;
    Horizontal3TabScrollView *_horizontalScrollView;
    WebViewFacade *_activeViewFacade;
    NSMutableArray *_cachePendingRequestArray;
    struct UIEdgeInsets _mContentInset;
    struct UIEdgeInsets _scrollIndicatorInsets;
}

+ (void)request:(id)arg1 withURLString:(id)arg2 to:(struct AccessHead *)arg3;
@property(retain, nonatomic) NSMutableArray *cachePendingRequestArray; // @synthesize cachePendingRequestArray=_cachePendingRequestArray;
@property(retain, nonatomic) WebViewFacade *activeViewFacade; // @synthesize activeViewFacade=_activeViewFacade;
@property(retain, nonatomic) Horizontal3TabScrollView *horizontalScrollView; // @synthesize horizontalScrollView=_horizontalScrollView;
@property(retain, nonatomic) id <BackForwardCoordinator> webViewCoordinator; // @synthesize webViewCoordinator=_webViewCoordinator;
@property(retain, nonatomic) NSString *pendingHrefForSuggestTitle; // @synthesize pendingHrefForSuggestTitle=_pendingHrefForSuggestTitle;
@property(retain, nonatomic) NSString *pendingSuggestTitle; // @synthesize pendingSuggestTitle=_pendingSuggestTitle;
@property(nonatomic) id <UCPVStatObserverProtocol> pvObserver; // @synthesize pvObserver=_pvObserver;
@property(retain, nonatomic) NSDate *lastGoBackDate; // @synthesize lastGoBackDate=_lastGoBackDate;
@property(nonatomic) _Bool isWKWebViewEnv; // @synthesize isWKWebViewEnv=_isWKWebViewEnv;
@property(nonatomic) struct UIEdgeInsets scrollIndicatorInsets; // @synthesize scrollIndicatorInsets=_scrollIndicatorInsets;
@property(nonatomic) _Bool excludeHomePage; // @synthesize excludeHomePage=_excludeHomePage;
@property(nonatomic) _Bool isPendingRequest; // @synthesize isPendingRequest=_isPendingRequest;
@property(nonatomic) int injectJsMask; // @synthesize injectJsMask=_injectJsMask;
@property(nonatomic) unsigned long long webviewType; // @synthesize webviewType=_webviewType;
@property(nonatomic) unsigned long long windowType; // @synthesize windowType=_windowType;
@property(nonatomic) _Bool backforwardAnimationEnabled; // @synthesize backforwardAnimationEnabled=_backforwardAnimationEnabled;
@property(nonatomic) struct UIEdgeInsets mContentInset; // @synthesize mContentInset=_mContentInset;
@property(nonatomic) id <WebViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic, getter=isPageTop) _Bool pageTop; // @synthesize pageTop=_pageTop;
@property(nonatomic, getter=isNaviTop) _Bool naviTop; // @synthesize naviTop=_naviTop;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(nonatomic) id activeViewDummy; // @synthesize activeViewDummy=_activeViewDummy;
@property(nonatomic) id <WebViewWrapperDelegate_menuAction> menuDelegate; // @synthesize menuDelegate;
@property(nonatomic) struct MUINotify *notify; // @synthesize notify=_notify;
@property(retain, nonatomic) ReaderWebView *readerWebView; // @synthesize readerWebView=_readerWebView;
- (void)dispatchVisibilityChangeWithHidden:(_Bool)arg1;
- (void)dispatchJSEventWithTarget:(id)arg1 eventName:(id)arg2 userInfo:(id)arg3;
- (void)dispatchJSEventName:(id)arg1 userInfo:(id)arg2;
- (id)webViewBackClr;
- (void)setWebViewBackClr:(id)arg1;
- (void)findTextInPage:(id)arg1;
- (_Bool)canFindTextInPage;
- (void)wordSegment:(id)arg1;
- (void)translateContent:(id)arg1;
- (void)searchContent:(id)arg1;
- (void)copyContent:(id)arg1;
- (void)share;
- (void)readerWebView:(id)arg1 pageDidScrollToContentOffset:(struct CGPoint)arg2 withDecelerate:(_Bool)arg3;
- (void)readerWebView:(id)arg1 openNewRequest:(id)arg2;
- (id)nextPageURL;
- (_Bool)canReaderViewSplicePage;
- (void)closeReaderView:(_Bool)arg1 needCleanup:(_Bool)arg2;
- (_Bool)openReaderView:(_Bool)arg1;
- (void)onDownloadStartWithDownloadSchemeURLString:(id)arg1;
- (void)onDownloadStartWithInfo:(id)arg1;
- (void)webviewDidLongPressOnBlank;
- (void)openContextMenuWithData:(struct WebViewContextMenuData *)arg1 requestURL:(id)arg2 hidingBKOpen:(_Bool)arg3 hidingDownload:(_Bool)arg4;
- (_Bool)isAdvertiseForceDirect;
- (_Bool)isAdvertisePage;
- (_Bool)isWebkitPageDispalying;
- (_Bool)isCurrentWindowActiveView:(id)arg1;
- (_Bool)tryHandlingSpecialRequest:(id)arg1 fromAddressInput:(_Bool)arg2;
- (_Bool)canSniffBT:(id)arg1;
- (_Bool)isMatchReaderModeBlackList:(id)arg1;
- (_Bool)isMatchFontWhiteList:(id)arg1;
- (void)onCalculatePV:(id)arg1 currentURL:(id)arg2;
- (void)onShareImageButtonClickedWithUrl:(id)arg1 filePath:(id)arg2 isCacheExist:(_Bool)arg3;
- (int)getWebViewContentInsetOfBottom;
- (int)getWebViewContentInsetOfTop;
- (_Bool)isFullAppScreen;
- (int)getWebViewTopOffset;
- (void)viewBackforwardDone;
- (void)willGoBackForward;
- (void)backforwardDone;
- (void)didChangeCurPageIndex:(int)arg1;
- (void)webViewLoadingStateChange:(int)arg1;
- (void)webviewMetaDataDidChange;
- (_Bool)webViewShouldLoadErrorPage;
- (void)webViewDidFailLoadWithError:(id)arg1;
- (void)webViewDidFinishLoadWithData:(id)arg1 isFromWebkit:(_Bool)arg2 isBackforwarding:(_Bool)arg3;
- (void)webViewDidReplaceState;
- (void)webViewDidFailLoadWithInterrupt;
- (void)webViewDidStartLoad:(_Bool)arg1 fromWebkit:(_Bool)arg2 coreSwitchPossible:(_Bool)arg3;
- (void)webViewWillStopLoading;
- (void)loadRequest:(id)arg1 withModifiedURL:(id)arg2;
- (_Bool)webViewShouldStartLoadWithRequest:(id)arg1 navigationType:(long long)arg2;
- (_Bool)webViewShouldStartLoadWithAllRequest:(id)arg1 navigationType:(long long)arg2;
- (_Bool)webViewHandleAppStoreLink:(id)arg1 navigationType:(long long)arg2;
- (_Bool)shouldStartLoadWithRequest:(id)arg1 andIsRedirect:(_Bool)arg2 andNavigationType:(long long)arg3;
@property(nonatomic) _Bool showsVerticalScrollIndicator;
@property(readonly, nonatomic) struct CGPoint contentOffset;
- (struct UIEdgeInsets)contentInset;
- (struct UIEdgeInsets)origContentInset;
- (void)setContentInset:(struct UIEdgeInsets)arg1;
- (_Bool)setContentInsetTopIsValid;
@property(nonatomic) double contentInsetTop;
- (void)flashScrollIndicators;
- (void)pageHorizontalScroll:(struct CGPoint)arg1;
- (void)willChangeToRightView:(id)arg1;
- (void)willChangeToLeftView:(id)arg1;
- (void)pageHorizontalScrollEnded;
- (void)pageHorizontalScrollBegan;
- (void)pageDidBeginDecelerating;
- (void)pageDidEndScrolling;
- (void)pageDidEndDecelerating;
- (void)pageDraggingEnded:(_Bool)arg1;
- (void)pageDraggingWillWithVelocity:(struct CGPoint)arg1 targetContentOffset:(inout struct CGPoint *)arg2;
- (void)pageDraggineBegan;
- (void)scrollViewDidEndZooming;
- (void)scrollViewWillBeginZooming;
- (void)pageScrollEnded;
- (void)pageScrollBegan;
- (void)shouldScrollToTop;
- (void)didScrollToTop;
- (void)pageDidScrollToContentOffset:(struct CGPoint)arg1 isWebKit:(_Bool)arg2 isActiveView:(_Bool)arg3 withDecelerate:(_Bool)arg4;
- (void)onThemeChange;
- (void)didSwitchCoreFrom:(id)arg1 to:(id)arg2 withURL:(id)arg3;
- (_Bool)checkCoreSwitchWithURL:(id)arg1;
- (id)currentLoadingParam;
- (_Bool)isEmptyPage;
- (void)setWallPaperEnable:(_Bool)arg1;
- (void)setTopContentPadding:(double)arg1;
- (_Bool)isCurrentWindowActiveView;
- (_Bool)shouldUpdateSnapshotWhenShown;
- (double)getWebViewFrameOriginY;
- (id)getCurrentViewSnapshot;
- (id)getViewAfterCurView;
- (id)getViewBeforeCurView;
- (id)getCurView;
- (id)getUserSelectedContent;
- (void)getVideoInfo:(CDUnknownBlockType)arg1;
- (id)getRefererURL;
@property(readonly, nonatomic, getter=getURL) NSString *url;
- (id)request;
@property(readonly, nonatomic, getter=getTitle) NSString *title;
- (void)setHidden:(_Bool)arg1;
- (void)tryPauseHTMLMedias;
- (void)didScrollToRight;
- (void)didScrollToLeft;
- (void)goForward:(_Bool)arg1;
- (void)goBack:(_Bool)arg1;
- (void)goForward;
- (void)goBack;
- (void)doGoForward;
- (void)doGoBack;
- (_Bool)canGoForwardToPreReadPage;
@property(readonly, nonatomic, getter=canGoForward) _Bool canGoForward;
@property(readonly, nonatomic, getter=canGoBack) _Bool canGoBack;
- (_Bool)gestureRecognizerShouldBegin;
- (id)getClickDate;
- (struct CGPoint)getClickPoint;
- (void)stopLoading;
- (_Bool)isNetworkActive;
@property(readonly, nonatomic, getter=isLoading) _Bool loading;
- (void)reload;
- (void)saveSuggestTitle:(id)arg1 withHref:(id)arg2;
- (_Bool)loadWithURL:(id)arg1 referer:(id)arg2;
- (_Bool)loadWithURL:(id)arg1;
- (_Bool)loadWithParam:(id)arg1;
- (_Bool)loadRequest:(id)arg1;
- (_Bool)loadWithAccessHead:(void *)arg1;
- (id)requestFromAccessHead:(struct AccessHead *)arg1;
- (int)onMemoryWarning;
- (void)didReceiveMemoryWarning;
- (void)onUpdateScrollsToTopStatus;
- (void)appEnterForegoundCallBack;
- (void)removeAppObserver;
- (void)addAppObserver;
- (void)enableHorizontalScrolling;
- (void)releaseHorizontalView;
@property(readonly, retain) UCWebViewEx *ucWebView; // @synthesize ucWebView=_ucWebView;
- (void)releaseUIView;
- (void)uiWebViewLoad;
@property(readonly, retain) id <UIWebViewExProtocol> uiWebView; // @synthesize uiWebView=_uiWebView;
@property(nonatomic) _Bool disableAutoContentInset;
- (void)configUIWebView;
- (void)willDetachWebView;
- (void)dealloc;
- (void)willRelease;
- (id)initWithFrame:(struct CGRect)arg1 andExcludeHomePage:(_Bool)arg2;
- (_Bool)canBeRefresh;
- (_Bool)canImgOffOn;
- (_Bool)canBeAddedToBookmark;
- (_Bool)canFreeCopyBeEnabled;
- (_Bool)canGoHome;
- (_Bool)canGetPageAttr;
- (_Bool)canAutoRefresh;
- (_Bool)canPageSearch;
- (_Bool)canBeShared;
- (_Bool)isPreLoading;
- (_Bool)isLoadingImage;
- (_Bool)isLoadingText;
- (id)getLinkOfFocusLink;
- (id)getLinkOfFocusImg;
- (int)getCurLocalPageType;
- (int)getCurPageType;
- (int)getFocusType;
- (_Bool)canTurnPageBtnBeOn;
- (void)enableReadingMode:(_Bool)arg1;
- (_Bool)isReadingModeEnabled;
- (_Bool)isSupportReadingMode;
- (id)getFocusImageData;
- (struct CGPoint)randomLinkPosition;
- (_Bool)activeViewIsWebkit;
- (_Bool)isWapPage;
- (double)getProgress;
- (id)getThumbnail;
- (_Bool)isHomePageOrInvalidPage;
- (_Bool)isInvalidPage;
- (_Bool)hasLoadErrorPage;
- (_Bool)isErrorPage;
- (_Bool)isHomePage;
- (void)didExitAppFullScreenModeByUser;
- (void)didEnterAppFullScreenMode;
- (_Bool)isInAppFullScreenMode;
- (void)willEnterAppFullScreen;
- (_Bool)loadRequestUsingUIWebViewWithParam:(id)arg1;
- (void)loadPendingRequest;
- (void)stopPendingRequest;
- (void)startPendingRequest;
- (id)metaContentForName:(id)arg1;
- (id)getReadingModeRecordInfo;
- (void)setFontSize:(int)arg1;
- (void)onFontSizeChanged;
- (void)dismissActiveCtrls;
- (void)onTouchOutsideOfView;
- (double)getContentHeight;
- (long long)getFindResultIndex;
- (void)scrollCurrentTargetToVisibleRange;
- (long long)scrollToCurrentTargetByBtn:(_Bool)arg1;
- (void)clearPageFindResult;
- (long long)findString:(id)arg1;
- (void)setScrollsToTop:(_Bool)arg1;
- (void)setContentOffset:(struct CGPoint)arg1 animated:(_Bool)arg2 shouldNotify:(_Bool)arg3;
- (void)setContentOffset:(struct CGPoint)arg1 animated:(_Bool)arg2;
- (void)setUiWebViewContentOffset:(struct CGPoint)arg1 animated:(_Bool)arg2;
- (id)gestureRecognizer;
- (void)enableBounces:(_Bool)arg1;
- (void)enableBackForwardScroll:(_Bool)arg1;
- (void)enableScroll:(_Bool)arg1;
- (void)pageUp:(_Bool)arg1;
- (void)pageDown:(_Bool)arg1;
- (void)deregisterHandleV2WithName:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (_Bool)registerHandlerV2WithName:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (void)deregisterForJSHandler:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (_Bool)registerForJSHandler:(id)arg1 selector:(SEL)arg2 target:(id)arg3;
- (_Bool)registerForJSHandler:(id)arg1 selector:(SEL)arg2 target:(id)arg3 internal:(_Bool)arg4;
- (id)basicWebView;
- (_Bool)evaluatingJavaScript:(id)arg1 withID:(id)arg2;
- (id)webViewScrollView;
- (id)viewOfWindow;
- (id)webPageURL;
- (id)webPageTitle;
- (void)evaluateJavaScript:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)stringByEvaluatingJavaScriptFromString:(id)arg1;
- (void)deregisterMsgHandlerWithMsgName:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
- (_Bool)registerMsgHandlerWithMsgName:(id)arg1 target:(id)arg2 selector:(SEL)arg3;
- (void)onPerformanceFinishWithInfo:(id)arg1 timing:(id)arg2;
- (void)onLoadFinishWithInfo:(id)arg1;
- (void)onPVFinishWithInfo:(id)arg1;
- (void)onPVFinishSynchronizeWithInfo:(id)arg1;
- (void)onPVStartSynchronizeWithInfo:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

