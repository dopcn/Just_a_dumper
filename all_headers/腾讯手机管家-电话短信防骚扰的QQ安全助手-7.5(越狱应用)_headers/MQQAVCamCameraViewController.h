//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MQQBaseViewController.h"

#import "AVCaptureFileOutputRecordingDelegate-Protocol.h"
#import "MQQAlertViewDelegate-Protocol.h"

@class AVCaptureDeviceInput, AVCaptureMovieFileOutput, AVCaptureSession, CADisplayLink, MQQAVCamButton, MQQAVCamPreviewView, MQQButton, MQQPathView, MQQVideoPlayerView, NSObject, NSString, NSURL, UILabel;
@protocol MQQAVCamCameraViewControllerDelegate, OS_dispatch_queue;

@interface MQQAVCamCameraViewController : MQQBaseViewController <AVCaptureFileOutputRecordingDelegate, MQQAlertViewDelegate>
{
    NSObject<OS_dispatch_queue> *_sessionQueue;
    long long _status;
    _Bool _sessionRunning;
    _Bool _focusSquareLayerAnimating;
    id <MQQAVCamCameraViewControllerDelegate> _delegate;
    CDUnknownBlockType _cameraNotAuthorizedErrorHandler;
    CDUnknownBlockType _sessionConfigurationFailedHandler;
    CDUnknownBlockType _recordingFailedHandler;
    long long _setupResult;
    AVCaptureSession *_session;
    AVCaptureDeviceInput *_videoDeviceInput;
    AVCaptureMovieFileOutput *_movieFileOutput;
    NSURL *_movieFileOutputURL;
    unsigned long long _backgroundRecordingID;
    MQQAVCamPreviewView *_capturingPreviewView;
    MQQVideoPlayerView *_finishPreviewView;
    UILabel *_recordingInfoLabel;
    CADisplayLink *_recordingInfoTimer;
    double _startRecordTime;
    MQQButton *_cameraButton;
    MQQAVCamButton *_recordButton;
    MQQButton *_dismissButton;
    MQQAVCamButton *_cancelButton;
    MQQAVCamButton *_confirmButton;
    MQQPathView *_focusSquareView;
}

+ (id)_stringByFormatDuration:(double)arg1;
@property(nonatomic) _Bool focusSquareLayerAnimating; // @synthesize focusSquareLayerAnimating=_focusSquareLayerAnimating;
@property(retain, nonatomic) MQQPathView *focusSquareView; // @synthesize focusSquareView=_focusSquareView;
@property(retain, nonatomic) MQQAVCamButton *confirmButton; // @synthesize confirmButton=_confirmButton;
@property(retain, nonatomic) MQQAVCamButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property(retain, nonatomic) MQQButton *dismissButton; // @synthesize dismissButton=_dismissButton;
@property(retain, nonatomic) MQQAVCamButton *recordButton; // @synthesize recordButton=_recordButton;
@property(retain, nonatomic) MQQButton *cameraButton; // @synthesize cameraButton=_cameraButton;
@property(nonatomic) double startRecordTime; // @synthesize startRecordTime=_startRecordTime;
@property(retain, nonatomic) CADisplayLink *recordingInfoTimer; // @synthesize recordingInfoTimer=_recordingInfoTimer;
@property(retain, nonatomic) UILabel *recordingInfoLabel; // @synthesize recordingInfoLabel=_recordingInfoLabel;
@property(retain, nonatomic) MQQVideoPlayerView *finishPreviewView; // @synthesize finishPreviewView=_finishPreviewView;
@property(retain, nonatomic) MQQAVCamPreviewView *capturingPreviewView; // @synthesize capturingPreviewView=_capturingPreviewView;
@property(nonatomic) unsigned long long backgroundRecordingID; // @synthesize backgroundRecordingID=_backgroundRecordingID;
@property(copy, nonatomic) NSURL *movieFileOutputURL; // @synthesize movieFileOutputURL=_movieFileOutputURL;
@property(retain, nonatomic) AVCaptureMovieFileOutput *movieFileOutput; // @synthesize movieFileOutput=_movieFileOutput;
@property(retain, nonatomic) AVCaptureDeviceInput *videoDeviceInput; // @synthesize videoDeviceInput=_videoDeviceInput;
@property(nonatomic, getter=isSessionRunning) _Bool sessionRunning; // @synthesize sessionRunning=_sessionRunning;
@property(retain, nonatomic) AVCaptureSession *session; // @synthesize session=_session;
@property long long setupResult; // @synthesize setupResult=_setupResult;
@property(copy, nonatomic) CDUnknownBlockType recordingFailedHandler; // @synthesize recordingFailedHandler=_recordingFailedHandler;
@property(copy, nonatomic) CDUnknownBlockType sessionConfigurationFailedHandler; // @synthesize sessionConfigurationFailedHandler=_sessionConfigurationFailedHandler;
@property(copy, nonatomic) CDUnknownBlockType cameraNotAuthorizedErrorHandler; // @synthesize cameraNotAuthorizedErrorHandler=_cameraNotAuthorizedErrorHandler;
@property(nonatomic) id <MQQAVCamCameraViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)dismissButtonClicked:(id)arg1;
- (void)cancelButtonClicked:(id)arg1;
- (void)confirmButtonClicked:(id)arg1;
- (void)displayFocusSquareAtPoint:(struct CGPoint)arg1 animated:(_Bool)arg2;
- (void)focusWithMode:(long long)arg1 exposeWithMode:(long long)arg2 atDevicePoint:(struct CGPoint)arg3 screenPoint:(struct CGPoint)arg4 monitorSubjectAreaChange:(_Bool)arg5;
- (void)focusAndExposeTap:(id)arg1;
- (void)viewWillTransitionToSize:(struct CGSize)arg1 withTransitionCoordinator:(id)arg2;
- (long long)preferredInterfaceOrientationForPresentation;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (void)_sessionInterruptionEnded:(id)arg1;
- (void)_sessionWasInterrupted:(id)arg1;
- (void)_sessionRuntimeError:(id)arg1;
- (void)_subjectAreaDidChange:(id)arg1;
- (void)_endBackgroundTaskIfNeeded;
- (void)_beginBackgroundTaskIfNeeded;
- (void)_AVCameraWillEnterForeground:(id)arg1;
- (void)_AVCameraDidEnterBackground:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)removeObservers;
- (void)addObservers;
- (void)_startFinishPreview;
- (void)captureOutput:(id)arg1 didFinishRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3 error:(id)arg4;
- (void)_updateRecordingInfo:(id)arg1;
- (void)_stopRecordingInfoTimer;
- (void)captureOutput:(id)arg1 didStartRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3;
- (void)toggleMovieRecording:(id)arg1;
- (void)changeCamera:(id)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)_setupFileOutput;
- (void)_configureSession;
- (void)viewDidLoad;
- (void)mqqAlertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (id)init;
- (void)_updateUI;
@property(nonatomic) long long status; // @dynamic status;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

