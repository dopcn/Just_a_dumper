//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "XMPPModule.h"

#import "XMPPCustomBinding-Protocol.h"

@class DDXMLElement, NSArray, NSDate, NSMutableArray, NSString, XMPPTimer;
@protocol XMPPStreamManagementStorage;

@interface XMPPStreamManagement : XMPPModule <XMPPCustomBinding>
{
    id <XMPPStreamManagementStorage> storage;
    _Bool isStarted;
    _Bool enableQueued;
    _Bool enableSent;
    _Bool wasCleanDisconnect;
    _Bool didAttemptResume;
    _Bool didResume;
    DDXMLElement *resume_response;
    NSArray *resume_stanzaIds;
    NSDate *disconnectDate;
    _Bool autoResume;
    unsigned long long autoRequest_stanzaCount;
    double autoRequest_timeout;
    unsigned long long autoAck_stanzaCount;
    double autoAck_timeout;
    double ackResponseDelay;
    unsigned int requestedMax;
    unsigned int lastHandledByServer;
    NSMutableArray *unackedByServer;
    unsigned long long unackedByServer_lastRequestOffset;
    NSArray *prev_unackedByServer;
    NSMutableArray *unprocessedReceivedAcks;
    XMPPTimer *autoRequestTimer;
    unsigned int lastHandledByClient;
    NSMutableArray *unackedByClient;
    unsigned long long unackedByClient_lastAckOffset;
    NSMutableArray *pendingHandledStanzaIds;
    unsigned long long outstandingStanzaIds;
    XMPPTimer *autoAckTimer;
    XMPPTimer *ackResponseTimer;
}

@property(readonly, nonatomic) id <XMPPStreamManagementStorage> storage; // @synthesize storage;
- (void).cxx_destruct;
- (void)xmppStreamDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)xmppStreamDidSendClosingStreamStanza:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveCustomElement:(id)arg2;
- (void)xmppStream:(id)arg1 didSendCustomElement:(id)arg2;
- (void)xmppStreamDidFilterStanza:(id)arg1;
- (void)xmppStream:(id)arg1 didReceivePresence:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveMessage:(id)arg2;
- (_Bool)xmppStream:(id)arg1 didReceiveIQ:(id)arg2;
- (void)xmppStream:(id)arg1 didSendPresence:(id)arg2;
- (void)xmppStream:(id)arg1 didSendMessage:(id)arg2;
- (void)xmppStream:(id)arg1 didSendIQ:(id)arg2;
- (id)xmppStreamWillBind:(id)arg1;
- (void)maybeUpdateStoredLastHandledByClient;
- (void)updateStoredPendingOutgoingStanzas;
- (void)processReceivedElement:(id)arg1;
- (void)markHandledStanzaId:(id)arg1;
- (_Bool)maybeSendAck;
- (unsigned long long)numIncomingStanzasThatCannnotBeAcked;
- (unsigned long long)numIncomingStanzasThatCanBeAcked;
- (void)_sendAck;
- (void)sendAck;
- (_Bool)processReceivedAck:(id)arg1;
- (void)processSentElement:(id)arg1;
- (_Bool)maybeRequestAck;
- (void)_requestAck;
- (void)requestAck;
- (_Bool)shouldSkipStartSessionAfterSuccessfulBinding;
- (long long)handleBind:(id)arg1 withError:(id *)arg2;
- (long long)start:(id *)arg1;
- (_Bool)didResumeWithAckedStanzaIds:(id *)arg1 serverResponse:(id *)arg2;
@property(readonly) _Bool didResume;
- (void)processResumed:(id)arg1;
- (void)sendResumeRequestWithResumptionId:(id)arg1;
- (_Bool)canResumeStream;
- (_Bool)canResumeStreamWithResumptionId:(id)arg1 timeout:(unsigned int)arg2 lastDisconnect:(id)arg3;
- (void)enableStreamManagementWithResumption:(_Bool)arg1 maxTimeout:(double)arg2;
@property double ackResponseDelay;
- (void)getAutomaticallySendAcksAfterStanzaCount:(unsigned long long *)arg1 orTimeout:(double *)arg2;
- (void)automaticallySendAcksAfterStanzaCount:(unsigned long long)arg1 orTimeout:(double)arg2;
- (void)getAutomaticallyRequestAcksAfterStanzaCount:(unsigned long long *)arg1 orTimeout:(double *)arg2;
- (void)automaticallyRequestAcksAfterStanzaCount:(unsigned long long)arg1 orTimeout:(double)arg2;
@property _Bool autoResume;
- (void)didDeactivate;
- (void)didActivate;
- (id)xep0198Elements;
- (id)initWithStorage:(id)arg1 dispatchQueue:(id)arg2;
- (id)initWithStorage:(id)arg1;
- (id)initWithDispatchQueue:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

