//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "MTLModel.h"

#import "KTVSearchableItem-Protocol.h"
#import "MTLJSONSerializing-Protocol.h"

@class KTVSongClip, NSString;

@interface KTVSong : MTLModel <KTVSearchableItem, MTLJSONSerializing>
{
    _Bool _scoreEnabled;
    _Bool _invalid;
    _Bool _shouldHighlight;
    _Bool _isVocalReduction;
    _Bool _shouldUseHQ;
    NSString *_artist;
    double _hotValue;
    NSString *_mel;
    NSString *_melp;
    NSString *_mp3;
    NSString *_music;
    NSString *_name;
    NSString *_pinyin;
    NSString *_recommend;
    long long _indirecom;
    long long _scoreCount;
    long long _singCount;
    NSString *_size;
    long long _songID;
    NSString *_tag;
    NSString *_uploader;
    NSString *_uploaderName;
    NSString *_uploadPhotoURLString;
    NSString *_zbd;
    NSString *_zrc;
    NSString *_zrcx;
    NSString *_icon;
    NSString *_original_mp3;
    double _accompanyMax;
    long long _isHighlight;
    NSString *_singTime;
    KTVSongClip *_clip;
    NSString *_hqMusic;
    NSString *_hqSize;
    NSString *_artistJumpkey;
    NSString *_teachingWork;
    NSString *_melcor;
}

+ (void)deleteLiveRoomRecommedSongRoom:(id)arg1 songIDs:(id)arg2;
+ (void)addLiveRoomRecommendSongRoom:(id)arg1 songID:(long long)arg2;
+ (void)loadRecommendSongWithShouldShowDuet:(_Bool)arg1 start:(long long)arg2 num:(long long)arg3 success:(CDUnknownBlockType)arg4 fail:(CDUnknownBlockType)arg5 error:(CDUnknownBlockType)arg6;
+ (void)loadLatestSongWithShouldShowDuet:(_Bool)arg1 start:(long long)arg2 num:(long long)arg3 success:(CDUnknownBlockType)arg4 fail:(CDUnknownBlockType)arg5 error:(CDUnknownBlockType)arg6;
+ (void)loadLiveRoomRecommendSongRoom:(id)arg1 start:(long long)arg2 num:(long long)arg3 success:(CDUnknownBlockType)arg4;
+ (void)loadSongsWithAPI:(id)arg1 param:(id)arg2 success:(CDUnknownBlockType)arg3;
+ (void)loadSongsByWishCardTempletID:(long long)arg1 success:(CDUnknownBlockType)arg2;
+ (void)loadScoreForCurrentUserWithSongID:(long long)arg1 success:(CDUnknownBlockType)arg2;
+ (void)scoreSongWithSongID:(long long)arg1 score:(long long)arg2 success:(CDUnknownBlockType)arg3;
+ (void)loadSongsByTag:(id)arg1 type:(long long)arg2 start:(long long)arg3 success:(CDUnknownBlockType)arg4;
+ (void)loadAutoRapLyricByKeyword:(id)arg1 type:(long long)arg2 start:(long long)arg3 first:(_Bool)arg4 fromSuggestion:(long long)arg5 success:(CDUnknownBlockType)arg6;
+ (void)loadSongsByKeyword:(id)arg1 type:(long long)arg2 start:(long long)arg3 count:(long long)arg4 first:(_Bool)arg5 fromSuggestion:(long long)arg6 success:(CDUnknownBlockType)arg7;
+ (void)loadSongsByKeyword:(id)arg1 type:(long long)arg2 start:(long long)arg3 first:(_Bool)arg4 fromSuggestion:(long long)arg5 success:(CDUnknownBlockType)arg6;
+ (void)loadSongsByArtist:(id)arg1 type:(long long)arg2 start:(long long)arg3 success:(CDUnknownBlockType)arg4;
+ (void)loadSongsByName:(id)arg1 type:(long long)arg2 start:(long long)arg3 success:(CDUnknownBlockType)arg4;
+ (void)loadSongByID:(long long)arg1 source:(long long)arg2 searchRank:(long long)arg3 searchKeyword:(id)arg4 success:(CDUnknownBlockType)arg5;
+ (void)loadSongByID:(long long)arg1 source:(long long)arg2 success:(CDUnknownBlockType)arg3;
+ (id)clipJSONTransformer;
+ (id)invalidJSONTransformer;
+ (id)singCountJSONTransformer;
+ (id)scoreCountJSONTransformer;
+ (id)songIDJSONTransformer;
+ (id)JSONKeyPathsByPropertyKey;
+ (id)songWithoutAccompany;
+ (_Bool)handleUserActivity:(id)arg1;
@property(retain, nonatomic) NSString *melcor; // @synthesize melcor=_melcor;
@property(copy, nonatomic) NSString *teachingWork; // @synthesize teachingWork=_teachingWork;
@property(copy, nonatomic) NSString *artistJumpkey; // @synthesize artistJumpkey=_artistJumpkey;
@property(nonatomic) _Bool shouldUseHQ; // @synthesize shouldUseHQ=_shouldUseHQ;
@property(retain, nonatomic) NSString *hqSize; // @synthesize hqSize=_hqSize;
@property(retain, nonatomic) NSString *hqMusic; // @synthesize hqMusic=_hqMusic;
@property(retain, nonatomic) KTVSongClip *clip; // @synthesize clip=_clip;
@property(nonatomic) _Bool isVocalReduction; // @synthesize isVocalReduction=_isVocalReduction;
@property(nonatomic) _Bool shouldHighlight; // @synthesize shouldHighlight=_shouldHighlight;
@property(retain, nonatomic) NSString *singTime; // @synthesize singTime=_singTime;
@property(nonatomic) long long isHighlight; // @synthesize isHighlight=_isHighlight;
@property(nonatomic) _Bool invalid; // @synthesize invalid=_invalid;
@property(nonatomic) double accompanyMax; // @synthesize accompanyMax=_accompanyMax;
@property(retain, nonatomic) NSString *original_mp3; // @synthesize original_mp3=_original_mp3;
@property(retain, nonatomic) NSString *icon; // @synthesize icon=_icon;
@property(retain, nonatomic) NSString *zrcx; // @synthesize zrcx=_zrcx;
@property(retain, nonatomic) NSString *zrc; // @synthesize zrc=_zrc;
@property(retain, nonatomic) NSString *zbd; // @synthesize zbd=_zbd;
@property(retain, nonatomic) NSString *uploadPhotoURLString; // @synthesize uploadPhotoURLString=_uploadPhotoURLString;
@property(retain, nonatomic) NSString *uploaderName; // @synthesize uploaderName=_uploaderName;
@property(retain, nonatomic) NSString *uploader; // @synthesize uploader=_uploader;
@property(retain, nonatomic) NSString *tag; // @synthesize tag=_tag;
@property(nonatomic) long long songID; // @synthesize songID=_songID;
@property(retain, nonatomic) NSString *size; // @synthesize size=_size;
@property(nonatomic) long long singCount; // @synthesize singCount=_singCount;
@property(nonatomic) _Bool scoreEnabled; // @synthesize scoreEnabled=_scoreEnabled;
@property(nonatomic) long long scoreCount; // @synthesize scoreCount=_scoreCount;
@property(nonatomic) long long indirecom; // @synthesize indirecom=_indirecom;
@property(retain, nonatomic) NSString *recommend; // @synthesize recommend=_recommend;
@property(retain, nonatomic) NSString *pinyin; // @synthesize pinyin=_pinyin;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSString *music; // @synthesize music=_music;
@property(retain, nonatomic) NSString *mp3; // @synthesize mp3=_mp3;
@property(retain, nonatomic) NSString *melp; // @synthesize melp=_melp;
@property(retain, nonatomic) NSString *mel; // @synthesize mel=_mel;
@property(nonatomic) double hotValue; // @synthesize hotValue=_hotValue;
@property(retain, nonatomic) NSString *artist; // @synthesize artist=_artist;
- (void).cxx_destruct;
- (_Bool)checkSongPCUpdateWithSong:(id)arg1;
- (_Bool)checkSongUpdateWithSong:(id)arg1;
- (id)altMp3URLString;
- (id)altMusicURLString;
- (id)altMelURLString;
- (id)altZrceURLString;
- (id)zrcxURLString;
- (id)zrceURLString;
- (_Bool)canBeRated;
- (_Bool)pcDataHasUnzipped;
- (_Bool)hasPCData;
- (id)iconURL;
- (_Bool)isOfficalAccompany;
- (_Bool)isRecommend;
- (_Bool)hasOriginalMp3;
- (_Bool)hasMelp;
- (_Bool)hasMel;
- (_Bool)hasPronunciationLyrics;
- (_Bool)hasLyrics;
- (_Bool)isSongWithoutAccompany;
- (id)zrcxArray;
- (id)zrcArray;
- (id)originalmp3LocalFilePath;
- (id)pcDataLocalFolderPath;
- (id)pcDataLocalFilePath;
- (id)melxLocalFilePath;
- (id)melpLocalFilePath;
- (id)melLocalFilePath;
- (id)zrcxLocalFilePath;
- (id)zrceLocalFilePath;
- (id)humanVoiceRemovedFilePath;
- (id)hqMusicLocalFilePath;
- (id)musicLocalFilePath;
- (id)getLocalFileKey;
- (_Bool)checkIsPCDataValid;
- (_Bool)checkIsZrceFileValid;
- (float)allFileDownloadProgressWithMusicProgress:(float)arg1 hqMusicProgress:(float)arg2 zrceProgress:(float)arg3 zrcxProgress:(float)arg4 melProgress:(float)arg5 melpProgress:(float)arg6 originalMp3Progress:(float)arg7 pcDataProgress:(float)arg8;
- (float)pcDataProgress;
- (float)musicProgress;
- (float)hqMp3Progress;
- (float)originalMp3Progress;
- (float)allFileDownloadProgress;
- (_Bool)isDownloading;
- (id)songInfoStringWithHQFlag:(_Bool)arg1;
- (id)firstTwoTag;
- (id)thumbnailURL;
- (id)domainSuffix;
- (id)activityUserInfo;
- (id)searchableItemAttributeSet;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

