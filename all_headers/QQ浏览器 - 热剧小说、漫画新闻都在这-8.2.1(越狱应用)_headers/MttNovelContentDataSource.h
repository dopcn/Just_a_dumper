//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "MttNovelEpubDownloadTaskDelegate-Protocol.h"

@class MttFileHandleQueue, MttNovelChapsPayInfoCallback, MttNovelDataManager, MttNovelHighFreqControl, NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, QBgetDownloadInfoRsp, QBuserBookDiscount;

@interface MttNovelContentDataSource : NSObject <MttNovelEpubDownloadTaskDelegate>
{
    NSObject *sourceLockObj;
    NSObject *payedInfoLockObj;
    double _lastTimeUpdateReadWords;
    NSObject *_postRequestDoingSetLockObj;
    long long _chapterCount;
    _Bool _bUISelectedAutoBuy;
    _Bool _forbitCheckCatalog;
    _Bool _isADMode;
    _Bool _haveRequestChapterPayInfo;
    _Bool _haveUpdateBalanceInfo;
    _Bool _haveReportBuyViewExposure;
    _Bool _requestingDownloadInfo;
    _Bool _isDiscountExpired;
    _Bool _isLimitPriceExpired;
    NSString *_novelId;
    long long _cloundReadingChapter;
    long long _cloundReadingWords;
    MttFileHandleQueue *_fileHandlequeue;
    NSMutableSet *_postRequestDoingSet;
    NSNumber *_bPayedBook;
    unsigned long long _sourceType;
    unsigned long long _appType;
    MttNovelDataManager *_dataManager;
    NSMutableDictionary *_dictContentAdInfo;
    NSObject *_contentAdInfoLockObj;
    QBgetDownloadInfoRsp *_downInfoRsp;
    double _downloadStartTime;
    unsigned long long _novelAutoBuyType;
    MttNovelHighFreqControl *_controlHighFreq;
    unsigned long long _curSourceSerialID;
    NSArray *_curChapterSource;
    long long _preFetchCount;
    NSMutableArray *_ReadChapterArray;
    long long _countTipsAddBook;
    double _preRequestCatalogTime;
    NSArray *_realChapterPayedInfoArray;
    NSArray *_realChapterUnAuthorizedArray;
    QBuserBookDiscount *_discountInfo;
    MttNovelChapsPayInfoCallback *_chapsPayInfoCallback;
}

+ (_Bool)isNeedPayed:(long long)arg1;
+ (_Bool)notHasRealContent:(id)arg1;
+ (void)performBlockInMainThread:(CDUnknownBlockType)arg1 afterDelay:(double)arg2;
@property(retain, nonatomic) MttNovelChapsPayInfoCallback *chapsPayInfoCallback; // @synthesize chapsPayInfoCallback=_chapsPayInfoCallback;
@property(nonatomic) _Bool isLimitPriceExpired; // @synthesize isLimitPriceExpired=_isLimitPriceExpired;
@property(nonatomic) _Bool isDiscountExpired; // @synthesize isDiscountExpired=_isDiscountExpired;
@property(retain, nonatomic) QBuserBookDiscount *discountInfo; // @synthesize discountInfo=_discountInfo;
@property(retain, nonatomic) NSArray *realChapterUnAuthorizedArray; // @synthesize realChapterUnAuthorizedArray=_realChapterUnAuthorizedArray;
@property(retain, nonatomic) NSArray *realChapterPayedInfoArray; // @synthesize realChapterPayedInfoArray=_realChapterPayedInfoArray;
@property(nonatomic) double preRequestCatalogTime; // @synthesize preRequestCatalogTime=_preRequestCatalogTime;
@property(nonatomic) long long countTipsAddBook; // @synthesize countTipsAddBook=_countTipsAddBook;
@property(retain, nonatomic) NSMutableArray *ReadChapterArray; // @synthesize ReadChapterArray=_ReadChapterArray;
@property(nonatomic) long long preFetchCount; // @synthesize preFetchCount=_preFetchCount;
@property(retain, nonatomic) NSArray *curChapterSource; // @synthesize curChapterSource=_curChapterSource;
@property(nonatomic) unsigned long long curSourceSerialID; // @synthesize curSourceSerialID=_curSourceSerialID;
@property(retain, nonatomic) MttNovelHighFreqControl *controlHighFreq; // @synthesize controlHighFreq=_controlHighFreq;
@property(nonatomic) unsigned long long novelAutoBuyType; // @synthesize novelAutoBuyType=_novelAutoBuyType;
@property double downloadStartTime; // @synthesize downloadStartTime=_downloadStartTime;
@property(retain, nonatomic) QBgetDownloadInfoRsp *downInfoRsp; // @synthesize downInfoRsp=_downInfoRsp;
@property(nonatomic) _Bool requestingDownloadInfo; // @synthesize requestingDownloadInfo=_requestingDownloadInfo;
@property(nonatomic) _Bool haveReportBuyViewExposure; // @synthesize haveReportBuyViewExposure=_haveReportBuyViewExposure;
@property(nonatomic) _Bool haveUpdateBalanceInfo; // @synthesize haveUpdateBalanceInfo=_haveUpdateBalanceInfo;
@property(nonatomic) _Bool haveRequestChapterPayInfo; // @synthesize haveRequestChapterPayInfo=_haveRequestChapterPayInfo;
@property(nonatomic) _Bool isADMode; // @synthesize isADMode=_isADMode;
@property(retain, nonatomic) NSObject *contentAdInfoLockObj; // @synthesize contentAdInfoLockObj=_contentAdInfoLockObj;
@property(retain, nonatomic) NSMutableDictionary *dictContentAdInfo; // @synthesize dictContentAdInfo=_dictContentAdInfo;
@property(nonatomic) _Bool forbitCheckCatalog; // @synthesize forbitCheckCatalog=_forbitCheckCatalog;
@property(nonatomic) __weak MttNovelDataManager *dataManager; // @synthesize dataManager=_dataManager;
@property(nonatomic) unsigned long long appType; // @synthesize appType=_appType;
@property(nonatomic) unsigned long long sourceType; // @synthesize sourceType=_sourceType;
@property(nonatomic) _Bool bUISelectedAutoBuy; // @synthesize bUISelectedAutoBuy=_bUISelectedAutoBuy;
@property(retain, nonatomic) NSNumber *bPayedBook; // @synthesize bPayedBook=_bPayedBook;
@property(retain, nonatomic) NSMutableSet *postRequestDoingSet; // @synthesize postRequestDoingSet=_postRequestDoingSet;
@property(retain, nonatomic) MttFileHandleQueue *fileHandlequeue; // @synthesize fileHandlequeue=_fileHandlequeue;
@property(nonatomic) long long cloundReadingWords; // @synthesize cloundReadingWords=_cloundReadingWords;
@property(nonatomic) long long cloundReadingChapter; // @synthesize cloundReadingChapter=_cloundReadingChapter;
@property(retain, nonatomic) NSString *novelId; // @synthesize novelId=_novelId;
- (void).cxx_destruct;
- (_Bool)isUserCachedTxtNovel;
- (void)reportOfflineReadAction:(long long)arg1 serialID:(long long)arg2;
- (_Bool)isDiscountFree;
- (double)getQMiPricePlusRate:(long long)arg1 bySerialId:(long long)arg2 wholeBook:(_Bool)arg3;
- (long long)getLetterPrice;
- (long long)getBookPrice;
- (long long)getChapterPrice:(long long)arg1 bySerialId:(long long)arg2;
- (id)buyBtnTip:(long long)arg1;
- (void)removeDiscountInfo;
- (id)bookDiscountInfo;
- (void)resetBookDiscount;
- (void)limitPriceExpired;
- (void)requestDiscount:(_Bool)arg1 discount:(CDUnknownBlockType)arg2;
- (_Bool)shouldUpdateDiscount;
- (void)getBookAuthenticationInfo:(CDUnknownBlockType)arg1;
- (void)saveBookAuthInfo:(id)arg1 offlineReadChapterNum:(long long)arg2;
- (long long)getThenDecreaseOfflineReadChapterNum:(unsigned long long)arg1;
- (_Bool)authorizedOfChapter:(id)arg1;
- (id)getBookAuthInfo:(id)arg1;
- (id)getChapterPayInfoArrayFromLocal;
- (id)getChapterUnAuthorizedArrayFromLocal;
- (id)resolveChapterUuidFromString:(id)arg1;
@property(retain, nonatomic) NSArray *chapterUnAuthorizedArray;
- (void)addChapterPayedInfoArrayWhenPaySuccess:(id)arg1;
@property(retain, nonatomic) NSArray *chapterPayedInfoArray;
- (void)deleteNeedPayedChapterFile:(id)arg1 withoutCurrentChapter:(long long)arg2 asyncRun:(_Bool)arg3;
- (_Bool)shouldShowBuyChapter:(long long)arg1;
- (_Bool)isHavePriceInfo;
- (long long)getCpPayType;
- (_Bool)isNextChapterEnabled:(id)arg1 withSerial:(long long)arg2;
- (_Bool)isCheckContentFromLocal:(id)arg1;
- (_Bool)nextContentCheckPloy:(id)arg1;
- (_Bool)currentContentCheckPloy:(id)arg1 minCheckContentLen:(long long)arg2;
- (long long)getDownloadStatus;
- (_Bool)bookCacheFromCDNServer;
- (void)wupDownloadBook:(CDUnknownBlockType)arg1;
- (long long)getOnLineAvaliabelChapterCount;
- (void)getBackupSource:(long long)arg1 withCompleteHandle:(CDUnknownBlockType)arg2;
- (id)trimBackupSource:(id)arg1;
- (_Bool)isSerialSource:(id)arg1 equalTo:(id)arg2;
- (_Bool)requestBookInfo:(_Bool)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)addBooktoShelf:(_Bool)arg1 block:(CDUnknownBlockType)arg2;
- (_Bool)shouldAddBookToShelf:(id)arg1;
- (_Bool)addBooktoShelf:(_Bool)arg1;
- (void)endHighUsingCatalog;
- (void)startHighUsingCatalog;
- (void)updateBookQuanPostInfo:(long long)arg1 block:(CDUnknownBlockType)arg2;
- (void)updateBookQuanPostInfo:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)updateBookQuanInfo:(CDUnknownBlockType)arg1;
- (id)getDBChapterDiscussSelectedComment:(long long)arg1;
- (id)getDBChapterDiscussCommentName:(long long)arg1;
- (id)getDBChapterDiscussURL:(long long)arg1;
- (void)CheckChapterContent:(long long)arg1;
- (void)updateOneChapter:(long long)arg1 sourceUrl:(id)arg2 block:(CDUnknownBlockType)arg3;
- (id)getSelectedCommentDic:(unsigned long long)arg1;
- (id)getCommentInfo:(unsigned long long)arg1;
- (long long)getCommentCount:(unsigned long long)arg1;
- (id)getChaperDiscussInfo:(long long)arg1;
- (void)getContentWithSerialID:(long long)arg1 count:(long long)arg2 isAutoBuy:(_Bool)arg3 block:(CDUnknownBlockType)arg4 complete:(CDUnknownBlockType)arg5;
- (void)loadChapter:(long long)arg1 block:(CDUnknownBlockType)arg2 prefetchBlock:(CDUnknownBlockType)arg3;
- (void)loadChapter:(long long)arg1 block:(CDUnknownBlockType)arg2;
- (void)prefetchChapter:(long long)arg1 end:(long long)arg2 block:(CDUnknownBlockType)arg3;
- (void)prefetchChapter:(long long)arg1 block:(CDUnknownBlockType)arg2;
- (void)setSourceUrl:(long long)arg1 sourceUrl:(id)arg2;
- (void)UpdateLastReadWordsAsyn:(long long)arg1 chapterId:(id)arg2 chapterName:(id)arg3 chapterURL:(id)arg4 Readwords:(long long)arg5 PageCount:(long long)arg6 PageWords:(long long)arg7 ReoportType:(long long)arg8;
- (_Bool)shouldShowAutoBuySwitchInSetting;
- (void)updateShouldAutoBuyBook:(_Bool)arg1;
- (_Bool)isAutoBuyBook;
- (void)setAsynLastReadSerialID:(long long)arg1 sourceUrl:(id)arg2;
- (_Bool)IsBookCacheStatus;
- (void)UpdateBookCacheStatus:(_Bool)arg1;
- (void)getReadingRecord:(id *)arg1 ChapterId:(id *)arg2 Words:(id *)arg3;
- (long long)getLastCacheSerialId:(long long)arg1;
- (long long)getCountofAvaliableChapter;
- (long long)getCountofCachedAvaliableChapter;
- (long long)getCountofUncachedAvaliableChapter;
- (id)getChapterPayText:(long long)arg1;
- (long long)getCountofFreeChapter:(_Bool)arg1;
- (long long)getCountofFreeChapter;
- (long long)getCountofCacheContent;
- (id)getChapterSourceUrl:(long long)arg1;
- (id)getSerialUniqID:(long long)arg1;
- (void)ResetUpdateChapterCount:(_Bool)arg1;
- (_Bool)getBackGroundUpdate;
- (_Bool)isChapterCached:(long long)arg1;
- (_Bool)isChapterAvailable:(long long)arg1;
- (id)localContent:(id)arg1;
- (id)localEPubContent:(id)arg1;
- (void)loadLocalChapter:(long long)arg1 block:(CDUnknownBlockType)arg2;
- (void)removeChapterSQChapterFakeContent;
- (_Bool)isNeedCheckChapter:(id)arg1 content:(id)arg2;
- (id)getChapterName:(long long)arg1;
- (id)getNovelChapterByChapterId:(long long)arg1;
- (id)getNovelChapterbySerialId:(long long)arg1;
- (long long)getChapterCount;
- (long long)adjustSerialId:(long long)arg1;
- (_Bool)isNovelAvailable:(id)arg1;
- (_Bool)isNovelAvailable;
- (_Bool)isBookInShelf;
- (void)AddReadChapterRecord:(long long)arg1;
- (_Bool)addBookFromStore:(id)arg1;
- (void)UpdateBookInfo:(id)arg1;
- (_Bool)bCPbook;
- (_Bool)isLocalBook;
- (id)getBookInfo;
- (_Bool)isBookFinish;
- (id)getNovelBookAuthor;
- (id)getNovelBookName;
- (_Bool)needCheckCatalog:(unsigned long long)arg1;
- (_Bool)bookIdExistLocal;
- (void)getCatalogWithStart:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;
- (void)updateBookLastSerialUniqId;
- (void)checkCurrentContent:(long long)arg1 block:(CDUnknownBlockType)arg2;
- (id)getReadingRecord:(long long)arg1;
- (void)notifyChapterContentChange:(id)arg1;
- (void)dealloc;
- (void)closeFileHandleQueue;
- (void)getCpBookPayInfo:(CDUnknownBlockType)arg1;
- (void)refreshEpubPayedState;
- (_Bool)isCBNovel;
- (id)getJianjieURLString:(id)arg1;
- (id)getJianjieURLString;
- (id)getNovelEPubManager;
- (id)getNovelDataDispatcher;
- (void)updatebPayedBookStatus;
- (id)initWithNovelId:(id)arg1 dataManager:(id)arg2;
- (void)removeAllADInfo;
- (void)removeADInfo:(id)arg1;
- (void)removeADInfoForSerialId:(long long)arg1;
- (id)getADInfoForSerialId:(long long)arg1;
- (id)getNotReadADInfoForSerialId:(long long)arg1;
- (_Bool)shouldRemoveAdInfo:(id)arg1 realContent:(_Bool)arg2;
- (void)setUsedAdInfo:(id)arg1 selfSerialUsed:(_Bool)arg2;
- (id)getReadADInfoForSerialId:(long long)arg1;
- (void)setADInfo:(id)arg1 forSerialId:(long long)arg2;
- (void)reportDownloadResult:(long long)arg1 timeCost:(long long)arg2 expandInfoDic:(id)arg3;
- (void)reportDownloadResultByDownloadInfoRsp:(id)arg1;
- (void)reportDownloadResultByUnzipFailure;
- (void)reportDownloadResultMD5Error:(id)arg1 serverMd5:(id)arg2 clientMd5:(id)arg3;
- (void)reportDownloadResultByFielParseFailure:(long long)arg1;
- (void)reportDownloadResultSuccess:(long long)arg1;
- (void)reportDownloadResultByWup:(_Bool)arg1;
- (id)getCacheBookEncryptKey;
- (void)saveCacheBookEncryptKey:(id)arg1;
- (void)ResetDownloadBook:(CDUnknownBlockType)arg1;
- (void)StartDownloadBook:(CDUnknownBlockType)arg1;
- (void)updateDownloadInfo:(CDUnknownBlockType)arg1;
- (void)checkWhetherSupportCDNDownload:(CDUnknownBlockType)arg1;
- (long long)getTimeCost:(double)arg1;
- (id)findCacheFileTask;
- (void)downloadCompeleted:(id)arg1;
- (void)reportDownloadError:(int)arg1 forKey:(id)arg2 withDetail:(id)arg3 report:(_Bool)arg4;
- (void)downloadError:(id)arg1;
- (void)notifyTaskResult:(id)arg1 success:(_Bool)arg2;
- (void)notifiyProgress:(_Bool)arg1 downChapterCount:(long long)arg2 withTask:(id)arg3;
- (void)downloadProgressDidChange:(id)arg1 progress:(double)arg2 size:(unsigned long long)arg3;
- (void)destroy;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

