//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class HSUAudioDataProvider, NSString, NSURL;
@protocol HSUAudioCacheFileEncryptor, OS_dispatch_queue;

@interface HSUAudioStreamPlayer : NSObject
{
    NSURL *_url;
    NSString *_cacheFilePath;
    HSUAudioDataProvider *_dataProvider;
    struct AudioQueueBuffer *_buffers[300];
    unsigned long long _bufferPacketsCounts[300];
    struct AudioStreamPacketDescription *_bufferPacketDescs[300];
    unsigned long long _enqueuedBufferCount;
    unsigned long long _dequeuedBufferCount;
    struct _opaque_pthread_mutex_t _bufferMutex;
    struct _opaque_pthread_cond_t _bufferCond;
    unsigned long long _bufferQueueSize;
    unsigned long long _bufferSize;
    unsigned long long _seekByteOffset;
    double _seekTime;
    unsigned long long _currentOffset;
    _Bool _readingData;
    _Bool _readEnd;
    _Bool _userStop;
    _Bool _interrupted;
    _Bool _readError;
    unsigned long long _consumedAudioPacketsNumber;
    unsigned long long _consumedAudioBytesNumber;
    struct OpaqueAudioFileStreamID *_audioFileStream;
    struct OpaqueAudioQueue *_audioQueue;
    unsigned int _isRunning;
    struct AudioStreamBasicDescription _asbd;
    struct AudioQueueLevelMeterState *_meterStateOfChannels;
    double _bitrate;
    unsigned long long _state;
    NSObject<OS_dispatch_queue> *_dataEnqueueDP;
    int err;
    _Bool _useSoftwareCodec;
    _Bool _enableLevelMetering;
    _Bool _enableBlueTooth;
    _Bool _enableHeadset;
    _Bool _correctBitrate;
    unsigned int _fileType;
    NSString *_audioSessionCategory;
    double _presetDuration;
    unsigned long long _bufferByteSize;
    double _bufferAudioSeconds;
    id <HSUAudioCacheFileEncryptor> _cacheEncryptor;
    unsigned long long _dataOffset;
    struct HSUAudioStreamDescription _streamDesc;
}

@property(nonatomic) unsigned long long dataOffset; // @synthesize dataOffset=_dataOffset;
@property(retain, nonatomic) id <HSUAudioCacheFileEncryptor> cacheEncryptor; // @synthesize cacheEncryptor=_cacheEncryptor;
@property(nonatomic) _Bool correctBitrate; // @synthesize correctBitrate=_correctBitrate;
@property(nonatomic) _Bool enableHeadset; // @synthesize enableHeadset=_enableHeadset;
@property(nonatomic) _Bool enableBlueTooth; // @synthesize enableBlueTooth=_enableBlueTooth;
@property(nonatomic) double bufferAudioSeconds; // @synthesize bufferAudioSeconds=_bufferAudioSeconds;
@property(nonatomic) unsigned long long bufferByteSize; // @synthesize bufferByteSize=_bufferByteSize;
@property(nonatomic) double presetDuration; // @synthesize presetDuration=_presetDuration;
@property(nonatomic) unsigned int fileType; // @synthesize fileType=_fileType;
@property(copy, nonatomic) NSString *audioSessionCategory; // @synthesize audioSessionCategory=_audioSessionCategory;
@property(nonatomic) _Bool enableLevelMetering; // @synthesize enableLevelMetering=_enableLevelMetering;
@property(nonatomic) _Bool useSoftwareCodec; // @synthesize useSoftwareCodec=_useSoftwareCodec;
@property(readonly) struct HSUAudioStreamDescription streamDesc; // @synthesize streamDesc=_streamDesc;
- (void).cxx_destruct;
- (float)currentVolume;
- (float)averagePowerForChannel:(int)arg1;
- (void)handleInterruption:(id)arg1;
- (void)handleAudioFileStreamPropertyChanged:(unsigned int)arg1 ioFlags:(unsigned int *)arg2;
- (void)_createQueue;
- (void)_computeBufferQueueSize;
- (void)_dataWait:(id)arg1;
- (void)_setupCategory;
@property unsigned long long state;
@property(readonly) double bitrate;
- (double)duration;
- (double)progress;
- (double)currentTime;
- (int)handleAudioQueuePropertyChanged:(unsigned int)arg1;
- (void)handleAudioQueueOutputBuffer:(struct AudioQueueBuffer *)arg1;
- (void)handleAudioPackets:(const void *)arg1 numberBytes:(unsigned int)arg2 numberPackets:(unsigned int)arg3 packetDescs:(struct AudioStreamPacketDescription *)arg4;
- (void)_enqueueData;
- (void)_start;
- (void)seekToTime:(double)arg1;
- (void)pause;
- (void)stop;
- (void)play;
- (id)initWithURL:(id)arg1 cacheFilePath:(id)arg2;
- (void)dealloc;

@end

