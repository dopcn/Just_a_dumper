//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "UCMPVideoLinkManagerDelegate-Protocol.h"
#import "UCMoviePlayerInterface-Protocol.h"
#import "UCMoviePlayerPluginManagerDelegate-Protocol.h"
#import "UCMoviePlayerSourceSwitchProcessDelegate-Protocol.h"
#import "UCMoviePlayerViewControllerDelegate-Protocol.h"
#import "UCPlayerCompatibilityProtocol-Protocol.h"
#import "UCViewManagerObserver-Protocol.h"

@class NSString, NSURL, UCMoviePlayerDataProcesser, UCMoviePlayerInfo, UCMoviePlayerPluginManager, UCMoviePlayerSourceSwitchProcess, UCMoviePlayerVideoLinkManager, UCMoviePlayerViewController, UCMoviePresentViewController;
@protocol UCMoviePlayerListener;

@interface UCMoviePlayer : NSObject <UCMoviePlayerViewControllerDelegate, UCMoviePlayerPluginManagerDelegate, UCMPVideoLinkManagerDelegate, UCMoviePlayerSourceSwitchProcessDelegate, UCViewManagerObserver, UCMoviePlayerInterface, UCPlayerCompatibilityProtocol>
{
    UCMoviePlayerViewController *m_playerViewController;
    UCMoviePlayerPluginManager *m_playerPluginManager;
    UCMoviePresentViewController *m_playerPresentViewController;
    id <UCMoviePlayerListener> m_listener;
    _Bool _isNotifyOutWhenHandleByPlugin;
    _Bool _beingDismissing;
    _Bool _isAsyncStop;
    NSURL *_contentURL;
    UCMoviePlayerDataProcesser *_currentPlayerData;
    UCMoviePlayerVideoLinkManager *_videoLinkManager;
    UCMoviePlayerSourceSwitchProcess *_sourceSwitchProcess;
    UCMoviePlayerInfo *_movieInfo;
    double _beginTimeInterval;
    double _shellSourceReadyTimeStamp;
    double _vpsFetchSuccessfulTimeStamp;
    double _willPrepareToPlayTimeStamp;
    double _metadataLoadedTimeStamp;
    double _canPlayTimeStamp;
    double _loadedTimeWhenLikeyToKeepUp;
    double _videoDuration;
}

+ (void)exitPlayerWhenExitShortVideoBox;
+ (_Bool)checkIsGifRecordEnabel;
+ (_Bool)isApollo;
+ (_Bool)canRequestPhotoTao:(id)arg1;
+ (void)shareRequestPhotoTao;
+ (_Bool)isShowingAlertView;
+ (struct CGRect)moviePlayerContainViewBounds;
+ (void)startRequestThumbnailImage;
+ (struct CGRect)currentPlayerFrame;
+ (void)setSeekingEnabled:(_Bool)arg1 hideProgressTipView:(_Bool)arg2;
+ (void)setSeekingEnabled:(_Bool)arg1;
+ (id)currentVideoAVPlayerView;
+ (id)currentVideoPlaybackInfo;
+ (id)currentVideoMovieInfo;
+ (id)playerCoreInCurrentVideo;
+ (void)showTools:(_Bool)arg1;
+ (_Bool)isShowingAdvisoryCallVideoAppView;
+ (void)retryContentURL;
+ (int)playbackState;
+ (_Bool)isBeingDismissed;
+ (void)cofigVPSParameters;
+ (void)updateVideoTitle:(id)arg1;
+ (void)updateMoviePlayerInfoBackStyle:(_Bool)arg1;
+ (void)setMiniWindowHidden:(_Bool)arg1;
+ (void)willhaveShareViewChange:(_Bool)arg1;
+ (void)changeToMicroWindowPlay;
+ (void)changeToMiniWindowPlay;
+ (_Bool)isPlayingInAudioWindow;
+ (_Bool)isPlayingInFullScreen;
+ (_Bool)isPlayingInEmbedWindow;
+ (_Bool)isPlayingInFullWindow;
+ (_Bool)isPlayingInMicroWindow;
+ (_Bool)isPlayingInTopMiniWindow;
+ (_Bool)isPlayingInMiniWindow;
+ (void)replayCurrentMoiveWithLanguage:(id)arg1;
+ (void)replayCurrentMoiveWithDefinition:(int)arg1;
+ (void)replayForContentURL:(id)arg1;
+ (id)playContentPath:(id)arg1 videoInfo:(id)arg2;
+ (long long)queryNetworkSpeed;
+ (int)switchVideoPath:(id)arg1;
+ (id)embedPlayerDataSource;
+ (void)willPresendHighLevelController:(CDUnknownBlockType)arg1;
+ (void)showMoviePlayerExtendView:(id)arg1;
+ (void)playRelatedInfoAtIndex:(long long)arg1;
+ (_Bool)shouldPlayRelatedInfoAtIndex:(long long)arg1;
+ (void)setVideoRelatedInfoList:(id)arg1;
+ (void)statWebPlayEnded;
+ (void)onWebNextVideoFinish:(_Bool)arg1;
+ (void)removeListener:(id)arg1;
+ (double)currentTotalDuraton;
+ (double)currentPlaybackTime;
+ (struct CGRect)defaultMiniWindowFrame:(long long)arg1;
+ (id)miniWindowView;
+ (id)backgroundView;
+ (_Bool)isLiving;
+ (void)pauseAndShowToolPanel;
+ (struct CGSize)natrualSize;
+ (void)pause;
+ (void)stop;
+ (void)exitPlayer;
+ (void)exitPlayerSynchronously;
+ (void)exitPlayerAsynchronously;
+ (void)exitPlayer:(void *)arg1 animated:(_Bool)arg2;
+ (void)exitPlayer:(void *)arg1;
+ (void)setPlayInfoInternal:(id)arg1 listener:(id)arg2 andPlay:(_Bool)arg3;
+ (void)updateToolBarItems:(_Bool)arg1;
+ (void)updateMoviePlayerInfo:(id)arg1;
+ (void)updateListenerTo:(id)arg1 forMoviePlayerInfo:(id)arg2;
+ (void)setPlayInfo:(id)arg1 listener:(id)arg2 andPlay:(_Bool)arg3;
+ (void)carryOnPlay;
+ (void)resumePlay;
+ (void)play;
+ (void)setPlayInfo:(id)arg1 listener:(id)arg2;
+ (void)play:(id)arg1 listener:(id)arg2;
+ (_Bool)isSystemInlineMoviePlayerPresented;
+ (id)playerDisplayView;
+ (struct CGRect)fullscreenBounds;
+ (_Bool)tryReloadMoviePlayer;
+ (_Bool)testCanSeekToTime:(float)arg1 withDuration:(float)arg2;
+ (void)seekToTime:(double)arg1;
@property(nonatomic) double videoDuration; // @synthesize videoDuration=_videoDuration;
@property(nonatomic) double loadedTimeWhenLikeyToKeepUp; // @synthesize loadedTimeWhenLikeyToKeepUp=_loadedTimeWhenLikeyToKeepUp;
@property(nonatomic) double canPlayTimeStamp; // @synthesize canPlayTimeStamp=_canPlayTimeStamp;
@property(nonatomic) double metadataLoadedTimeStamp; // @synthesize metadataLoadedTimeStamp=_metadataLoadedTimeStamp;
@property(nonatomic) double willPrepareToPlayTimeStamp; // @synthesize willPrepareToPlayTimeStamp=_willPrepareToPlayTimeStamp;
@property(nonatomic) double vpsFetchSuccessfulTimeStamp; // @synthesize vpsFetchSuccessfulTimeStamp=_vpsFetchSuccessfulTimeStamp;
@property(nonatomic) double shellSourceReadyTimeStamp; // @synthesize shellSourceReadyTimeStamp=_shellSourceReadyTimeStamp;
@property(nonatomic) double beginTimeInterval; // @synthesize beginTimeInterval=_beginTimeInterval;
@property(retain, nonatomic) UCMoviePlayerInfo *movieInfo; // @synthesize movieInfo=_movieInfo;
@property(nonatomic) _Bool isAsyncStop; // @synthesize isAsyncStop=_isAsyncStop;
@property(nonatomic) _Bool beingDismissing; // @synthesize beingDismissing=_beingDismissing;
@property(retain, nonatomic) UCMoviePlayerSourceSwitchProcess *sourceSwitchProcess; // @synthesize sourceSwitchProcess=_sourceSwitchProcess;
@property(nonatomic) _Bool isNotifyOutWhenHandleByPlugin; // @synthesize isNotifyOutWhenHandleByPlugin=_isNotifyOutWhenHandleByPlugin;
@property(retain, nonatomic) UCMoviePlayerVideoLinkManager *videoLinkManager; // @synthesize videoLinkManager=_videoLinkManager;
@property(retain, nonatomic) UCMoviePlayerDataProcesser *currentPlayerData; // @synthesize currentPlayerData=_currentPlayerData;
@property(retain, nonatomic) NSURL *contentURL; // @synthesize contentURL=_contentURL;
@property(nonatomic) id <UCMoviePlayerListener> listener; // @synthesize listener=m_listener;
@property(retain, nonatomic) UCMoviePresentViewController *playerPresentViewController; // @synthesize playerPresentViewController=m_playerPresentViewController;
@property(retain, nonatomic) UCMoviePlayerPluginManager *playerPluginManager; // @synthesize playerPluginManager=m_playerPluginManager;
@property(retain, nonatomic) UCMoviePlayerViewController *playerViewController; // @synthesize playerViewController=m_playerViewController;
- (void)retryContent;
- (void)didMoviePlayerViewScreenChange:(long long)arg1 oldType:(long long)arg2;
- (_Bool)isBeingDismissed;
- (struct CGRect)scrollToTargetIndex;
- (_Bool)needsEnableBackStyle;
- (_Bool)isMoviePlaying;
- (void)changeVideoLinkToContentURL:(id)arg1;
- (void)playerPluginCallForShowingPlayButton;
- (void)playerPluginCallForHidingPlayButton;
- (void)pluginManagerReplayVideo;
- (void)pluginManagerPlayDidFinishCallBackWithUserInfo:(id)arg1;
- (void)pluginManagerSetPlayPause:(_Bool)arg1;
- (void)onPluginCtrlWMFollowBtnClick;
- (void)videoPlayDidError:(id)arg1;
- (_Bool)isPlayInMiniWindow;
- (void)playContentPath:(id)arg1 videoInfo:(id)arg2;
- (void)pluginManagerVideoInfo:(id)arg1 isEpisodes:(_Bool)arg2;
- (void)switchToVideoUrl:(id)arg1;
- (void)sourceSwitch:(id)arg1 failedWithPageUrl:(id)arg2 isTimeoutRequest:(_Bool)arg3;
- (void)sourceSwitch:(id)arg1 fallbackOnDefault:(id)arg2 pageUrl:(id)arg3;
- (void)sourceSwitch:(id)arg1 didGetVideoInfo:(id)arg2;
- (void)playViewControllerSyncCurrentPlaybackTime:(double)arg1 playableDuration:(double)arg2;
- (void)playViewControllerLikeToKeepUpWithLoadedTime:(double)arg1 duration:(double)arg2;
- (void)playViewControllerDidMetaDataLoaded;
- (void)playViewControllerWillPrepareToPlay;
- (void)playViewControllerExtendViewBtnDidClick:(unsigned long long)arg1;
- (void)playViewControllerDidUserChangePlayStateIsChangeToPlay:(_Bool)arg1;
- (void)playViewControllerDidClickAdBtnWithState:(_Bool)arg1 inFullScreen:(_Bool)arg2 process:(double)arg3;
- (_Bool)playViewControllerWillReplay:(id)arg1 pageUrl:(id)arg2;
- (void)playerViewControllerPlayWillReachEnd;
- (_Bool)playerViewControllerShouldShowToolPanelOnPlayWillReachEnd;
- (_Bool)playerViewControllerShouldShowTipsForNextPlay;
- (_Bool)playerViewControllerIsPlayingInAudioWindow:(id)arg1;
- (_Bool)playerViewControllerIsPlayingInMiniWindow:(id)arg1;
- (void)playerViewControllerDidAppear:(id)arg1;
- (void)onPlaybackFinallyError:(id)arg1;
- (_Bool)preHandlePlaybackError:(id)arg1;
- (void)onPlaybackEnded:(id)arg1;
- (void)recordPlaybackInfoOnFinish:(int)arg1 currentPlaybackTime:(double)arg2;
- (void)callPlayerViewController:(id)arg1 didFinishWithPlaybackInfo:(id)arg2;
- (void)playerViewController:(id)arg1 didFinishWithPlaybackInfo:(id)arg2;
- (void)playerViewController:(id)arg1 didChangePlaybackState:(int)arg2;
- (void)playerViewController:(id)arg1 likelyToKeepup:(double)arg2 isFirst:(_Bool)arg3;
- (void)notifyOutWhenHandleByPlugin;
- (_Bool)isNeedNotifyToListener:(int)arg1;
- (_Bool)isLocalM3U8ForCurrentURL;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)tryToDismissMoviePlayerWithAnimated:(_Bool)arg1;
- (void)tryToDismissMoviePlayer;
- (void)presentMoviePlayer;
- (_Bool)isNoInternalHandler;
- (void)exitWithAnimated:(_Bool)arg1;
- (long long)queryNetworkSpeed;
- (int)switchVideoPath:(id)arg1;
- (void)pauseAndShowToolPanel;
- (struct CGSize)natrualSize;
- (void)resumePlay;
- (void)play;
- (void)pause;
- (void)stop;
- (void)setContentPath:(id)arg1 andPlay:(_Bool)arg2;
- (void)setPlayInfo:(id)arg1 listener:(id)arg2 andPlay:(_Bool)arg3;
- (void)updateMoviePlayerInfoBackStyle:(_Bool)arg1;
- (void)updatePlayerViewControllerStyleWithMoviePlayerInfo:(id)arg1;
- (id)initWithPageURL:(id)arg1 bounds:(struct CGRect)arg2 moviePlayerInfo:(id)arg3;
- (unsigned long long)videoNeedsForcePlayerCoreWithMoviePlayerInfo:(id)arg1;
- (void)loadPlayerPluginManager;
- (void)releasePlayerPluginManager;
- (void)dealloc;
- (void)showTools:(_Bool)arg1;
- (_Bool)isShowingAdvisoryCallVideoAppView;
- (void)willPresendHighLevelController:(CDUnknownBlockType)arg1;
- (void)showMoviePlayerExtendView:(id)arg1;
- (void)playRelatedInfoAtIndex:(long long)arg1;
- (_Bool)shouldPlayRelatedInfoAtIndex:(long long)arg1;
- (void)setVideoRelatedInfoList:(id)arg1;
- (id)internalPlayContentPath:(id)arg1 videoInfo:(id)arg2;
- (void)refreshNewMovieInfo:(id)arg1;
- (void)updateToolBarItems:(_Bool)arg1;
- (_Bool)onUCPlayer:(id)arg1 createdWithCompatibbleType:(long long)arg2;
- (_Bool)viewManagerCanForceDismiss;
- (void)forceDismissCurrentView;
- (void)statVPSResultPageNotFit:(id)arg1;
- (void)statWebPlayEnded;
- (void)statUserSeePlaybackError;
- (void)statPlaybackErrorForAllMethod;
- (void)statPlaybackError:(id)arg1 playerViewController:(id)arg2;
- (void)statPlaybackFinish:(id)arg1;
- (id)likeyToKeepUpTimeCostInfoWithTotalCost:(double)arg1;
- (void)statFirstLikelyToKeepup:(double)arg1 shellLoadTime:(double)arg2;
- (id)playerCoreName;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

