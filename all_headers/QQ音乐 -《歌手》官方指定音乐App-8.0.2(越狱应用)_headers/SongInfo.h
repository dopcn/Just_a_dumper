//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "ClusterInfo.h"

@class AlbumInfo, MVDownloadInfo, NSArray, NSDate, NSDictionary, NSMutableDictionary, NSString, SingerInfo;

@interface SongInfo : ClusterInfo
{
    unsigned long long song_ID;
    int song_Type;
    int song_error;
    NSString *song_DownLoadFilePath;
    unsigned long long song_DownloadFileSize;
    NSString *song_IPODAssertURL;
    NSString *song_LyricFilePath;
    unsigned long long iFackSongId;
    _Bool song_HasFingerPrinted;
    unsigned long long fingerSongId;
    float addTime;
    int size;
    int n64Size;
    _Bool isWord;
    int nForbitFlag;
    int standardFileSize;
    int topFileSize;
    AlbumInfo *albumInfo;
    NSString *kgeSongMid;
    _Bool isOnlyListenPart;
    _Bool _isLongVoice;
    _Bool _isValidating;
    _Bool _isPlayingLocalFile;
    _Bool _isSongNew;
    int song_EQid;
    int song_lang;
    int song_tag;
    int song_version;
    int isExclusive;
    int _aacFileSize;
    int _aacFileSize24K;
    int _aacFileSize48K;
    int _aacFileSize96K;
    int _aacFileSize192K;
    int _cdIdx;
    int _belongCD;
    unsigned int _controlBits;
    int _flacSize;
    int _song_genre;
    double song_Duration;
    SingerInfo *defaultSinger;
    NSArray *singerList;
    NSString *song_Mid;
    NSString *song_Vid;
    NSString *docid;
    NSString *song_mediaMid;
    unsigned long long playCount;
    NSString *_songCustomImgUrl;
    unsigned long long _trySize;
    unsigned long long _tryBegin;
    unsigned long long _tryEnd;
    NSString *_songDesc;
    unsigned long long _lastPlayTime;
    unsigned long long _downloadFailedTimes;
    long long _song_language;
    long long _song_status;
    long long _song_fnote;
    NSString *_publicTime;
    NSDictionary *_volumeDic;
    NSString *_pingPong;
    MVDownloadInfo *_mvDownloadInfo;
    unsigned long long _song_label;
    double _bpm;
    double _fakeBpm;
    NSString *_trace;
    unsigned long long _song_modifyStamp;
    NSString *_weiyun_file_id;
    double _publicTimeStamp;
    NSDate *_publicDate;
    NSString *_tjreport;
    NSString *_tjTjreport;
    unsigned long long _songRightStatusForNormal;
    unsigned long long _songRightStatusForPersonal;
    long long _serverPlayCount;
    NSString *_uploadTime;
    NSString *_displySongName;
    NSMutableDictionary *_dicRate2URL;
}

+ (id)prePublicCellText;
+ (_Bool)isOldDownloadMV:(id)arg1;
+ (id)suffiexStr:(int)arg1;
+ (int)fromWebToSongType:(int)arg1;
+ (int)toWebSongType:(int)arg1;
+ (int)pcImportSongType;
+ (void)addcachedSongToDownloadSong:(id)arg1 assertType:(int)arg2 songRate:(int)arg3 filePath:(id)arg4;
+ (_Bool)isSameRateByRate1:(int)arg1 toRate2:(int)arg2;
+ (long long)compareSongRateType:(int)arg1 to:(int)arg2;
+ (_Bool)isHQQuality:(int)arg1;
+ (_Bool)isStandardQuality:(int)arg1;
+ (id)get320Mp3UrlFileNameInArray:(id)arg1;
+ (id)getSongFileNameBy:(int)arg1 mid:(id)arg2 songType:(int)arg3;
+ (unsigned long long)getHeaderSizeByRate:(int)arg1 duration:(double)arg2;
+ (int)getLowerQuality:(int)arg1 isListen:(int)arg2;
+ (int)getLowerQuality:(int)arg1;
+ (int)convertESongTypeToSongRateType:(int)arg1;
+ (int)_convertSongRateTypeToESongType:(int)arg1;
+ (int)convertSongRateTypeToESongType:(int)arg1;
+ (int)getRateByExtName:(id)arg1;
+ (int)getLiveWifiQualityBySongRate:(int)arg1;
+ (int)getLiveQualityBySongRate:(int)arg1;
+ (id)getQualityNameBySongRate:(int)arg1;
+ (id)getRealExtNameByRate:(int)arg1;
+ (id)getExtNameByRate:(int)arg1;
+ (id)getQmcExtNameByRate:(int)arg1;
+ (id)convertFromExtPathToQmcExtPath:(id)arg1;
+ (id)convertFromQmcExtPathToExtPath:(id)arg1;
+ (unsigned int)getBytePerSecond:(int)arg1;
+ (unsigned int)getFirstPieceCacheSongSizeByQuality:(int)arg1 songInfo:(id)arg2 duration:(double)arg3 assetsType:(int)arg4;
+ (id)translateFromOtherAppFile:(id)arg1;
+ (id)translateFromFakeUrl:(id)arg1;
+ (id)translateSongFromData:(id)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 source:(id)arg5 isUnifiedFormat:(_Bool)arg6;
+ (id)translateSongFromNode:(struct _xmlNode *)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 assetsType:(int)arg5 source:(id)arg6;
+ (id)translateSongFromNode:(struct _xmlNode *)arg1 fromServer:(_Bool)arg2 containHilightInfo:(_Bool)arg3 expInfo:(id *)arg4 source:(id)arg5;
+ (id)translateSongFromNode:(struct _xmlNode *)arg1 fromServer:(_Bool)arg2 source:(id)arg3;
+ (id)translateSongFromJsonData:(id)arg1 assetsType:(int)arg2 source:(id)arg3 containHilightInfo:(_Bool)arg4 expInfo:(id *)arg5 isUnifiedFormat:(_Bool)arg6 ownerUin:(unsigned long long)arg7;
+ (id)incrementalUpdateSongFromJsonData:(id)arg1 assetsType:(int)arg2 source:(id)arg3 isUnifiedFormat:(_Bool)arg4 ownerUin:(unsigned long long)arg5;
+ (id)translateSongFromJsonData:(id)arg1 assetsType:(int)arg2 source:(id)arg3 isUnifiedFormat:(_Bool)arg4 ownerUin:(unsigned long long)arg5;
+ (id)translateSongFromJsonData:(id)arg1 assetsType:(int)arg2 source:(id)arg3 isUnifiedFormat:(_Bool)arg4;
+ (id)translateSongFromJsonData:(id)arg1 source:(id)arg2 isUnifiedFormat:(_Bool)arg3;
+ (id)translateSongFromH5Data:(id)arg1;
+ (unsigned long long)modifySongID:(unsigned long long)arg1 songType:(int)arg2;
+ (id)getSongImageUrl:(id)arg1;
+ (int)getURLIndex:(int)arg1;
+ (int)songRateTypeByQuality:(int)arg1;
+ (struct SFlexInteger)getDefaultSwitch:(id)arg1;
+ (id)descripSwitch:(long long)arg1;
+ (_Bool)isActionBitSet:(long long)arg1 forSwitch:(long long)arg2;
+ (struct SFlexInteger)isEnablePlayBySwitch:(long long)arg1;
+ (_Bool)isSwitchBitSetValided:(long long)arg1;
@property(retain) NSMutableDictionary *dicRate2URL; // @synthesize dicRate2URL=_dicRate2URL;
@property(retain, nonatomic) NSString *displySongName; // @synthesize displySongName=_displySongName;
@property(copy, nonatomic) NSString *uploadTime; // @synthesize uploadTime=_uploadTime;
@property(nonatomic) long long serverPlayCount; // @synthesize serverPlayCount=_serverPlayCount;
@property(nonatomic) unsigned long long songRightStatusForPersonal; // @synthesize songRightStatusForPersonal=_songRightStatusForPersonal;
@property(nonatomic) unsigned long long songRightStatusForNormal; // @synthesize songRightStatusForNormal=_songRightStatusForNormal;
@property(retain) NSString *tjTjreport; // @synthesize tjTjreport=_tjTjreport;
@property(retain) NSString *tjreport; // @synthesize tjreport=_tjreport;
@property(retain, nonatomic) NSDate *publicDate; // @synthesize publicDate=_publicDate;
@property(nonatomic) double publicTimeStamp; // @synthesize publicTimeStamp=_publicTimeStamp;
@property(retain, nonatomic) NSString *weiyun_file_id; // @synthesize weiyun_file_id=_weiyun_file_id;
@property(nonatomic) unsigned long long song_modifyStamp; // @synthesize song_modifyStamp=_song_modifyStamp;
@property(retain) NSString *trace; // @synthesize trace=_trace;
@property(nonatomic) double fakeBpm; // @synthesize fakeBpm=_fakeBpm;
@property double bpm; // @synthesize bpm=_bpm;
@property(nonatomic) unsigned long long song_label; // @synthesize song_label=_song_label;
@property(retain, nonatomic) MVDownloadInfo *mvDownloadInfo; // @synthesize mvDownloadInfo=_mvDownloadInfo;
@property(retain, nonatomic) NSString *pingPong; // @synthesize pingPong=_pingPong;
@property(retain, nonatomic) NSDictionary *volumeDic; // @synthesize volumeDic=_volumeDic;
@property(retain, nonatomic) NSString *publicTime; // @synthesize publicTime=_publicTime;
@property(nonatomic) long long song_fnote; // @synthesize song_fnote=_song_fnote;
@property(nonatomic) long long song_status; // @synthesize song_status=_song_status;
@property(nonatomic) int song_genre; // @synthesize song_genre=_song_genre;
@property(nonatomic) long long song_language; // @synthesize song_language=_song_language;
@property(nonatomic) unsigned long long downloadFailedTimes; // @synthesize downloadFailedTimes=_downloadFailedTimes;
@property(nonatomic) unsigned long long lastPlayTime; // @synthesize lastPlayTime=_lastPlayTime;
@property _Bool isSongNew; // @synthesize isSongNew=_isSongNew;
@property(retain) NSString *songDesc; // @synthesize songDesc=_songDesc;
@property(nonatomic) _Bool isPlayingLocalFile; // @synthesize isPlayingLocalFile=_isPlayingLocalFile;
@property(nonatomic) unsigned long long tryEnd; // @synthesize tryEnd=_tryEnd;
@property(nonatomic) unsigned long long tryBegin; // @synthesize tryBegin=_tryBegin;
@property(nonatomic) unsigned long long trySize; // @synthesize trySize=_trySize;
@property int flacSize; // @synthesize flacSize=_flacSize;
@property(nonatomic) unsigned int controlBits; // @synthesize controlBits=_controlBits;
@property _Bool isValidating; // @synthesize isValidating=_isValidating;
@property _Bool isLongVoice; // @synthesize isLongVoice=_isLongVoice;
@property int belongCD; // @synthesize belongCD=_belongCD;
@property int cdIdx; // @synthesize cdIdx=_cdIdx;
@property(retain) NSString *songCustomImgUrl; // @synthesize songCustomImgUrl=_songCustomImgUrl;
@property int aacFileSize192K; // @synthesize aacFileSize192K=_aacFileSize192K;
@property int aacFileSize96K; // @synthesize aacFileSize96K=_aacFileSize96K;
@property int aacFileSize48K; // @synthesize aacFileSize48K=_aacFileSize48K;
@property int aacFileSize24K; // @synthesize aacFileSize24K=_aacFileSize24K;
@property int aacFileSize; // @synthesize aacFileSize=_aacFileSize;
@property(nonatomic) unsigned long long playCount; // @synthesize playCount;
@property int isExclusive; // @synthesize isExclusive;
@property(retain) NSString *kgeSongMid; // @synthesize kgeSongMid;
@property int song_version; // @synthesize song_version;
@property int song_tag; // @synthesize song_tag;
@property int song_lang; // @synthesize song_lang;
@property(retain) NSString *docid; // @synthesize docid;
@property int song_EQid; // @synthesize song_EQid;
@property(retain) NSString *song_Vid; // @synthesize song_Vid;
@property(retain) NSString *song_Mid; // @synthesize song_Mid;
@property(retain) AlbumInfo *albumInfo; // @synthesize albumInfo;
@property(retain) NSArray *singerList; // @synthesize singerList;
@property int nForbitFlag; // @synthesize nForbitFlag;
@property _Bool isWord; // @synthesize isWord;
@property int topFileSize; // @synthesize topFileSize;
@property int standardFileSize; // @synthesize standardFileSize;
@property int n64Size; // @synthesize n64Size;
@property int size; // @synthesize size;
@property float addTime; // @synthesize addTime;
@property _Bool isOnlyListenPart; // @synthesize isOnlyListenPart;
@property(nonatomic) double song_Duration; // @synthesize song_Duration;
@property unsigned long long iFackSongId; // @synthesize iFackSongId;
@property(nonatomic) unsigned long long fingerSongId; // @synthesize fingerSongId;
@property(nonatomic) _Bool song_HasFingerPrinted; // @synthesize song_HasFingerPrinted;
@property int song_error; // @synthesize song_error;
@property(retain) NSString *song_LyricFilePath; // @synthesize song_LyricFilePath;
@property(retain) NSString *song_IPODAssertURL; // @synthesize song_IPODAssertURL;
@property(readonly) int song_Type; // @synthesize song_Type;
@property(readonly) unsigned long long song_ID; // @synthesize song_ID;
- (void).cxx_destruct;
- (id)prePublicAlertText;
- (id)getPublicDate;
- (_Bool)isPrePublicSong:(int)arg1;
- (id)jointStrSingerId;
- (unsigned long long)indexInObjectWithExpArray:(id)arg1;
- (_Bool)isListenedLastDays:(unsigned long long)arg1;
- (id)getMVLocalPath:(int)arg1 format:(int)arg2;
- (_Bool)isMVDownloaded:(int)arg1;
- (id)mvTypeDownloadPath;
- (void)removeUrlforRate:(int)arg1;
- (int)toWebSongType;
- (_Bool)isWebAllowedSongType:(_Bool)arg1;
- (_Bool)isSongTypeFromLowQuality;
- (struct SFlexInteger)canDownLoadAfterCacheAssertType:(int)arg1 songRate:(int)arg2;
- (void)setCdIndxByString:(id)arg1;
- (_Bool)isShouldQuery;
- (id)getImageUrlByImageOption:(unsigned long long)arg1;
- (id)getImageUrlConsideringNOAlbumSongByImageOption:(unsigned long long)arg1;
- (_Bool)hasDownloadFileForPlayWithRate:(int)arg1 force:(_Bool)arg2 assetsType:(int)arg3;
- (_Bool)forceUseLocalFileForPlay;
- (id)songAssetsJumpUrl:(int)arg1 songid:(id)arg2 aid:(id)arg3;
- (id)songAssetsRecommendTitle:(int)arg1;
- (int)songAssetsIconID:(int)arg1;
- (int)songAssetsShowID:(int)arg1;
- (int)songAssetsClickID:(int)arg1;
- (id)songAssetsAid:(int)arg1;
- (id)getDisableActionTitleByAssetsType:(int)arg1;
- (id)getMsgPayTitleByAssetsType:(int)arg1;
- (_Bool)showDownloadVipIcons:(int)arg1 iconType:(long long)arg2 assetsType:(int)arg3;
- (_Bool)showPlayingVipIcons:(int)arg1 iconType:(long long)arg2 assetsType:(int)arg3;
- (_Bool)showNoCopyRightRecommend:(int)arg1;
- (unsigned long long)rightAlertID:(int)arg1;
- (unsigned int)song_PayTrackMonth:(int)arg1;
- (unsigned int)song_PayAlbumPrice:(int)arg1;
- (int)song_ErrDownMsgId:(int)arg1;
- (int)song_ErrFavMsgId:(int)arg1;
- (int)song_ErrShareMsgId:(int)arg1;
- (int)song_ErrMsgId:(int)arg1;
- (int)song_MsgPayId:(int)arg1;
- (id)getSongFileName:(int)arg1;
- (id)get320Mp3UrlFileName;
- (_Bool)_isControlBitsValided;
- (unsigned long long)getHeaderSizeByRate:(int)arg1 assetsType:(int)arg2;
- (id)getSongInfoKey;
- (id)_createURLByRate:(int)arg1 forDownload:(_Bool)arg2 assetsType:(int)arg3;
- (int)downloadFileStatus;
- (int)getSongFileSizeByRate:(int)arg1;
- (int)getMaxSongRate;
- (_Bool)isExistSongRateFile:(int)arg1;
- (_Bool)isExistFlac;
- (_Bool)isExist192Kaac;
- (_Bool)isExist320Kmp3;
- (id)getURLByRate:(int)arg1;
- (id)getURLByRate:(int)arg1 forDownload:(_Bool)arg2 assetsType:(int)arg3;
- (id)getURLByRate:(int)arg1 forDownload:(_Bool)arg2;
- (struct SFlexInteger)isPaidContent;
- (void)setURL:(id)arg1 byRate:(int)arg2;
- (_Bool)supportByQPlay;
- (id)getQPlaySongURLString:(_Bool)arg1 songRate:(int *)arg2;
- (int)getSongImageSource;
- (id)getSongUrlForDownloadedFile;
- (_Bool)isEmptySongUrl;
- (id)song_ErrMsgForMV;
- (id)song_ErrDownMsg:(int)arg1;
- (id)song_ErrFavMsg:(int)arg1;
- (id)song_ErrShareMsg:(int)arg1;
- (id)song_ErrMsg:(int)arg1;
- (id)song_MsgPayMsgByMsgId:(int)arg1 assetsType:(int)arg2;
- (id)song_MsgPayMsg:(int)arg1;
- (void)deleteAllMaybeFiles;
- (id)allMayBeFiles;
- (_Bool)isQualityBestRightDownloaded:(int)arg1 assetsType:(int)arg2;
- (int)_songRateTypeExisted;
- (int)_songRateTypeCapacity;
- (struct SFlexInteger)isServerEncrypt;
- (_Bool)shouldPlayWeiyunLinkFirst;
- (_Bool)isWeiYunSong;
- (_Bool)isDsdSong;
- (_Bool)isGososoSong:(int)arg1;
- (_Bool)isMVSongAll;
- (_Bool)isQQSongAll;
- (_Bool)isLocalLinkSong;
- (_Bool)isSosoSong;
- (struct SFlexInteger)fiIsImportSong;
- (_Bool)isImportSong;
- (_Bool)isValidFakeSong;
- (_Bool)isLocalLinkSongExistFile:(_Bool)arg1;
- (_Bool)isLocalLinkSongExistUrlFile;
- (_Bool)isLocalLinkSongExistLocalFile;
- (_Bool)isDownloadedFileVIPDownloadSong;
- (id)actionsheetDownloadBtnNormalText:(int)arg1;
- (struct SFlexInteger)isVIPDownloadSong:(int)arg1;
- (_Bool)isLocalLinkSongIPodURL;
- (_Bool)isLocalLinkIPodSong;
- (_Bool)isIPodSong;
- (_Bool)isInIPodOrPCImportList;
- (_Bool)isDownloadOk;
- (_Bool)isInRunRadioList;
- (_Bool)isInRecentPlayList;
- (_Bool)isInImportSongList;
- (_Bool)isInDownloadedList;
- (_Bool)isExistLocalFile;
- (int)getSongDownloadFileRate;
- (struct SFlexInteger)canPlayLocalQMCFileByAssetsType:(int)arg1;
- (struct SFlexInteger)IsImportSongOrDownloadSong;
- (struct SFlexInteger)isExistPlayableLocalFileAndIsImportSongOrDownloadSong:(int)arg1;
- (struct SFlexInteger)isExistPlayableLocalFileByAssetsType:(int)arg1;
- (id)initWithCoder:(id)arg1;
- (id)getFileTitle;
- (id)fixSong_DownLoadFilePath:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
@property(readonly) __weak NSString *song_Singer_Index;
@property(readonly) SingerInfo *defaultSinger; // @synthesize defaultSinger;
@property(readonly) __weak NSString *song_SingerOrgName;
@property(readonly) __weak NSString *song_Singer;
@property(readonly) __weak NSString *song_Album_Index;
@property(readonly) __weak NSString *song_Album;
@property(readonly) _Bool hasSinger;
@property(readonly) unsigned long long albumId;
@property(retain) NSString *song_mediaMid; // @synthesize song_mediaMid;
@property(readonly) int song_DownloadFileRate;
- (int)getSongRateTypeByQuality:(int)arg1;
@property unsigned long long song_DownloadFileSize; // @synthesize song_DownloadFileSize;
@property(retain) NSString *song_DownLoadFilePath; // @synthesize song_DownLoadFilePath;
- (_Bool)song_DownLoadFilePath_isQMC;
- (id)localLinkFilePathToPlay;
- (id)filePathToPlay:(int)arg1;
- (id)getCacheFilePathBySongRate:(int)arg1 disablePath:(id)arg2;
- (id)relativePathForAbsoluteMusicPath:(id)arg1;
@property(retain) NSString *dbDownLoadFilePath;
- (void)SetSinger:(id)arg1;
- (id)song_Name_Index;
- (void)setSong_Name_Index:(id)arg1;
- (id)song_Name;
- (void)setSong_Name:(id)arg1;
- (id)init;
- (id)initWithSongType:(int)arg1 songID:(unsigned long long)arg2;
- (id)debugSongInfoDescWithAssetsType:(int)arg1;
- (int)payIcoStatusOfInfoByAssetsType:(int)arg1;
- (struct SFlexInteger)canDownloadOrVipDownloadPayDownload:(int)arg1;
- (struct SFlexInteger)isEnableLiveShowByAssertType:(int)arg1;
- (struct SFlexInteger)isLimitedFreeByAssetsType:(int)arg1;
- (void)setLimitedFree:(struct SFlexInteger)arg1;
- (struct SFlexInteger)haveDownloadHistoryByAssetsType:(int)arg1;
- (void)setDownloadedHistory:(struct SFlexInteger)arg1;
- (void)setPaidedStatus:(struct SFlexInteger)arg1;
- (struct SFlexInteger)isEnableDownloadHigherThanDownloadedByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableSetBackgroudMusic;
- (struct SFlexInteger)isEnableSingSongByAssetsType:(int)arg1;
- (_Bool)isValidKSongMid;
- (struct SFlexInteger)isEnablePlayMV;
- (struct SFlexInteger)isEnableLookAlbum;
- (struct SFlexInteger)isEnableLookSinger;
- (struct SFlexInteger)havePaiedListenByAssetsType:(int)arg1;
- (struct SFlexInteger)havePaiedDownloadByAssetsType:(int)arg1;
- (struct SFlexInteger)payTrackPriceByAssetsType:(int)arg1;
- (struct SFlexInteger)paidAlertIDByAssetsType:(int)arg1;
- (struct SFlexInteger)isPayPlayByAssetsType:(int)arg1;
- (struct SFlexInteger)isPayDownloadByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnablePlayByAssetsType:(int)arg1;
- (struct SFlexInteger)onlyListenPartByAssetsType:(int)arg1;
- (struct SFlexInteger)songListenRightByAssetsType:(int)arg1;
- (struct SFlexInteger)songOriginalListenRightAssetsType:(int)arg1;
- (struct SFlexInteger)isChorusNormalSongByAssetsType:(int)arg1;
- (int)modifyRateForTry:(int)arg1 assetsType:(int)arg2;
- (struct SFlexInteger)isEnableGlobalComment:(int)arg1;
- (struct SFlexInteger)isEnableGiveByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableTryListenByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadSuperQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadHighQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadOrVipDownloadLowQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableVipDownloadByQuality:(int)arg1 andAssetsType:(int)arg2;
- (struct SFlexInteger)isEnableVipDownloadSuperQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableVipDownloadHighQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableVipDownloadLowQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadByQuality:(int)arg1 andAssetsType:(int)arg2;
- (struct SFlexInteger)isEnableDownloadSuperQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadHighQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableDownloadLowQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnablePlaySuperQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnablePlayHighQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnablePlayLowQualityByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableCreateRadioByAssetsType:(int)arg1;
- (_Bool)isShouldShowSosoIconByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableBulletGiftByAssetsType:(int)arg1;
- (struct SFlexInteger)isShowBuySingleSong:(int)arg1;
- (struct SFlexInteger)isEnableLyricPosterByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableShareByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableSetBackGroundSongByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableAddToByAssetsType:(int)arg1;
- (struct SFlexInteger)isEnableAddToLoveByAssetsType:(int)arg1;
- (id)getStringSwitch:(int)arg1;
- (long long)getSwitchByAssetsType:(int)arg1;
- (_Bool)isActionBitSet:(long long)arg1 forSwitch:(long long)arg2;
- (_Bool)isSwitchBitSetValided:(long long)arg1;
- (struct SFlexInteger)isEnableDownloadByAssetsType:(int)arg1;
- (struct SFlexInteger)maxEnableDownloadOrVipDownloadRateByAssetsType:(int)arg1;
- (struct SFlexInteger)maxEnablePlayRateByAssetsType:(int)arg1;
- (struct SongInfoExt)getSongInfoExtByAssetsType:(int)arg1;
- (_Bool)hasSongInfoExtByAssetsType:(int)arg1;
- (_Bool)isEnablePlayUIByAssetsType:(int)arg1;
- (struct SFlexInteger)isGrayDownloadButtonByAssetsType:(int)arg1;
- (_Bool)isEnableAddToRecentPlayListUI;
- (_Bool)isEnableAddToLoveUIByAssetsType:(int)arg1;
- (_Bool)isEnableAddToListUIByAssetsType:(int)arg1;
- (_Bool)isEnableDownloadUIByAssetsType:(int)arg1;
- (_Bool)isEnableShareUIByAssetsType:(int)arg1;
- (_Bool)canPlayOrPaySong:(int)arg1;

@end

