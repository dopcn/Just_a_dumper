//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "GMSx_IVGLView.h"

#import "GMSRocketIVRenderLayerDelegate-Protocol.h"

@class NSMutableSet, NSString, UILongPressGestureRecognizer;
@protocol GMSRocketIVGLViewDelegate;

@interface GMSRocketIVGLView : GMSx_IVGLView <GMSRocketIVRenderLayerDelegate>
{
    float _gestureStartZoom;
    _Bool _isScreenBlank;
    // Error parsing type: ^{GMSRocketTileService=^^?{ServicesConfig={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate, std::__1::allocator<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate> >=^{TileTemplate}^{TileTemplate}{__compressed_pair<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate *, std::__1::allocator<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate> >=^{TileTemplate}}}}@@@II{GMSx_Mutex={atomic<long>=Aq}}{shared_ptr<bool>=^B^{__shared_weak_count}}B}, name: _tileService
    _Bool _hadPendingNonRootTileRequests;
    _Bool _isRenderingTiles;
    _Bool _canRaiseDidFinishRenderingEvent;
    int _tilesRenderedFrameCount;
    struct IconRenderer *_iconRenderer;
    NSMutableSet *_markers;
    struct map<GMSMarker *, GMSMarkerRenderInfo *, std::__1::less<GMSMarker *>, std::__1::allocator<std::__1::pair<GMSMarker *const, GMSMarkerRenderInfo *>>> _markerRenderInfos;
    struct GMSRocketIconService *_iconService;
    UILongPressGestureRecognizer *_tapDragGestureRecognizer;
    struct CGPoint _tapDragStartPoint;
    _Bool _shouldBlockTapDrag;
    _Bool _isInTapDragGesture;
    _Bool _hidesNavArrows;
    _Bool _hidesRoadLabels;
    id <GMSRocketIVGLViewDelegate> _rocketIVGLViewDelegate;
}

+ (id)renderLayerWithRenderer:(struct Renderer *)arg1 renderOptions:(struct RenderOptions *)arg2;
+ (id)camerLayerWithCamera:(struct Camera *)arg1 delegate:(id)arg2;
@property(nonatomic) _Bool hidesRoadLabels; // @synthesize hidesRoadLabels=_hidesRoadLabels;
@property(nonatomic) _Bool hidesNavArrows; // @synthesize hidesNavArrows=_hidesNavArrows;
@property(nonatomic) __weak id <GMSRocketIVGLViewDelegate> rocketIVGLViewDelegate; // @synthesize rocketIVGLViewDelegate=_rocketIVGLViewDelegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)clearMarkers;
- (unsigned long long)numberOfRenderedMarkers;
- (void)raiseWillChangeToPano:(id)arg1;
- (id)encodedPanoIdFromPhotoId:(const struct PhotoId *)arg1;
- (void)finalizePanoTransition;
- (void)clearRendererCache;
- (float)clampedRoadLabelOpacity:(float)arg1;
- (float)clampedNavArrowOpacity:(float)arg1;
- (void)enableRecognizersWithGestures:(unsigned long long)arg1;
- (void)setGestures:(unsigned long long)arg1;
- (void)removeMarkerFromRendering:(id)arg1;
- (void)updateMarkerIfNecessary:(id)arg1;
- (void)updateMarkersIfNecessary;
- (id)renderInfoForMarker:(id)arg1 distance:(double)arg2;
- (void)onTapPoint:(struct CGPoint)arg1;
- (double)clampedHeading:(double)arg1;
- (void)cameraDidUpdate:(const struct Camera *)arg1;
- (void)drawFrame;
- (void)checkTileEvents;
- (void)setBlankScreen:(_Bool)arg1;
- (id)camera;
- (void)removeOrientationAnimations;
- (void)onTapDragGesture:(id)arg1;
- (void)onPinchGesture:(id)arg1;
- (void)addOrUpdateMarker:(id)arg1;
- (void)layoutSubviews;
- (void)handlePendingLoad:(id)arg1;
- (void)setUp;
// Error parsing type for property tileService:
// Property attributes: T^{GMSRocketTileService=^^?{ServicesConfig={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{vector<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate, std::__1::allocator<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate> >=^{TileTemplate}^{TileTemplate}{__compressed_pair<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate *, std::__1::allocator<GMSx_gmm_photo::platform_ios::ServicesConfig::TileTemplate> >=^{TileTemplate}}}}@@@II{GMSx_Mutex={atomic<long>=Aq}}{shared_ptr<bool>=^B^{__shared_weak_count}}B},R,N

- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

