//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDate, NSDictionary, NSError, NSString, NSURL;
@protocol MTAppVersionDelegate;

@interface MTAppVersion : NSObject
{
    _Bool _showOnFirstLaunch;
    _Bool _groupNotesByVersion;
    _Bool _useUIAlertControllerIfAvailable;
    _Bool _useAllAvailableLanguages;
    _Bool _onlyPromptIfMainWindowIsAvailable;
    _Bool _useAppStoreDetailsIfNoPlistEntryFound;
    _Bool _checkAtLaunch;
    _Bool _verboseLogging;
    _Bool _previewMode;
    _Bool _checkingForNewVersion;
    float _checkPeriod;
    float _remindPeriod;
    NSString *_applicationVersion;
    NSString *_applicationBundleID;
    NSString *_appStoreCountry;
    NSString *_inThisVersionTitle;
    NSString *_updateAvailableTitle;
    NSString *_versionLabelFormat;
    NSString *_okButtonLabel;
    NSString *_ignoreButtonLabel;
    NSString *_remindButtonLabel;
    NSString *_downloadButtonLabel;
    long long _updatePriority;
    NSString *_remoteVersionsPlistURL;
    NSString *_localVersionsPlistPath;
    NSURL *_updateURL;
    id <MTAppVersionDelegate> _delegate;
    NSDictionary *_remoteVersionsDict;
    NSError *_downloadError;
    NSString *_versionDetails;
    id _visibleLocalAlert;
    id _visibleRemoteAlert;
}

+ (id)sharedInstance;
+ (void)load;
@property(nonatomic) _Bool checkingForNewVersion; // @synthesize checkingForNewVersion=_checkingForNewVersion;
@property(retain, nonatomic) id visibleRemoteAlert; // @synthesize visibleRemoteAlert=_visibleRemoteAlert;
@property(retain, nonatomic) id visibleLocalAlert; // @synthesize visibleLocalAlert=_visibleLocalAlert;
@property(copy, nonatomic) NSString *versionDetails; // @synthesize versionDetails=_versionDetails;
@property(retain, nonatomic) NSError *downloadError; // @synthesize downloadError=_downloadError;
@property(copy, nonatomic) NSDictionary *remoteVersionsDict; // @synthesize remoteVersionsDict=_remoteVersionsDict;
@property(nonatomic) __weak id <MTAppVersionDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSURL *updateURL; // @synthesize updateURL=_updateURL;
@property(copy, nonatomic) NSString *localVersionsPlistPath; // @synthesize localVersionsPlistPath=_localVersionsPlistPath;
@property(copy, nonatomic) NSString *remoteVersionsPlistURL; // @synthesize remoteVersionsPlistURL=_remoteVersionsPlistURL;
@property(nonatomic) _Bool previewMode; // @synthesize previewMode=_previewMode;
@property(nonatomic) _Bool verboseLogging; // @synthesize verboseLogging=_verboseLogging;
@property(nonatomic) _Bool checkAtLaunch; // @synthesize checkAtLaunch=_checkAtLaunch;
@property(nonatomic) _Bool useAppStoreDetailsIfNoPlistEntryFound; // @synthesize useAppStoreDetailsIfNoPlistEntryFound=_useAppStoreDetailsIfNoPlistEntryFound;
@property(nonatomic) _Bool onlyPromptIfMainWindowIsAvailable; // @synthesize onlyPromptIfMainWindowIsAvailable=_onlyPromptIfMainWindowIsAvailable;
@property(nonatomic) _Bool useAllAvailableLanguages; // @synthesize useAllAvailableLanguages=_useAllAvailableLanguages;
@property(nonatomic) _Bool useUIAlertControllerIfAvailable; // @synthesize useUIAlertControllerIfAvailable=_useUIAlertControllerIfAvailable;
@property(nonatomic) long long updatePriority; // @synthesize updatePriority=_updatePriority;
@property(copy, nonatomic) NSString *downloadButtonLabel; // @synthesize downloadButtonLabel=_downloadButtonLabel;
@property(copy, nonatomic) NSString *remindButtonLabel; // @synthesize remindButtonLabel=_remindButtonLabel;
@property(copy, nonatomic) NSString *ignoreButtonLabel; // @synthesize ignoreButtonLabel=_ignoreButtonLabel;
@property(copy, nonatomic) NSString *okButtonLabel; // @synthesize okButtonLabel=_okButtonLabel;
@property(copy, nonatomic) NSString *versionLabelFormat; // @synthesize versionLabelFormat=_versionLabelFormat;
@property(copy, nonatomic) NSString *updateAvailableTitle; // @synthesize updateAvailableTitle=_updateAvailableTitle;
@property(copy, nonatomic) NSString *inThisVersionTitle; // @synthesize inThisVersionTitle=_inThisVersionTitle;
@property(nonatomic) float remindPeriod; // @synthesize remindPeriod=_remindPeriod;
@property(nonatomic) float checkPeriod; // @synthesize checkPeriod=_checkPeriod;
@property(nonatomic) _Bool groupNotesByVersion; // @synthesize groupNotesByVersion=_groupNotesByVersion;
@property(nonatomic) _Bool showOnFirstLaunch; // @synthesize showOnFirstLaunch=_showOnFirstLaunch;
@property(copy, nonatomic) NSString *appStoreCountry; // @synthesize appStoreCountry=_appStoreCountry;
@property(copy, nonatomic) NSString *applicationBundleID; // @synthesize applicationBundleID=_applicationBundleID;
@property(copy, nonatomic) NSString *applicationVersion; // @synthesize applicationVersion=_applicationVersion;
- (void).cxx_destruct;
- (id)addTimestampParamForURLString:(id)arg1;
- (void)applicationWillEnterForeground;
- (void)applicationLaunched;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)willPresentAlertView:(id)arg1;
- (void)didRotate;
- (void)resizeAlertView:(id)arg1;
- (void)productViewControllerDidFinish:(id)arg1;
- (_Bool)openAppPageInAppStore;
- (void)didDismissAlert:(id)arg1 withButtonAtIndex:(long long)arg2;
- (_Bool)showRemindButton;
- (_Bool)showIgnoreButton;
- (void)checkIfNewVersion;
- (void)checkForNewVersion;
- (void)checkForNewVersionInBackground;
- (void)setAppStoreIDOnMainThread:(id)arg1;
- (id)valueForKey:(id)arg1 inJSON:(id)arg2;
- (_Bool)shouldCheckForNewVersion;
- (void)downloadedVersionsData;
- (id)URLEncodedString:(id)arg1;
- (id)versionDetailsSince:(id)arg1 inDict:(id)arg2;
- (id)versionDetails:(id)arg1 inDict:(id)arg2;
- (id)mostRecentVersionInDict:(id)arg1;
- (id)localVersionsDict;
- (void)setLastVersion:(id)arg1;
- (id)lastVersion;
- (void)dealloc;
@property(nonatomic) _Bool viewedVersionDetails;
@property(copy, nonatomic) NSString *ignoredVersion;
@property(retain, nonatomic) NSDate *lastReminded;
@property(retain, nonatomic) NSDate *lastChecked;
@property(nonatomic) unsigned long long appStoreID;
- (id)init;
- (id)localizedStringForKey:(id)arg1 withDefault:(id)arg2;

@end

