//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "UCMoviePlayerListener-Protocol.h"
#import "UCVideoRequestProcessorDelegate-Protocol.h"

@class NSDate, NSMutableArray, NSString, UCVideoBusinessInfo, UCVideoInfo, UCVideoRequestProcessor, UCWebSitePlayFinishPluginManager;
@protocol RelatedVideosFetchListener, WebkitBasicWebView;

@interface UCWebSiteVideoPlayProcessor : NSObject <UCMoviePlayerListener, UCVideoRequestProcessorDelegate>
{
    _Bool _isMiniPlay;
    _Bool _isTryFindNextWebVideo;
    _Bool _isSkipWebPlay;
    int _lastCrashWebAgentTag;
    id <RelatedVideosFetchListener> _fetchListener;
    UCVideoRequestProcessor *_requestProcessor;
    UCWebSitePlayFinishPluginManager *_playFinishPluginManager;
    id <WebkitBasicWebView> _webAgent;
    NSString *_playingWebViewUrl;
    UCVideoInfo *_playingVideoInfo;
    NSString *_contentURL;
    NSDate *_lastPlayDate;
    NSString *_lastCrashPagesUrl;
    NSMutableArray *_playCmdQueue;
    UCVideoBusinessInfo *_businessInfo;
}

+ (void)postWebPlaybackEventWithInfo:(id)arg1 inWebView:(id)arg2;
+ (void)postWebPlaybackEvent:(id)arg1 inWebView:(id)arg2;
+ (id)getKeywordWithWebView:(id)arg1;
+ (id)getRefereURLWithWebView:(id)arg1;
+ (id)getTitleWithWebView:(id)arg1;
+ (id)getURLWithWebView:(id)arg1;
+ (id)evaluateJavaScriptString:(id)arg1 inWebView:(id)arg2;
+ (id)defaultProcessor;
+ (_Bool)isInvalidVideoURLHostForRequestURL:(id)arg1;
+ (_Bool)isVideoURLForRequestURL:(id)arg1;
+ (id)extractVideoInfoWithUrl:(id)arg1 inWebView:(id)arg2;
@property(retain, nonatomic) UCVideoBusinessInfo *businessInfo; // @synthesize businessInfo=_businessInfo;
@property(retain, nonatomic) NSMutableArray *playCmdQueue; // @synthesize playCmdQueue=_playCmdQueue;
@property(nonatomic) int lastCrashWebAgentTag; // @synthesize lastCrashWebAgentTag=_lastCrashWebAgentTag;
@property(copy, nonatomic) NSString *lastCrashPagesUrl; // @synthesize lastCrashPagesUrl=_lastCrashPagesUrl;
@property(nonatomic) _Bool isSkipWebPlay; // @synthesize isSkipWebPlay=_isSkipWebPlay;
@property(retain, nonatomic) NSDate *lastPlayDate; // @synthesize lastPlayDate=_lastPlayDate;
@property(copy, nonatomic) NSString *contentURL; // @synthesize contentURL=_contentURL;
@property(retain, nonatomic) UCVideoInfo *playingVideoInfo; // @synthesize playingVideoInfo=_playingVideoInfo;
@property(copy, nonatomic) NSString *playingWebViewUrl; // @synthesize playingWebViewUrl=_playingWebViewUrl;
@property(nonatomic) id <WebkitBasicWebView> webAgent; // @synthesize webAgent=_webAgent;
@property(nonatomic) _Bool isTryFindNextWebVideo; // @synthesize isTryFindNextWebVideo=_isTryFindNextWebVideo;
@property(nonatomic) _Bool isMiniPlay; // @synthesize isMiniPlay=_isMiniPlay;
@property(retain, nonatomic) UCWebSitePlayFinishPluginManager *playFinishPluginManager; // @synthesize playFinishPluginManager=_playFinishPluginManager;
@property(retain, nonatomic) UCVideoRequestProcessor *requestProcessor; // @synthesize requestProcessor=_requestProcessor;
@property(nonatomic) id <RelatedVideosFetchListener> fetchListener; // @synthesize fetchListener=_fetchListener;
- (void)onMoviePlayerStopPlayNextMovie;
- (void)onMoviePlayerPlaybackEvents:(id)arg1;
- (void)onDisMissNewsReaderController;
- (void)onEnterNewsReaderController;
- (void)doSystemPlayErrorStatisticsWithVideoUrl:(id)arg1 params:(id)arg2 webView:(id)arg3;
- (void)doSystemPlaySuccStatisticsWithVideoUrl:(id)arg1 params:(id)arg2 webView:(id)arg3;
- (void)doSystemPlayStatisticsWithVideoUrl:(id)arg1 params:(id)arg2 webView:(id)arg3;
- (void)instantPlayWithVideoInfo:(id)arg1 inWebView:(id)arg2;
- (void)findNextVideoTimeout;
- (void)cancelFindNextVideoTimeoutChecking;
- (void)startFindNextVideoTimeoutChecking;
- (_Bool)canInjectJSToFindNextVideo:(id)arg1;
- (void)moviePlayerPlayWillReachEnd;
- (_Bool)moviePlayerHasNextVideoWhenPlayEnd;
- (_Bool)moviePlayerTryToPlayNextMovie;
- (void)moviePlayerWillBeControlledByOtherPlay;
- (void)moviePlayerWillChangeToContentURL:(id)arg1;
- (void)moviePlayerExtendBtnDidClick:(unsigned long long)arg1;
- (void)moviePlayerDidFinishWithPlaybackInfo:(id)arg1;
- (void)moviePlayerDidUserChangePlayStateToPlay:(_Bool)arg1;
- (void)didChangePlaybackState:(int)arg1;
- (void)didMoviePlayerViewScreenShowTypeChange:(long long)arg1 oldType:(long long)arg2;
- (id)pluginBusinessController;
- (void)resetMovieInfo;
- (void)showErrorToast;
- (id)evaluateJavaScriptString:(id)arg1;
- (_Bool)shouldPostWebPlaybackEvent;
- (id)webViewTitle;
- (id)webViewURL;
- (_Bool)isUCVideoWithPageURL:(id)arg1;
- (void)playContentWithSourceSwitch:(_Bool)arg1 vps:(_Bool)arg2;
- (void)setContentWithSourceSwitch:(_Bool)arg1 vps:(_Bool)arg2 andAutoPlay:(_Bool)arg3;
- (void)showEmptyPlayer:(_Bool)arg1;
- (_Bool)needsRequestVPS;
- (_Bool)needsForceSwitchSource;
- (_Bool)isInForceVpsList;
- (_Bool)isInValidContentURL;
- (void)playContent;
- (_Bool)playWithVideoInfo:(id)arg1;
- (void)onWebVideoSeekTime:(id)arg1;
- (void)onSystemPlayerEvent:(id)arg1;
- (id)extractVideoInfoWithURL:(id)arg1 fromAddressInput:(_Bool)arg2 inWebView:(id)arg3;
- (void)onWebPlayCommand:(id)arg1;
- (_Bool)isAcceptedPlayCommandWithUrl:(id)arg1;
- (float)heightForMiniPlayerWithPageURL:(id)arg1 inWebView:(id)arg2;
- (_Bool)isVideoDetectStartEvent:(id)arg1;
- (_Bool)canContinuousPlayingWithPlayCmd:(id)arg1 windowTag:(int)arg2 pageURL:(id)arg3;
- (_Bool)isPlayingInMiniPlayer;
- (_Bool)isPlayerLiving;
- (void)detachWebAgent:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)extractHostFromURL:(id)arg1;
- (void)clearLastCrashInfo;
- (void)recordLastCrashPagesUrl:(id)arg1 webAgentTag:(int)arg2;
- (_Bool)isFixMiniPlayerSiteWithPageURL:(id)arg1;
- (_Bool)canForceShowMiniPlayerWithPageURL:(id)arg1;
- (_Bool)canAutoShowMiniPlayerWithPageURL:(id)arg1 inWindow:(int)arg2;
- (id)startUCVideoRequest:(id)arg1 inWebView:(id)arg2;
- (void)detachRelatedVideosFetchListener:(id)arg1;
- (void)syncCurrentPlayVideoWithIndex:(long long)arg1 videoID:(long long)arg2 userClick:(_Bool)arg3;
- (void)respondToFetchRelatedVideosRequest:(id)arg1;
- (void)requestToFetchRelatedVideos:(long long)arg1 listener:(id)arg2;
- (_Bool)canFetchRelatedVideosByJS;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

