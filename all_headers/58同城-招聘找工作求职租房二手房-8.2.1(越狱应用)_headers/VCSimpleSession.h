//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSString, UIImage, UIView, VCPreviewView;
@protocol OS_dispatch_queue, VCSessionDelegate;

@interface VCSimpleSession : NSObject
{
    VCPreviewView *_previewView;
    struct shared_ptr<videocore::simpleApi::PixelBufferOutput> m_pbOutput;
    struct shared_ptr<videocore::iOS::MicSource> m_micSource;
    struct shared_ptr<videocore::iOS::CameraSource> m_cameraSource;
    struct shared_ptr<videocore::Apple::PixelBufferSource> m_pixelBufferSource;
    struct shared_ptr<videocore::AspectTransform> m_pbAspect;
    struct shared_ptr<videocore::PositionTransform> m_pbPosition;
    struct shared_ptr<videocore::Split> m_videoSplit;
    struct shared_ptr<videocore::Split> m_videoPreviewSplit;
    struct shared_ptr<videocore::AspectTransform> m_aspectTransform;
    int m_aspectMode;
    struct shared_ptr<videocore::PositionTransform> m_positionTransform;
    struct shared_ptr<videocore::IAudioMixer> m_audioMixer;
    struct shared_ptr<videocore::IVideoMixer> m_videoMixer;
    struct shared_ptr<videocore::IVideoMixer> m_videoPreviewMixer;
    struct shared_ptr<videocore::ITransform> m_h264Encoder;
    struct shared_ptr<videocore::ITransform> m_aacEncoder;
    struct shared_ptr<videocore::ITransform> m_h264Packetizer;
    struct shared_ptr<videocore::ITransform> m_aacPacketizer;
    struct shared_ptr<videocore::Split> m_aacSplit;
    struct shared_ptr<videocore::Split> m_h264Split;
    struct shared_ptr<videocore::Apple::MP4Multiplexer> m_muxer;
    struct shared_ptr<videocore::IOutputSession> m_outputSession;
    struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000>>> m_epochTime;
    NSObject<OS_dispatch_queue> *_graphManagementQueue;
    struct CGSize _videoSize;
    int _bitrate;
    int _fps;
    int _bpsCeiling;
    int _estimatedThroughput;
    int _retryCount;
    _Bool _useInterfaceOrientation;
    float _videoZoomFactor;
    int _audioChannelCount;
    float _audioSampleRate;
    float _micGain;
    long long _cameraState;
    long long _aspectMode;
    long long _rtmpSessionState;
    _Bool _orientationLocked;
    _Bool _torch;
    _Bool _useAdaptiveBitrate;
    _Bool _continuousAutofocus;
    _Bool _continuousExposure;
    struct CGPoint _focusPOI;
    struct CGPoint _exposurePOI;
    long long _filter;
    int _retryCountMax;
    int _retryInterval;
    UIImage *_pauseImage;
    CDUnknownBlockType _task;
    NSString *_dest;
    NSString *_liveName;
    id <VCSessionDelegate> _delegate;
    struct CGRect _imageRect;
}

@property(nonatomic) id <VCSessionDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) long long filter; // @synthesize filter=_filter;
@property(nonatomic) struct CGRect imageRect; // @synthesize imageRect=_imageRect;
@property(retain) NSString *liveName; // @synthesize liveName=_liveName;
@property(retain) NSString *dest; // @synthesize dest=_dest;
@property(nonatomic) int retryInterval; // @synthesize retryInterval=_retryInterval;
@property(nonatomic) int retryCountMax; // @synthesize retryCountMax=_retryCountMax;
@property(nonatomic) CDUnknownBlockType task; // @synthesize task=_task;
@property(retain, nonatomic) UIImage *pauseImage; // @synthesize pauseImage=_pauseImage;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)applicationDocumentsDirectory;
- (void)sendData;
- (void)addPixelBufferSource:(id)arg1 withRect:(struct CGRect)arg2;
- (void)removePixelBuffer;
- (void)addEncodersAndPacketizers;
- (void)setupGraph;
- (id)getCameraPreviewLayer;
- (void)endRtmpSession;
- (void)startSessionInternal:(id)arg1 streamKey:(id)arg2;
- (void)startRtmpSessionWithURL:(id)arg1 andStreamKey:(id)arg2;
- (void)reConnectRtmpSession;
- (void)dealloc;
- (void)initInternalWithVideoSize:(struct CGSize)arg1 frameRate:(int)arg2 bitrate:(int)arg3 useInterfaceOrientation:(_Bool)arg4 cameraState:(long long)arg5 aspectMode:(long long)arg6;
- (id)initWithVideoSize:(struct CGSize)arg1 frameRate:(int)arg2 bitrate:(int)arg3 useInterfaceOrientation:(_Bool)arg4 cameraState:(long long)arg5 aspectMode:(long long)arg6;
- (id)initWithVideoSize:(struct CGSize)arg1 frameRate:(int)arg2 bitrate:(int)arg3 useInterfaceOrientation:(_Bool)arg4 cameraState:(long long)arg5;
- (id)initWithVideoSize:(struct CGSize)arg1 frameRate:(int)arg2 bitrate:(int)arg3 useInterfaceOrientation:(_Bool)arg4;
- (id)initWithVideoSize:(struct CGSize)arg1 frameRate:(int)arg2 bitrate:(int)arg3;
@property(readonly, nonatomic) int estimatedThroughput; // @dynamic estimatedThroughput;
@property(nonatomic) _Bool useAdaptiveBitrate; // @dynamic useAdaptiveBitrate;
@property(nonatomic) struct CGPoint exposurePointOfInterest; // @dynamic exposurePointOfInterest;
@property(nonatomic) struct CGPoint focusPointOfInterest; // @dynamic focusPointOfInterest;
@property(nonatomic) _Bool continuousExposure; // @dynamic continuousExposure;
@property(nonatomic) _Bool continuousAutofocus; // @dynamic continuousAutofocus;
@property(readonly, nonatomic) UIView *previewView; // @dynamic previewView;
- (_Bool)isPause;
- (void)setPause:(_Bool)arg1;
@property(nonatomic) float micGain; // @dynamic micGain;
@property(nonatomic) float audioSampleRate; // @dynamic audioSampleRate;
@property(nonatomic) int audioChannelCount; // @dynamic audioChannelCount;
@property(nonatomic) float videoZoomFactor; // @dynamic videoZoomFactor;
@property(nonatomic) long long rtmpSessionState; // @dynamic rtmpSessionState;
@property(nonatomic) long long cameraState; // @dynamic cameraState;
@property(nonatomic) long long aspectMode; // @dynamic aspectMode;
@property(nonatomic) _Bool torch; // @dynamic torch;
@property(nonatomic) _Bool orientationLocked; // @dynamic orientationLocked;
@property(readonly, nonatomic) _Bool useInterfaceOrientation; // @dynamic useInterfaceOrientation;
@property(nonatomic) int fps; // @dynamic fps;
@property(nonatomic) int bitrate; // @dynamic bitrate;
@property(nonatomic) struct CGSize videoSize; // @dynamic videoSize;

@end

