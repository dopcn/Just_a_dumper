//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString;

@interface FMDatabase : NSObject
{
    void *_db;
    NSString *_databasePath;
    _Bool _logsErrors;
    _Bool _crashOnErrors;
    _Bool _traceExecution;
    _Bool _checkedOut;
    _Bool _shouldCacheStatements;
    _Bool _isExecutingStatement;
    _Bool _inTransaction;
    double _maxBusyRetryTimeInterval;
    double _startBusyRetryTime;
    NSMutableDictionary *_cachedStatements;
    NSMutableSet *_openResultSets;
    NSMutableSet *_openFunctions;
    NSDateFormatter *_dateFormat;
}

+ (id)storeableDateFormat:(id)arg1;
+ (_Bool)isSQLiteThreadSafe;
+ (id)sqliteLibVersion;
+ (int)FMDBVersion;
+ (id)FMDBUserVersion;
+ (id)databaseWithPath:(id)arg1;
+ (id)statementToSelect:(id)arg1 from:(id)arg2 where:(id)arg3 groupBy:(id)arg4 having:(id)arg5 orderBy:(id)arg6 limit:(id)arg7 offset:(id)arg8;
+ (id)whereClauseToMatchValues:(id)arg1 arguments:(id *)arg2;
+ (id)statementToCount:(id)arg1 from:(id)arg2 where:(id)arg3;
+ (id)argumentTupleOfSize:(unsigned long long)arg1;
+ (id)listOfColumns:(id)arg1;
+ (id)escapeValue:(id)arg1;
+ (id)escapeIdentifier:(id)arg1;
+ (id)escapeString:(id)arg1;
+ (id)inMemoryDatabase;
+ (id)temporaryDatabase;
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
- (void).cxx_destruct;
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;
- (void)setShouldCacheStatements:(_Bool)arg1;
- (_Bool)shouldCacheStatements;
- (id)inSavePoint:(CDUnknownBlockType)arg1;
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)inTransaction;
- (_Bool)beginTransaction;
- (_Bool)beginDeferredTransaction;
- (_Bool)commit;
- (_Bool)rollback;
- (_Bool)update:(id)arg1 withErrorAndBindings:(id *)arg2;
- (_Bool)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;
- (_Bool)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;
- (_Bool)executeStatements:(id)arg1;
- (_Bool)executeUpdateWithFormat:(id)arg1;
- (_Bool)executeUpdate:(id)arg1 withVAList:(char *)arg2;
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;
- (_Bool)executeUpdate:(id)arg1 values:(id)arg2 error:(id *)arg3;
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;
- (_Bool)executeUpdate:(id)arg1;
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(char *)arg5;
- (id)executeQuery:(id)arg1 withVAList:(char *)arg2;
- (id)executeQuery:(id)arg1 values:(id)arg2 error:(id *)arg3;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;
- (id)executeQueryWithFormat:(id)arg1;
- (id)executeQuery:(id)arg1;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4;
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;
- (void)extractSQL:(id)arg1 argumentsList:(char *)arg2 intoString:(id)arg3 arguments:(id)arg4;
- (void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;
- (int)changes;
- (long long)lastInsertRowId;
- (id)lastError;
- (id)errorWithMessage:(id)arg1;
- (int)lastErrorCode;
- (_Bool)hadError;
- (id)lastErrorMessage;
- (_Bool)databaseExists;
- (void)warnInUse;
- (_Bool)goodConnection;
- (id)stringFromDate:(id)arg1;
- (id)dateFromString:(id)arg1;
- (void)setDateFormat:(id)arg1;
- (_Bool)hasDateFormatter;
- (_Bool)setKeyWithData:(id)arg1;
- (_Bool)setKey:(id)arg1;
- (_Bool)rekeyWithData:(id)arg1;
- (_Bool)rekey:(id)arg1;
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;
- (id)cachedStatementForQuery:(id)arg1;
- (void)clearCachedStatements;
- (void)resultSetDidClose:(id)arg1;
- (void)closeOpenResultSets;
- (_Bool)hasOpenResultSets;
- (void)setBusyRetryTimeout:(int)arg1;
- (int)busyRetryTimeout;
- (double)maxBusyRetryTimeInterval;
- (void)setMaxBusyRetryTimeInterval:(double)arg1;
- (_Bool)close;
- (_Bool)openWithFlags:(int)arg1 vfs:(id)arg2;
- (_Bool)openWithFlags:(int)arg1;
- (_Bool)open;
- (const char *)sqlitePath;
- (void *)sqliteHandle;
- (id)databasePath;
- (void)dealloc;
- (void)finalize;
- (id)initWithPath:(id)arg1;
- (id)init;
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;
- (_Bool)columnExists:(id)arg1 columnName:(id)arg2;
- (void)setUserVersion:(unsigned int)arg1;
- (unsigned int)userVersion;
- (void)setApplicationID:(unsigned int)arg1;
- (unsigned int)applicationID;
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;
- (id)getTableSchema:(id)arg1;
- (id)getSchema;
- (_Bool)tableExists:(id)arg1;
- (id)dateForQuery:(id)arg1;
- (id)dataForQuery:(id)arg1;
- (double)doubleForQuery:(id)arg1;
- (_Bool)boolForQuery:(id)arg1;
- (long long)longForQuery:(id)arg1;
- (int)intForQuery:(id)arg1;
- (id)stringForQuery:(id)arg1;
- (long long)deleteFrom:(id)arg1 where:(id)arg2 arguments:(id)arg3 error:(id *)arg4;
- (long long)deleteFrom:(id)arg1 matchingValues:(id)arg2 error:(id *)arg3;
- (long long)update:(id)arg1 columns:(id)arg2 expressions:(id)arg3 where:(id)arg4 arguments:(id)arg5 error:(id *)arg6;
- (long long)update:(id)arg1 values:(id)arg2 where:(id)arg3 arguments:(id)arg4 error:(id *)arg5;
- (long long)update:(id)arg1 values:(id)arg2 matchingValues:(id)arg3 error:(id *)arg4;
- (id)selectResults:(id)arg1 from:(id)arg2 where:(id)arg3 groupBy:(id)arg4 having:(id)arg5 arguments:(id)arg6 orderBy:(id)arg7 limit:(id)arg8 offset:(id)arg9 error:(id *)arg10;
- (id)selectResultsFrom:(id)arg1 where:(id)arg2 arguments:(id)arg3 orderBy:(id)arg4 error:(id *)arg5;
- (id)selectResults:(id)arg1 from:(id)arg2 matchingValues:(id)arg3 orderBy:(id)arg4 limit:(id)arg5 offset:(id)arg6 error:(id *)arg7;
- (id)selectResultsFrom:(id)arg1 matchingValues:(id)arg2 orderBy:(id)arg3 error:(id *)arg4;
- (id)selectResultsFrom:(id)arg1 orderBy:(id)arg2 error:(id *)arg3;
- (id)selectAllFrom:(id)arg1 where:(id)arg2 arguments:(id)arg3 orderBy:(id)arg4 error:(id *)arg5;
- (id)selectAllFrom:(id)arg1 orderBy:(id)arg2 error:(id *)arg3;
- (long long)count:(id)arg1 from:(id)arg2 where:(id)arg3 arguments:(id)arg4 error:(id *)arg5;
- (long long)count:(id)arg1 from:(id)arg2 matchingValues:(id)arg3 error:(id *)arg4;
- (long long)countFrom:(id)arg1 matchingValues:(id)arg2 error:(id *)arg3;
- (long long)countFrom:(id)arg1 error:(id *)arg2;
- (id)insertInto:(id)arg1 row:(id)arg2 error:(id *)arg3;
- (_Bool)insertInto:(id)arg1 columns:(id)arg2 values:(id)arg3 error:(id *)arg4;
- (_Bool)dropIndexWithName:(id)arg1 error:(id *)arg2;
- (_Bool)createIndexWithName:(id)arg1 tableName:(id)arg2 columns:(id)arg3 unique:(_Bool)arg4 error:(id *)arg5;
- (_Bool)createUniqueIndexWithName:(id)arg1 tableName:(id)arg2 columns:(id)arg3 error:(id *)arg4;
- (_Bool)createIndexWithName:(id)arg1 tableName:(id)arg2 columns:(id)arg3 error:(id *)arg4;
- (_Bool)dropTableWithName:(id)arg1 ifExists:(_Bool)arg2 error:(id *)arg3;
- (_Bool)dropTableIfExistsWithName:(id)arg1 error:(id *)arg2;
- (_Bool)dropTableWithName:(id)arg1 error:(id *)arg2;
- (_Bool)addColumn:(id)arg1 toTable:(id)arg2 error:(id *)arg3;
- (_Bool)renameTable:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (_Bool)createTableWithName:(id)arg1 columns:(id)arg2 constraints:(id)arg3 error:(id *)arg4;
- (id)indexNamesOnTable:(id)arg1;
- (id)tableNames;
- (id)tableSchema:(id)arg1;
- (id)databaseSchema;
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2 error:(id *)arg3;
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2 error:(id *)arg3;
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2;
- (_Bool)openWithFlags:(int)arg1 error:(id *)arg2;
- (_Bool)open:(id *)arg1;

@end

