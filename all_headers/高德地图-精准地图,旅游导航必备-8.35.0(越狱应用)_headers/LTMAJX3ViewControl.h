//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "LTMBaseLayerViewControl.h"

#import "AJX3VCPageProtocol-Protocol.h"
#import "LTMAJX3ViewControlProtocol-Protocol.h"
#import "LTMAJX3ViewDelegate-Protocol.h"

@class LTMAJX3View, NSString;

@interface LTMAJX3ViewControl : LTMBaseLayerViewControl <LTMAJX3ViewDelegate, AJX3VCPageProtocol, LTMAJX3ViewControlProtocol>
{
    _Bool _isHideStatusBar;
    LTMAJX3View *_ajxView;
    id _vcResumeData;
}

+ (void)openAJX3VCPage:(id)arg1 inManager:(id)arg2;
+ (_Bool)goScheme:(id)arg1;
@property(retain, nonatomic) id vcResumeData; // @synthesize vcResumeData=_vcResumeData;
@property(nonatomic) _Bool isHideStatusBar; // @synthesize isHideStatusBar=_isHideStatusBar;
@property(retain, nonatomic) LTMAJX3View *ajxView; // @synthesize ajxView=_ajxView;
- (void).cxx_destruct;
- (id)getResourceFullPath;
- (_Bool)expectDismissingSplashViewManually;
- (void)ajxViewDidLoad:(id)arg1;
- (void)ajxViewWillLoad:(id)arg1;
- (void)popCurrentAJX3VCPageFromCtxOB:(id)arg1;
- (void)replaceAJX3VCPageFromCtxOB:(id)arg1;
- (void)openAJX3VCPageFromCtxOB:(id)arg1;
- (void)receiveAppInactiveNotification:(id)arg1;
- (void)receiveAppActiveNotification:(id)arg1;
- (_Bool)isShowOnTop;
- (_Bool)needReceiveAppActiveNotification:(id)arg1;
- (id)ajxResumeData;
- (_Bool)hideStatusbar;
- (void)resetStatusBar;
- (void)updateStatusBar;
- (void)resetStatusBarToDefalut;
- (_Bool)isDuplicateEnable;
- (id)getModule:(id)arg1;
- (void)onGoBack;
- (void)ajxDidBackFromPage:(id)arg1 toPage:(id)arg2 withParams:(id)arg3 needTransitionAnimation:(_Bool)arg4;
- (_Bool)ajxShouldBackFromPage:(id)arg1 toPage:(id)arg2 withParams:(id)arg3;
- (_Bool)handleOnGo:(id)arg1;
- (void)destroyAJX3ViewWhenReplaceLastPageWithNonAJXPagePath:(id)arg1 withPageID:(id)arg2 andParams:(id)arg3;
- (_Bool)isAJXPagePath:(id)arg1 withPageID:(id)arg2 andParams:(id)arg3;
- (_Bool)canGoBack;
- (void)evaluateScriptWithPathAndParams:(id)arg1 pageID:(id)arg2 params:(id)arg3 callback:(CDUnknownBlockType)arg4 keyValues:(id)arg5 backgroundColor:(id)arg6 needPushAnimation:(_Bool)arg7 virtualMachine:(_Bool)arg8 preloadJSPath:(id)arg9;
- (void)evaluateScriptWithPathAndParams:(id)arg1 pageID:(id)arg2 params:(id)arg3 callback:(CDUnknownBlockType)arg4 keyValues:(id)arg5 backgroundColor:(id)arg6 needPushAnimation:(_Bool)arg7 virtualMachine:(_Bool)arg8;
- (void)evaluateScriptWithPathAndParams:(id)arg1 params:(id)arg2 callback:(CDUnknownBlockType)arg3 keyValues:(id)arg4 backgroundColor:(id)arg5 needPushAnimation:(_Bool)arg6 virtualMachine:(_Bool)arg7;
- (void)evaluateScriptWithPathAndParams:(id)arg1 params:(id)arg2 callback:(CDUnknownBlockType)arg3 keyValues:(id)arg4 backgroundColor:(id)arg5 needPushAnimation:(_Bool)arg6;
- (void)evaluateScriptWithPathAndParams:(id)arg1 params:(id)arg2 backgroundColor:(id)arg3 needPushAnimation:(_Bool)arg4;
- (void)evaluateScriptWithPath:(id)arg1 backgroundColor:(id)arg2 needPushAnimation:(_Bool)arg3;
- (void)evaluateScriptWithPathAndParams:(id)arg1 params:(id)arg2 callback:(CDUnknownBlockType)arg3 keyValues:(id)arg4 needPushAnimation:(_Bool)arg5;
- (void)evaluateScriptWithPathAndParams:(id)arg1 pageID:(id)arg2 params:(id)arg3 needPushAnimation:(_Bool)arg4;
- (void)evaluateScriptWithPathAndParams:(id)arg1 params:(id)arg2 needPushAnimation:(_Bool)arg3;
- (void)evaluateScriptWithPath:(id)arg1 needPushAnimation:(_Bool)arg2;
- (id)splashViewForPage:(struct CGRect)arg1 needDefaultSplash:(_Bool *)arg2 pagePath:(id)arg3 andPageParams:(id)arg4 pageConfig:(id *)arg5;
- (void)loadViewWithBackgroundColor:(id)arg1;
- (void)loadView;
- (_Bool)isCoverMapView;
@property(nonatomic) _Bool isSingleVCPageMode;
- (void)dealloc;
- (void)resumeAnimated:(_Bool)arg1 withData:(id)arg2;
- (void)dismissAnimated:(_Bool)arg1;
- (void)viewDidPause;
- (void)showAnimated:(_Bool)arg1;
- (void)viewWillPause;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

