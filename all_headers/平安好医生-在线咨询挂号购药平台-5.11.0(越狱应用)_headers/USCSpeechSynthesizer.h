//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "USCPlayerDelegate-Protocol.h"
#import "USCTTSEngineDelegate-Protocol.h"
#import "USCTTSOffLineManagerDelegate-Protocol.h"

@class NSMutableArray, NSMutableData, NSOperationQueue, NSString, USCPlayer, USCTTSEngine, USCTTSOffLineManager;
@protocol USCSpeechSynthesizerDelegate;

@interface USCSpeechSynthesizer : NSObject <USCTTSEngineDelegate, USCPlayerDelegate, USCTTSOffLineManagerDelegate>
{
    USCTTSEngine *_engine;
    _Bool canSynCancel;
    _Bool canPlayCancel;
    _Bool isPublic;
    NSString *privateAddress;
    NSString *_vol;
    NSString *_spd;
    NSString *_vcn;
    NSString *_pit;
    NSString *_length;
    int _sleeptime;
    _Bool _isOfflineTTSEnable;
    _Bool _synOnly;
    _Bool _tts_auto_play;
    int _currentStatus;
    float _tts_auto_volume;
    id <USCSpeechSynthesizerDelegate> _delegate;
    NSMutableData *_testData;
    NSMutableArray *_needPlayDataArray;
    USCPlayer *_playAudioSource;
    NSOperationQueue *_playQueue;
    NSString *_modelPath;
    NSOperationQueue *_operationQueue;
    USCTTSOffLineManager *_offlineManager;
}

@property(nonatomic) float tts_auto_volume; // @synthesize tts_auto_volume=_tts_auto_volume;
@property(nonatomic) _Bool tts_auto_play; // @synthesize tts_auto_play=_tts_auto_play;
@property(retain, nonatomic) USCTTSOffLineManager *offlineManager; // @synthesize offlineManager=_offlineManager;
@property(retain, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain, nonatomic) NSString *modelPath; // @synthesize modelPath=_modelPath;
@property(retain, nonatomic) NSOperationQueue *playQueue; // @synthesize playQueue=_playQueue;
@property(retain, nonatomic) USCPlayer *playAudioSource; // @synthesize playAudioSource=_playAudioSource;
@property(nonatomic) int currentStatus; // @synthesize currentStatus=_currentStatus;
@property(nonatomic) _Bool synOnly; // @synthesize synOnly=_synOnly;
@property(retain, nonatomic) NSMutableArray *needPlayDataArray; // @synthesize needPlayDataArray=_needPlayDataArray;
@property(retain, nonatomic) NSMutableData *testData; // @synthesize testData=_testData;
@property(nonatomic) _Bool isOfflineTTSEnable; // @synthesize isOfflineTTSEnable=_isOfflineTTSEnable;
@property(nonatomic) __weak id <USCSpeechSynthesizerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)synthesiszeEnd:(id)arg1;
- (void)synchnizeTestData;
- (void)notificatePlayerSynthesizeEnd;
- (void)resultData:(id)arg1;
- (void)synthesizeBengin;
- (void)playEnd:(id)arg1;
- (void)playResume;
- (void)playPause;
- (void)playBegin;
- (void)synData:(id)arg1;
- (void)onSynthesizeProcessData:(id)arg1;
- (void)on_tts_synthesis_data:(id)arg1 finish:(_Bool)arg2;
- (void)on_tts_event_type:(int)arg1;
- (void)on_tts_type:(int)arg1 error:(id)arg2;
- (void)doEvent:(int)arg1;
- (void)doType:(int)arg1 Error:(id)arg2;
- (void)setTTSAddress:(id)arg1 public:(_Bool)arg2;
- (void)writeDataToPlayer:(id)arg1;
- (void)appendSynData:(id)arg1;
- (_Bool)setProperty:(int)arg1 value:(id)arg2;
- (void)cancelPlay;
- (void)cancelSyn;
- (void)cancelSpeaking;
- (void)resumeSpeaking;
- (void)pauseSpeaking;
- (void)speaking:(id)arg1;
- (_Bool)checkAppConfig;
- (void)offlinettsPlay:(id)arg1;
- (void)setSleepTime:(id)arg1;
- (int)setAudioSource:(id)arg1;
- (int)getStatus;
- (id)getOption:(int)arg1;
- (void)setOption:(int)arg1 value:(id)arg2;
- (void)pause;
- (void)resume;
- (void)stop;
- (void)playSynWav;
- (int)playText:(id)arg1;
- (void)synthesizeText:(id)arg1;
- (void)set_tts_play_value:(id)arg1;
- (void)setOfflineOption;
- (void)setOffLineModel:(id)arg1;
- (void)disposePlayOperation;
- (id)initWithContext:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

