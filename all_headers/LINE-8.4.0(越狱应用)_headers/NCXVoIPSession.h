//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "AMPCallSessionDelegate-Protocol.h"
#import "AMPServiceSessionDelegate-Protocol.h"

@class AMPAudioControl, AMPCallParameter, AMPCallSession, AMPServiceParameter, AMPServiceSession, AMPSession, AMPUserInfo, AMPVideoControl, NCXFacePlay, NCXFreeCallRingtone, NCXLineCallAd, NCXLineCallDialing, NCXVideoTap, NCXVoIPReceipt, NCXVoIPStatInfo, NSDate, NSDictionary, NSError, NSOperationQueue, NSString, NSUUID, UILocalNotification;
@protocol NCXVoIPParticipant, NCXVoIPSessionDelegate, OS_dispatch_semaphore;

@interface NCXVoIPSession : NSObject <AMPCallSessionDelegate, AMPServiceSessionDelegate>
{
    NSUUID *mUUID;
    id <NCXVoIPSessionDelegate> mDelegate;
    id mPushMessageTimestamp;
    NCXFreeCallRingtone *mRingtone;
    _Bool mUsesCallKit;
    _Bool mUsesLocalNotification;
    UILocalNotification *mLocalNotification;
    long long mCallDirection;
    long long mCallType;
    long long mState;
    NSObject<OS_dispatch_semaphore> *mSemaphore;
    NSOperationQueue *mOperationQueue;
    AMPUserInfo *mUserInfo;
    AMPCallParameter *mCallParameter;
    AMPServiceParameter *mServiceParameter;
    AMPAudioControl *mAudioControl;
    AMPVideoControl *mVideoControl;
    id <NCXVoIPParticipant> mParticipant;
    NSString *mTargetURI;
    NCXLineCallDialing *mDialing;
    NCXLineCallAd *mPaidCallAd;
    NCXVoIPReceipt *mReceipt;
    NCXVoIPStatInfo *mStatInfo;
    AMPSession *mSession;
    AMPCallSession *mCallSession;
    AMPServiceSession *mServiceSession;
    _Bool mFacePlayAvailable;
    _Bool mSessionStarted;
    NSDate *mConnectedDate;
    NSError *mError;
    int mTermCode;
    _Bool mTermCodeValid;
    _Bool mE2EEncryptionActive;
    _Bool mAutomaticallyAcceptsIncomingCall;
    _Bool mRetryIfSessionRemain;
    NCXVideoTap *mVideoTap;
    _Bool mMicMuted;
    long long mMicMuteOverrideCount;
    unsigned long long mBackgroundTaskID;
    _Bool mAppActive;
    _Bool mVideoVisible;
    NCXFacePlay *mFacePlay;
}

@property(nonatomic) _Bool retryIfSessionRemain; // @synthesize retryIfSessionRemain=mRetryIfSessionRemain;
@property(nonatomic) _Bool automaticallyAcceptsIncomingCall; // @synthesize automaticallyAcceptsIncomingCall=mAutomaticallyAcceptsIncomingCall;
@property(readonly, nonatomic, getter=isE2EEncryptionActive) _Bool E2EEncryptionActive; // @synthesize E2EEncryptionActive=mE2EEncryptionActive;
@property(readonly, nonatomic, getter=isFacePlayAvailable) _Bool facePlayAvailable; // @synthesize facePlayAvailable=mFacePlayAvailable;
@property(readonly, nonatomic) NCXVoIPStatInfo *statInfo; // @synthesize statInfo=mStatInfo;
@property(readonly, nonatomic) NCXVoIPReceipt *receipt; // @synthesize receipt=mReceipt;
@property(readonly, nonatomic) NCXFacePlay *facePlay; // @synthesize facePlay=mFacePlay;
@property(retain, nonatomic) NCXLineCallAd *paidCallAd; // @synthesize paidCallAd=mPaidCallAd;
@property(copy, nonatomic) NCXLineCallDialing *dialing; // @synthesize dialing=mDialing;
@property(copy, nonatomic) NSString *targetURI; // @synthesize targetURI=mTargetURI;
@property(retain, nonatomic) NSError *error; // @synthesize error=mError;
@property(copy, nonatomic) id <NCXVoIPParticipant> participant; // @synthesize participant=mParticipant;
@property(retain, nonatomic) AMPVideoControl *videoControl; // @synthesize videoControl=mVideoControl;
@property(retain, nonatomic) AMPAudioControl *audioControl; // @synthesize audioControl=mAudioControl;
@property(retain, nonatomic) AMPServiceParameter *serviceParameter; // @synthesize serviceParameter=mServiceParameter;
@property(retain, nonatomic) AMPCallParameter *callParameter; // @synthesize callParameter=mCallParameter;
@property(readonly, nonatomic) AMPServiceSession *serviceSession; // @synthesize serviceSession=mServiceSession;
@property(readonly, nonatomic) AMPCallSession *callSession; // @synthesize callSession=mCallSession;
@property(readonly, nonatomic) AMPSession *session; // @synthesize session=mSession;
@property(retain, nonatomic) AMPUserInfo *userInfo; // @synthesize userInfo=mUserInfo;
@property(readonly, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=mOperationQueue;
@property(readonly, nonatomic) long long state; // @synthesize state=mState;
@property(readonly, nonatomic) long long callType; // @synthesize callType=mCallType;
@property(readonly, nonatomic) long long callDirection; // @synthesize callDirection=mCallDirection;
@property(retain, nonatomic) UILocalNotification *localNotification; // @synthesize localNotification=mLocalNotification;
@property(nonatomic) _Bool usesLocalNotification; // @synthesize usesLocalNotification=mUsesLocalNotification;
@property(nonatomic) _Bool usesCallKit; // @synthesize usesCallKit=mUsesCallKit;
@property(retain, nonatomic) NCXFreeCallRingtone *ringtone; // @synthesize ringtone=mRingtone;
@property(copy, nonatomic) id pushMessageTimestamp; // @synthesize pushMessageTimestamp=mPushMessageTimestamp;
@property(nonatomic) __weak id <NCXVoIPSessionDelegate> delegate; // @synthesize delegate=mDelegate;
@property(readonly, nonatomic) NSUUID *UUID; // @synthesize UUID=mUUID;
- (void).cxx_destruct;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)didChangeAudioRoute:(id)arg1;
- (void)audioControlDidFail:(id)arg1;
- (void)session:(id)arg1 didChangeRemoteVideoInterruptState:(_Bool)arg2 fromParticipant:(id)arg3;
- (void)session:(id)arg1 didChangeRemoteVideoPauseState:(_Bool)arg2 fromParticipant:(id)arg3;
- (void)session:(id)arg1 didReceiveFirstRemoteVideoFrameFromParticipant:(id)arg2;
- (void)session:(id)arg1 didFailToConnectRemoteVideoForParticipant:(id)arg2 reason:(int)arg3;
- (void)session:(id)arg1 didBatchUpdateParticipants:(id)arg2;
- (void)session:(id)arg1 didUpdateParticipant:(id)arg2;
- (void)session:(id)arg1 didDeleteParticipant:(id)arg2;
- (void)session:(id)arg1 didInsertParticipant:(id)arg2;
- (void)session:(id)arg1 didChangeRemoteVideoInterruptState:(_Bool)arg2;
- (void)session:(id)arg1 didChangeRemoteVideoPauseState:(_Bool)arg2;
- (void)sessionDidReceiveFirstRemoteVideoFrame:(id)arg1;
- (void)sessionDidFinishExchangeAppStringData:(id)arg1;
- (void)sessionDidChangeRegistrar:(id)arg1;
- (void)sessionDidDetectServerConnectionUnstable:(id)arg1;
- (void)session:(id)arg1 didChangeServiceState:(id)arg2;
- (void)session:(id)arg1 didChangeCallState:(id)arg2;
- (_Bool)session:(id)arg1 shouldPlayToneWithToneType:(id)arg2;
- (void)session:(id)arg1 errorDidOccur:(id)arg2;
- (void)session:(id)arg1 didReceiveStringData:(id)arg2;
- (void)session:(id)arg1 didChangeMediaState:(id)arg2;
- (void)sendStringData:(id)arg1 toParticipantWithID:(id)arg2;
- (void)disconnectVideoForParticipantWithID:(id)arg1;
- (void)connectVideoForParticipantWithID:(id)arg1 viewSize:(struct CGSize)arg2;
- (void)connectVideoForParticipantWithID:(id)arg1 layer:(int)arg2;
- (id)participantWithID:(id)arg1;
- (_Bool)prepareFacePlay:(id *)arg1;
- (_Bool)setupFacePlayAndNotify:(_Bool)arg1 error:(id *)arg2;
- (id)toggleCameraDevice;
@property(readonly, nonatomic) NSDictionary *participantVideoLayerInfo;
@property(readonly, nonatomic) int videoMaxWindow;
@property(readonly, nonatomic) NSString *videoStatistics;
@property(readonly, nonatomic) int videoQuality;
@property(readonly, nonatomic) NCXVideoTap *videoTap;
@property(readonly, nonatomic, getter=isRemoteCameraInterrupted) _Bool remoteCameraInterrupted;
@property(readonly, nonatomic, getter=isRemoteCameraPaused) _Bool remoteCameraPaused;
@property(readonly, nonatomic, getter=isCaptureCameraInterrupted) _Bool captureCameraInterrupted;
@property(nonatomic, getter=isCaptureCameraPaused) _Bool captureCameraPaused;
@property(nonatomic, getter=isVideoVisible) _Bool videoVisible;
- (_Bool)stopVideo:(id *)arg1;
- (void)startVideoWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSString *voiceStatistics;
@property(readonly, nonatomic) int voiceQuality;
- (void)removeOverrideMicrophoneMute;
- (void)addOverrideMicrophoneMute;
- (void)overrideMicrophoneMute:(id)arg1;
- (void)sendDTMF:(id)arg1;
@property(nonatomic, getter=isSpeakerMode) _Bool speakerMode;
@property(nonatomic, getter=isMicrophoneMuted) _Bool microphoneMuted;
- (_Bool)stopOnHold:(id *)arg1;
- (_Bool)startOnHold:(id *)arg1;
@property(readonly, nonatomic, getter=isOnHold) _Bool onHold;
- (void)disconnectWithReason:(int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)disconnectWithCompletion:(CDUnknownBlockType)arg1;
- (void)logUIDisconnectWithType:(int)arg1;
- (void)acceptCallWithVideo:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) int quality;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic, getter=isVideoMediaConnected) _Bool videoMediaConnected;
@property(readonly, nonatomic) _Bool hasVideoMedia;
@property(readonly, nonatomic) _Bool supportsHolding;
@property(readonly, nonatomic) _Bool supportsDTMF;
@property(readonly, nonatomic, getter=isLiveReceiver) _Bool liveReceiver;
- (_Bool)respondCallWithUserInfo:(id)arg1 participant:(id)arg2 parameter:(id)arg3 error:(id *)arg4;
- (_Bool)makeOACallWithAccount:(id)arg1 participant:(id)arg2 error:(id *)arg3;
- (_Bool)makeConferenceWithAccount:(id)arg1 participant:(id)arg2 type:(long long)arg3 error:(id *)arg4;
- (_Bool)makeLinePaidCallWithAccount:(id)arg1 participant:(id)arg2 error:(id *)arg3;
- (_Bool)makeLineFreeCallWithAccount:(id)arg1 participant:(id)arg2 isVideo:(_Bool)arg3 isFacePlay:(_Bool)arg4 error:(id *)arg5;
- (_Bool)makeGilroundCallWithAccount:(id)arg1 participant:(id)arg2 mode:(long long)arg3 isVideo:(_Bool)arg4 isFake:(_Bool)arg5 error:(id *)arg6;
- (void)notifyState;
- (void)waitForStandby;
- (void)goAhead;
- (void)suspend;
- (void)resume;
- (void)executeOperations:(id)arg1;
- (id)operationForStandby;
- (id)operationForPaidCallAdPlayback;
- (id)operationForMarkPaidCallAd;
- (id)operationForConferenceConnectService;
- (id)operationForRespondCall;
- (id)operationForMakeCall;
- (id)operationForReportOutgoingCall;
- (id)operationForReportIncomingCall;
- (id)operationForConferenceJoinRoom;
- (id)operationForLineAcquireOACallRoute;
- (id)operationForLineAcquirePaidCallRoute;
- (id)operationForLineAcquireTestCallRoute;
- (id)operationForLineAcquireFreeCallRoute;
- (id)operationForGilroundGetCallTokenWithType:(id)arg1;
- (id)operationForActivate;
- (id)operationForRequestVideoCapturePermission;
- (id)operationForRequestAudioCapturePermission;
- (id)operationForSearchParticipantContact;
- (void)delegateDidCreateFacePlayWithError:(id)arg1;
- (void)delegateDidMarkPaidCallAd;
- (void)operation:(id)arg1 errorDidOccur:(id)arg2;
- (void)sessionStarted;
- (void)changeState:(long long)arg1;
- (void)delegateBPInfoDidUpdate;
- (void)delegateTransportInfoDidUpdate;
- (void)delegateDidFinishExchangeAppStringData;
- (void)delegateDidChangeRegistrar;
- (void)delegateServerConnectionUnstable;
- (void)delegateAudioOutputRouteChange;
- (void)delegateDidReceiveStringData:(id)arg1;
- (void)delegateDidChangeRemoteVideoStateFromParticipant:(id)arg1;
- (void)delegateDidReceiveFirstRemoteVideoFrameFromParticipant:(id)arg1;
- (void)didFailToConnectRemoteVideoForParticipant:(id)arg1 reason:(int)arg2;
- (void)delegateDidBatchUpdateParticipants:(id)arg1;
- (void)delegateDidChangeParticipantStateWithParticipantID:(id)arg1 state:(int)arg2;
- (void)delegateDidChangeRemoteVideoState;
- (void)delegateDidReceiveFirstRemoteVideoFrame;
- (void)delegateDidStopVideoWithTermCode:(int)arg1;
- (void)delegateWillStopVideoWithTermCode:(int)arg1;
- (void)delegateDidStartVideo;
- (void)delegateWillStartVideo;
- (void)delegateDisconnect;
- (void)delegateConnect;
- (void)delegateError:(id)arg1;
- (void)delegateReleased;
- (void)delegateStateChange:(long long)arg1;
- (void)setupUserInfoWithServiceInfo:(id)arg1;
- (void)setupUserInfoWithRouteInfo:(id)arg1;
- (id)exchangableAppStringData;
- (void)detachAndEndBackgroundTaskAfterDelay:(double)arg1;
- (void)endBackgroundTask;
- (void)beginBackgroundTask;
- (void)stopEffect;
- (void)setSession:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

