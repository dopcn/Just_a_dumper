//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "NBBookBaseTable.h"

@interface NBBookItemTable : NBBookBaseTable
{
}

+ (id)tableHierarchy;
+ (id)valueArgumentForBookItem:(id)arg1;
+ (id)getBookItemFromResultSet:(id)arg1;
+ (id)getBookItemsInDatabaseQueue:(id)arg1 withSQL:(id)arg2;
+ (id)tableColumns;
+ (id)getSQEpubBookItemWithFilePath:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getEpubBookItemWithFilePath:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getTxtBookItemWithFilePath:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getFSBookItemWithNovelId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isFSBookItemExistWithNovelId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getBookmarkBookItemWithCatalogUrl:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isFSBookmarkExistWithCatalogUrl:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getFSBookItemWithCatalogUrl:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isFSBookItemExistWithCatalogUrl:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isFSBookItemExistWithBookName:(id)arg1 andAuthor:(id)arg2 inDatabaseQueue:(id)arg3;
+ (id)getFSBookItemsWithBookName:(id)arg1 andAuthor:(id)arg2 inDatabaseQueue:(id)arg3;
+ (id)getAllBookItemForBookName:(id)arg1 andAuthor:(id)arg2 inDatabaseQueue:(id)arg3;
+ (id)getBookItemWithBookItemId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getSMBookItemForBookName:(id)arg1 andAuthor:(id)arg2 inDatabaseQueue:(id)arg3;
+ (id)getSMBookItemForBid:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getBookItemForBookId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isBookItemExistForBookId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isBookItemExistForBookItemId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isSMBookItemExistWithCatalogUrl:(id)arg1 inDatabaseQueue:(id)arg2;
+ (_Bool)isSMBookItemExistWithBookName:(id)arg1 andAuthor:(id)arg2 inDatabaseQueue:(id)arg3;
+ (unsigned long long)numberOfBookItemsOfChapterReaded:(unsigned long long)arg1 inDatabaseQueue:(id)arg2;
+ (unsigned long long)numberOfNonPresetBookItemsWithType:(long long)arg1 inDatabaseQueue:(id)arg2;
+ (unsigned long long)numberOfNonPresetBookItemsInDatabaseQueue:(id)arg1;
+ (unsigned long long)numberOfBookItemsInDatabaseQueue:(id)arg1;
+ (id)getAllBookIDsInDatabaseQueue:(id)arg1;
+ (id)getAllBookIDsWithType:(long long)arg1 inDatabaseQueue:(id)arg2;
+ (id)getSMBookItemsJsonRepresentationInDatabaseQueue:(id)arg1;
+ (id)getBookItemsNotInShelfInDatabaseQueue:(id)arg1;
+ (id)getBookItemsForShelfInDatabaseQueue:(id)arg1;
+ (id)getAllBookItemsWithType:(long long)arg1 inDatabaseQueue:(id)arg2;
+ (id)getBookItemsWithBookBids:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getBookItemsWithPropertyDictionary:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getFirstBookItemWithPropertyDictionary:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getBookItemsWithPropertyDictionary:(id)arg1 ascending:(_Bool)arg2 inDatabaseQueue:(id)arg3;
+ (long long)numberOfBookItemWithPropertyDictionary:(id)arg1 inDatabaseQueue:(id)arg2;
+ (void)deleteAllShelfItemsInDatabaseQueue:(id)arg1;
+ (void)deleteShelfItems:(id)arg1 inDatabaseQueue:(id)arg2;
+ (void)deleteShelfItem:(id)arg1 inDatabaseQueue:(id)arg2;
+ (void)deleteShelfItemsWithShlfItemIds:(id)arg1 inDatabaseQueue:(id)arg2;
+ (void)addShelfItems:(id)arg1 toDatabaseQueue:(id)arg2;
+ (void)replaceShelfItems:(id)arg1 inDatabaseQueue:(id)arg2;
+ (void)replaceShelfItems:(id)arg1 inDatabase:(id)arg2;
+ (void)saveProperties:(id)arg1 forShelfItems:(id)arg2 inDatabaseQueue:(id)arg3;
+ (void)saveProperties:(id)arg1 forShelfItem:(id)arg2 inDatabaseQueue:(id)arg3;
+ (id)getShelfItemWithItemId:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getShelfItemsWithShelfItemIds:(id)arg1 inDatabaseQueue:(id)arg2;
+ (id)getShelfItemsInShelfInDatabaseQueue:(id)arg1;
+ (id)getShelfItemsInDatabaseQueue:(id)arg1;
+ (void)updateTableTo115ForDatabase:(id)arg1;
+ (void)updateTableTo114ForDatabase:(id)arg1;
+ (void)updateTableTo113ForDatabase:(id)arg1;
+ (void)updateTableTo112ForDatabase:(id)arg1;
+ (void)updateTableTo111ForDatabase:(id)arg1;
+ (void)updateTableTo110ForDatabase:(id)arg1;
+ (void)updateTableTo109ForDatabase:(id)arg1;
+ (void)updateTableTo107ForDatabase:(id)arg1;
+ (void)updateTableTo104ForDatabase:(id)arg1;
+ (void)updateTableToVersion3ForDatabase:(id)arg1;
+ (void)updateTableAddColumnForDatabase:(id)arg1;
+ (void)updateTableFor980BetaTestForDatabase:(id)arg1;
+ (void)perform102MigrationInDatabaseQueue:(id)arg1;
+ (void)perform101MigrationInDatabaseQueue:(id)arg1;
+ (void)createTableInDatabaseIfNotExist:(id)arg1;
+ (id)tableName;

@end

