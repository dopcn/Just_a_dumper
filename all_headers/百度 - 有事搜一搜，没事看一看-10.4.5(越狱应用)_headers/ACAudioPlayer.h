//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSArray, NSString, NSURL;
@protocol ACAudioPlayerDelegate;

@interface ACAudioPlayer : NSObject
{
    void *_impl;
    id <ACAudioPlayerDelegate> _delegate;
    NSURL *_url;
}

+ (_Bool)setAdPolicy:(id)arg1;
+ (_Bool)destroyAdvertisement;
+ (_Bool)initAdvertisement;
+ (_Bool)setCustomHttpHeader:(id)arg1 AndValue:(id)arg2 WithSeperator:(id)arg3;
+ (_Bool)setPartner:(id)arg1;
+ (_Bool)setUserAgent:(id)arg1;
+ (_Bool)setUpload:(_Bool)arg1;
+ (_Bool)setProductID:(int)arg1 andDeviceID:(int)arg2;
+ (_Bool)setProxyHost:(id)arg1 andPort:(int)arg2 andUser:(id)arg3 andPasswd:(id)arg4;
+ (_Bool)setCacheFolder:(id)arg1 andSize:(int)arg2;
+ (int)getCurrentCacheFolderSize;
+ (int)clearP2PCache;
+ (void)stopMonitoring;
+ (_Bool)startMonitoring;
+ (_Bool)initP2pEnvironmentWithProductID:(unsigned int)arg1 andCacheFolder:(id)arg2 andCachSize:(unsigned int)arg3 andIsUseUpload:(_Bool)arg4;
+ (void)SetEnvironmentInfo:(unsigned int)arg1;
+ (void)detectNetType;
+ (int)postPreDownloadTask:(id)arg1 andRegistDelegate:(id)arg2;
+ (int)postDownloadTask:(id)arg1 andRegistDelegate:(id)arg2;
+ (_Bool)destroyP2P;
+ (int)getDownloadTotalFileSiez:(int)arg1;
+ (id)getDownloadUrlString:(int)arg1;
+ (id)getDownloadFilePathString:(int)arg1;
+ (int)postTaskType:(int)arg1 withUrl:(id)arg2 andRegistDelegate:(id)arg3;
+ (_Bool)deleteDownloadTask:(int)arg1;
+ (struct CP2pTaskCallbackImpl *)getTaskCallbackImpl;
+ (void)enableGlobalLog:(_Bool)arg1;
+ (void)enableP2PLog:(_Bool)arg1;
+ (void)enableAudioPlayerLog:(_Bool)arg1;
+ (void)useSpecialNet:(_Bool)arg1;
+ (_Bool)IsEnableNetwork;
+ (_Bool)IsEnable3G;
+ (_Bool)IsEnableWIFI;
@property(readonly) NSURL *url; // @synthesize url=_url;
@property id <ACAudioPlayerDelegate> delegate; // @synthesize delegate=_delegate;
- (_Bool)isCurrentFileCached;
- (id)getCurrentFilePath;
- (void)AdCallBack:(int)arg1 withAdID:(int)arg2 atPosition:(int)arg3;
- (void)bypassCurrentAd;
@property(readonly) double positionAd;
- (int)getAdvertiseMentDuration:(int)arg1;
- (_Bool)setADDataSource:(id)arg1;
- (id)initWithContentsOfAdPacket:(id)arg1 error:(id *)arg2;
- (_Bool)playAdOnceImmediately;
- (void)setReferenceDuration:(double)arg1;
- (void)PlayerCallBack:(int)arg1 Data:(void *)arg2;
- (void)doNotifyInfoToDeleget:(id)arg1 withInfoType:(int)arg2 withAudioPlayer:(id)arg3;
- (void)parseTagCallbackWithKey:(char *)arg1 andValues:(char *)arg2;
@property(readonly, nonatomic) NSArray *nEQLevels;
@property(readonly) int nFrequencyDataMaxLevel;
@property(readonly) int nFrequencyDataMinLevel;
@property(readonly) double nEQReplayGainMaxLevel;
@property(readonly) double nEQReplayGainMinLevel;
- (id)getFrequencyDataWithDataCount:(int)arg1;
- (_Bool)SwitchToSmallRenderBuffer:(_Bool)arg1;
- (_Bool)bypassResumeAllEffect:(_Bool)arg1;
@property(nonatomic) double nEQReplayGain;
- (_Bool)enableEffectWithType:(int)arg1 andState:(_Bool)arg2;
@property(readonly) int nEQMinLevel;
@property(readonly) int nEQMaxLevel;
@property(readonly) int nEQNumberOfBands;
- (id)getVersion;
@property(readonly) int nReverbNumberOfPresets;
- (int)getReverbNumberOfPresets;
@property(nonatomic) int nReverbCurrentPreset;
- (int)getReverbCurrentPreset;
- (void)useReverbPreset:(int)arg1;
@property(readonly) int nEQNumberOfPresets;
- (int)getEQNumberOfPresets;
@property(nonatomic) int nEQCurrentPrset;
- (int)getEQCurrentPreset;
- (void)useEQPreset:(int)arg1;
- (int)getEQ:(int)arg1;
- (void)setEQ:(int)arg1 andLevel:(int)arg2;
- (int)getEQMaxLevel;
- (int)getEQMinLevel;
- (int)getEQNumberOfBands;
@property(nonatomic) float bass;
- (void)getBassLevelRangeFromMinLevel:(short *)arg1 andMaxLevel:(short *)arg2;
- (int)mapToFactValue:(float)arg1 withMinValue:(short)arg2 andMaxValue:(short)arg3;
- (float)mapToZeroAndOne:(short)arg1 withMinValue:(short)arg2 andMaxValue:(short)arg3;
@property(nonatomic) float surround;
- (void)getSurroundRangeLevelFromMinLevel:(short *)arg1 andMaxLevel:(short *)arg2;
@property(nonatomic) int nEQPreamp;
@property double currentTime;
@property float volume;
@property float pan;
- (void)getPanRangeLevelFromMin:(short *)arg1 AndMaxLevel:(short *)arg2;
@property(readonly) double duration;
@property(readonly) unsigned long long numberOfChannels;
- (_Bool)setPlayerDecoderBufferType:(int)arg1;
- (_Bool)setFadeIn:(double)arg1 AndFadeOut:(double)arg2;
- (_Bool)setFileSegmentRangeFromStart:(double)arg1 ToEndTime:(double)arg2;
- (_Bool)setFileSegmentDuration:(double)arg1;
- (_Bool)setFileSegmentOutputPath:(id)arg1;
@property(readonly, getter=isPlaying) _Bool playing;
- (void)stop;
- (void)pause;
- (_Bool)play;
- (_Bool)prepareToSave;
- (_Bool)prepareToPlay;
- (_Bool)getEQLevelsByBand:(int)arg1 andEQLevels:(int *)arg2;
- (void)dealloc;
- (id)getEQLevels;
- (int)getEQLevels:(short *)arg1;
- (void)destroy;
@property(readonly) int downloadProgressPoint;
@property(readonly, nonatomic) int nBitrate;
@property(readonly, nonatomic) NSString *currentFileFormat;
- (id)initWithContentsOfFileURL:(id)arg1 error:(id *)arg2;
- (id)initWithContentsOfURL:(id)arg1 error:(id *)arg2;
- (void)initSystemParams;
- (id)initForTagsParse;
- (id)getSongProperty:(id)arg1;

@end

