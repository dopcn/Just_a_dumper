//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <CFNetwork/NSURLProtocol.h>

#import "NSURLSessionDataDelegate-Protocol.h"

@class NSArray, NSDictionary, NSString, NSThread, NSURLAuthenticationChallenge, NSURLSessionDataTask;

@interface WSPXHTTPProtocol : NSURLProtocol <NSURLSessionDataDelegate>
{
    _Bool _httpsLogRecord;
    _Bool _httpsOptimize;
    _Bool _autoRedirect;
    _Bool _requestCompleted;
    NSThread *_clientThread;
    NSURLSessionDataTask *_task;
    NSString *_logIdentity;
    NSURLAuthenticationChallenge *_pendingChallenge;
    NSDictionary *_connectionProxy;
    NSArray *_modes;
    CDUnknownBlockType _pendingChallengeCompletionHandler;
}

+ (id)canonicalRequestForRequest:(id)arg1;
+ (_Bool)canInitWithRequest:(id)arg1;
+ (_Bool)shouldAcceptPostRequestWithDataLength:(long long)arg1;
+ (void)declineRequest:(id)arg1 logWithFormat:(id)arg2;
+ (void)wspxHTTPProtocol:(id)arg1 logWithFormat:(id)arg2;
+ (id)sharednoProtocolDemux;
+ (id)sharedDemux;
+ (id)blacklistRegex;
+ (void)setBlacklistRegex:(id)arg1;
+ (id)connectionProxy;
+ (void)setConnectionProxy:(id)arg1;
+ (void)setDelegate:(id)arg1;
+ (id)delegate;
+ (void)stop;
+ (void)start;
@property(copy) CDUnknownBlockType pendingChallengeCompletionHandler; // @synthesize pendingChallengeCompletionHandler=_pendingChallengeCompletionHandler;
@property(copy) NSArray *modes; // @synthesize modes=_modes;
@property(copy) NSDictionary *connectionProxy; // @synthesize connectionProxy=_connectionProxy;
@property(retain) NSURLAuthenticationChallenge *pendingChallenge; // @synthesize pendingChallenge=_pendingChallenge;
@property(retain) NSString *logIdentity; // @synthesize logIdentity=_logIdentity;
@property(retain) NSURLSessionDataTask *task; // @synthesize task=_task;
@property(retain) NSThread *clientThread; // @synthesize clientThread=_clientThread;
@property _Bool requestCompleted; // @synthesize requestCompleted=_requestCompleted;
@property _Bool autoRedirect; // @synthesize autoRedirect=_autoRedirect;
@property _Bool httpsOptimize; // @synthesize httpsOptimize=_httpsOptimize;
@property _Bool httpsLogRecord; // @synthesize httpsLogRecord=_httpsLogRecord;
- (void).cxx_destruct;
- (id)getAuthURLStringFromURL:(id)arg1;
- (id)rebuildResponse:(id)arg1 withNewURL:(id)arg2;
- (void)clearWSPXHeaderOfRequest:(id)arg1;
- (_Bool)needHttpsOptimizeOfHost:(id)arg1;
- (_Bool)needBackSourceOfHost:(id)arg1;
- (void)cancelTheTask;
- (_Bool)doesString:(id)arg1 matchRegexPattern:(id)arg2;
- (void)startRequest:(id)arg1 backSourceReason:(int)arg2;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)resolveAuthenticationChallenge:(id)arg1 withCredential:(id)arg2;
- (void)cancelPendingChallenge;
- (void)clientThreadCancelAuthenticationChallenge:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)mainThreadDidReceiveAuthenticationChallenge:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)didReceiveAuthenticationChallenge:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)onThreadPerformBlock:(CDUnknownBlockType)arg1;
- (void)performOnThread:(id)arg1 modes:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)stopLoading;
- (void)startLoading;
- (void)dealloc;
- (id)initWithRequest:(id)arg1 cachedResponse:(id)arg2 client:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

