//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "CloudProtocolsManagerDelegate-Protocol.h"
#import "ProtocolHostDelegate-Protocol.h"

@class InputFolderName, NSString;

@interface CloudFolderEdit : NSObject <ProtocolHostDelegate, CloudProtocolsManagerDelegate>
{
    InputFolderName *_inputFolderName;
    _Bool _isPiLiangDelSongs;
    _Bool _didShowAutodownloadTip;
    unsigned long long _uin;
    long long _lastAddToLoveType;
    NSString *_lastAddToLoveName;
    unsigned long long _lastAddToItemId;
}

+ (_Bool)isSongListOrderNeedSync:(id)arg1;
+ (id)applyOrder:(id)arg1 originalValues:(id)arg2 keyGenerateBlock:(CDUnknownBlockType)arg3 compareOrderBlock:(CDUnknownBlockType)arg4;
@property(nonatomic) _Bool didShowAutodownloadTip; // @synthesize didShowAutodownloadTip=_didShowAutodownloadTip;
@property unsigned long long lastAddToItemId; // @synthesize lastAddToItemId=_lastAddToItemId;
@property(retain) NSString *lastAddToLoveName; // @synthesize lastAddToLoveName=_lastAddToLoveName;
@property long long lastAddToLoveType; // @synthesize lastAddToLoveType=_lastAddToLoveType;
@property(nonatomic) unsigned long long uin; // @synthesize uin=_uin;
@property(nonatomic) _Bool isPiLiangDelSongs; // @synthesize isPiLiangDelSongs=_isPiLiangDelSongs;
@property(retain) InputFolderName *inputFolderName; // @synthesize inputFolderName=_inputFolderName;
- (void).cxx_destruct;
- (void)applySongListOrder:(id)arg1 toFolder:(id)arg2 fromServer:(_Bool)arg3;
- (long long)lastAddToLoveType:(id *)arg1 itemId:(unsigned long long *)arg2;
- (void)setLastAddToLoveType:(long long)arg1 name:(id)arg2 itemId:(unsigned long long)arg3;
- (id)lastAddToLoveMessage:(double)arg1 font:(id)arg2;
- (void)syncUp;
- (void)hostCallBackWithWorkProtocol:(id)arg1 protocolError:(id)arg2;
- (_Bool)setIcoImage:(id)arg1 toFolderInfo:(id)arg2 err:(id *)arg3;
- (_Bool)setIcoPath:(id)arg1 toFolderInfo:(id)arg2;
- (void)removePendingUploadFolderIcoPath:(id)arg1;
- (id)folderOriginalURL:(id)arg1;
- (void)_notifyCollectEditUIById:(int)arg1 collectInfo:(id)arg2;
- (void)_addStatOfCollect:(id)arg1;
- (void)showCommentInviteAlert:(id)arg1;
- (void)autoOpenLoveSwitchAndDownloadExist;
- (_Bool)tryUpdateAllFolderSongsAfterUpgrade;
- (void)tryFirstTimeUpdate;
- (void)saveFolderSongs:(id)arg1 ByFolder:(id)arg2;
- (void)createJoinKey:(id)arg1 toDic:(id)arg2 toSet:(id)arg3;
- (unsigned long long)getNextFavoriteFolderCreateTime;
- (int)getNextLocalFolderId;
- (void)forceRefresh;
- (void)onSyncFolderAddFinish:(id)arg1 serverFolder:(id)arg2;
- (_Bool)orderHasSynToServer;
- (void)onSyncFolderOrder:(id)arg1 albumOrder:(id)arg2;
- (int)applyServerOrder:(id)arg1 localFolders:(id)arg2 useDefaultOrder:(_Bool)arg3 keyGenerate:(CDUnknownBlockType)arg4 compareOrderBlock:(CDUnknownBlockType)arg5;
- (void)syncFolderOrderFinish:(id)arg1 isOrderFolder:(_Bool)arg2 isOrderAlbum:(_Bool)arg3;
- (id)extraFolderArray:(id)arg1;
- (_Bool)onlyHasMyFolder:(id)arg1;
- (void)onSyncFolderOrderFinish;
- (void)onSyncFolderDeleteFinish:(int)arg1;
- (void)onSyncFolderRenameFinish:(id)arg1;
- (void)saveRenamedFolderName:(id)arg1;
- (void)saveSongOrderToDB:(id)arg1 ofFolder:(id)arg2;
- (void)saveSongOrderToMemory:(id)arg1 needSync:(_Bool)arg2;
- (void)saveFolderOrderToDB;
- (void)onSyncFolderSongsFailed:(id)arg1 folderSongs:(id)arg2 opType:(int)arg3;
- (void)onSyncFolderSongsFinish:(id)arg1 folderSongs:(id)arg2 opType:(int)arg3;
- (void)onActionWillStart:(id)arg1;
- (void)onActionWillDone:(id)arg1;
- (void)onSessionAllDone:(id)arg1;
- (void)onSessionItemDone:(id)arg1;
- (void)insertUserFolderToFront:(id)arg1;
- (void)_autoDownloadByCompareResult:(id)arg1 newFolderSongs:(id)arg2;
- (void)_autoDownloadSongs:(id)arg1 stat:(id)arg2;
- (void)saveTaoSongWithFolder:(id)arg1 Result:(id)arg2;
- (void)handleAsynToCloud:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (void)handleResponseUpdateTaoSong:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (void)handleResponseUpdateMV:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (void)handleResponseUpdateRadio:(id)arg1 action:(id)arg2 cgi:(id)arg3 protocolError:(id)arg4;
- (void)handleResponseSyncRadio:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (id)findSameFolder:(id)arg1 fromArray:(id)arg2;
- (void)saveSubFolderResult:(id)arg1 fromNowArray:(id)arg2 needUpdate:(id)arg3;
- (void)handleResponseUpdateTao:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (void)handleResponseUpdateFolder:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (void)handleResponseUpdateFolderSong:(id)arg1 action:(id)arg2 protocol:(id)arg3 protocolError:(id)arg4;
- (_Bool)saveFolderResult:(id)arg1 calledByPersistentConnection:(_Bool)arg2 userInfo:(id)arg3;
- (unsigned long long)_getFirstNotSystemFolder:(id)arg1;
- (void)updateAllFolder:(id)arg1;
- (void)delayFakeUpdateFolder;
- (void)onPersistConnectionCommandReceived:(id)arg1;
- (int)_convertPersistIdToFolderOp:(int)arg1;
- (void)applyRadioFolderEditResultByDeletedFolderInfos:(id)arg1;
- (void)applyTaoFolderEditResultByDeletedFolderInfos:(id)arg1;
- (void)applyRadioFolderEditResultByDeletedFolderInfos:(id)arg1 resultFolders:(id)arg2 orderChanged:(_Bool)arg3;
- (void)applyTaoFolderEditResultByDeletedFolderInfos:(id)arg1 resultFolders:(id)arg2 orderChanged:(_Bool)arg3;
- (void)applyAndSyncRadioFolderEditResultByDeletedFolderInfos:(id)arg1 resultFolders:(id)arg2 orderChanged:(_Bool)arg3;
- (void)applyFolderEditResultByDeletedFolderInfos:(id)arg1 resultFolders:(id)arg2 orderChanged:(_Bool)arg3;
- (id)_applyOrderToArray:(id)arg1 byOrderArray:(id)arg2;
- (id)getRenamedFolderArrayFromBaseArray:(id)arg1;
- (_Bool)isSame:(id)arg1 arrayBase:(id)arg2;
- (_Bool)isOrderChanged:(id)arg1 arrayBase:(id)arg2;
- (void)setAutoSave:(id)arg1 on:(_Bool)arg2 notifyServer:(_Bool)arg3;
- (void)updateBuyAlbumBySongListItem:(id)arg1;
- (void)removeSongListFromFavByBySongListItem:(id)arg1;
- (void)removeRadioFromFavBySongListItem:(id)arg1;
- (void)removeAlbumFromFavBySongListItem:(id)arg1;
- (_Bool)renameFolder:(id)arg1 toName:(id)arg2 desc:(id)arg3 tagIds:(id)arg4 tagNames:(id)arg5 error:(id *)arg6;
- (_Bool)renameFolder:(id)arg1 toName:(id)arg2 error:(id *)arg3;
- (id)createFolderInfoByFolderName:(id)arg1 folderID:(int)arg2 Tid:(long long)arg3 folderType:(int)arg4 withLimit:(_Bool)arg5;
- (id)getFiltedSongs:(id)arg1 notInFolderSongs:(id)arg2;
- (void)addSongs:(id)arg1 toFolder:(id)arg2;
- (void)addSongs:(id)arg1;
- (void)onBackgoundAddSongsToCollectFinish:(id)arg1;
- (_Bool)backgoundAddSongsToCollect:(id)arg1;
- (id)distinctSongInfo:(id)arg1;
- (_Bool)addSongsToCollect:(id)arg1;
- (void)raiseAddToCollectException:(int)arg1 folderId:(int)arg2;
- (void)deleteFolder:(id)arg1;
- (void)deleteSongsFromFolder:(id)arg1 Folder:(id)arg2 fromList:(_Bool)arg3 updateLocalAll:(_Bool)arg4 syncCall:(_Bool)arg5;
- (void)deleteSongsFromFolder:(id)arg1 Folder:(id)arg2 fromList:(_Bool)arg3 updateLocalAll:(_Bool)arg4 syncCall:(_Bool)arg5 block:(CDUnknownBlockType)arg6;
- (id)getSongCountLimitTipsByFolder:(id)arg1;
- (int)getMaxSongCountByFolder:(id)arg1;
- (void)dealloc;
- (id)initWithUin:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

