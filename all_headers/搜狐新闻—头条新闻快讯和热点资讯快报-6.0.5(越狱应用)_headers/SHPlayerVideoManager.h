//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "SHPlayerDataManager-Protocol.h"
#import "SHPlayerVideosSourceDelegate-Protocol.h"
#import "VideoAlbumObserver-Protocol.h"

@class NSMutableDictionary, NSString, SHPlayerVideoItem, SHPlayerVideosSource, VideoAlbum;

@interface SHPlayerVideoManager : NSObject <SHPlayerVideosSourceDelegate, SHPlayerDataManager, VideoAlbumObserver>
{
    long long _albumID;
    int _authenticationRquestType;
    long long _vipAuthRequestID;
    long long _payAuthRequestID;
    CDUnknownBlockType _loadVideo;
    _Bool _shouldGetHistoryPlaybackTime;
    _Bool _shouldOpenVideoPlayer;
    long long _playerType;
    SHPlayerVideoItem *_currentVideoItem;
    VideoAlbum *_videoAlbum;
    NSMutableDictionary *_userInfo;
    long long _currentDefinitionType;
    SHPlayerVideosSource *_videosSource;
    double _videoInitialPlayTime;
}

@property(nonatomic) double videoInitialPlayTime; // @synthesize videoInitialPlayTime=_videoInitialPlayTime;
@property(retain, nonatomic) SHPlayerVideosSource *videosSource; // @synthesize videosSource=_videosSource;
@property(readonly, nonatomic) CDUnknownBlockType loadVideo; // @synthesize loadVideo=_loadVideo;
@property(retain, nonatomic) NSMutableDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property(retain, nonatomic) VideoAlbum *videoAlbum; // @synthesize videoAlbum=_videoAlbum;
@property(nonatomic) _Bool shouldOpenVideoPlayer; // @synthesize shouldOpenVideoPlayer=_shouldOpenVideoPlayer;
@property(nonatomic) _Bool shouldGetHistoryPlaybackTime; // @synthesize shouldGetHistoryPlaybackTime=_shouldGetHistoryPlaybackTime;
@property(retain, nonatomic) SHPlayerVideoItem *currentVideoItem; // @synthesize currentVideoItem=_currentVideoItem;
- (void).cxx_destruct;
- (void)bluRayAuthRequestSuccess:(id)arg1 key:(id)arg2;
- (void)PGCAuthRequestSuccess:(id)arg1 key:(id)arg2;
- (void)PGCAuthRequestDidSuccess:(id)arg1;
- (id)findResumePlayRecordingVideo;
- (double)playbackHistoryDurationForVideo:(id)arg1;
- (double)playbackHistoryTimeForVideo:(id)arg1;
- (void)setUserInfoValue:(id)arg1 forKey:(id)arg2;
- (void)handleActionSourceData:(id)arg1;
- (_Bool)videoAlbum:(id)arg1 shouldCancelFindIndexPathForVid:(long long)arg2;
- (_Bool)videoAlbumShouldClearVideoItems:(id)arg1;
- (_Bool)checkCarrierCooperationVideoURLAvailable;
- (void)video720PAuthFailed:(id)arg1;
- (void)videoPayAuthRequestFailed:(id)arg1;
- (void)videoPayAuthRequestSuccess:(id)arg1 key:(id)arg2;
- (void)authenticationRequestDidFinished;
- (void)videoVipAuthRequestDidFailed:(id)arg1;
- (void)videoVipAuthRequestDidSuccess:(id)arg1;
- (void)requestVIPAuthInfo;
- (_Bool)couldRequestVIPAuthInfo;
- (void)requestPGCPayAuthInfo;
- (_Bool)couldRequestPGCPayAuthInfo;
- (void)videoPayAuthRequestDidFailed:(id)arg1;
- (void)privateVideoAuthRequestDidFailed:(id)arg1;
- (void)privateVideoAuthRequestDidSuccess:(id)arg1;
- (void)requestPrivateVideoAuthInfo;
- (_Bool)isPrivateVideo;
- (void)requestPasswordVideoAuthInfo;
- (_Bool)isPasswordVideo;
- (void)requestPayAuthInfo;
- (_Bool)couldRequestPayAuthInfo;
- (void)requestVideoDetailInfo:(id)arg1;
- (_Bool)checkDeployedVideoURLAvailable:(double)arg1 authenticationType:(int)arg2;
- (_Bool)checkDeployedVideoURLAvailable:(double)arg1;
- (void)cancelCurrentRequest;
@property(nonatomic) long long playerType; // @synthesize playerType=_playerType;
- (void)callbackPlayerVideoRequest;
- (void)playerVideoURLStateCompleteCheck;
- (void)playerVideoItemDidPrepared:(id)arg1;
- (id)generateVideoItemWithBaseVideo:(id)arg1;
- (void)checkKindsOfNetworkStateWithCompletion:(CDUnknownBlockType)arg1;
- (_Bool)checkNetworkStateWithCompletion:(CDUnknownBlockType)arg1;
- (void)reachabilityChangedNotification:(id)arg1;
- (void)loadRecommendVideoAlbum;
- (void)loadPlayerItemWithVideoID:(long long)arg1 site:(long long)arg2;
- (void)loadPlayerItemWithVideoOrder:(long long)arg1;
- (void)loadPlayerItemWithVideoOrder:(long long)arg1 loadVideoType:(long long)arg2;
- (void)loadVideo:(long long)arg1;
- (void)playerManagerWillTerminate;
@property(nonatomic) long long currentDefinitionType; // @synthesize currentDefinitionType=_currentDefinitionType;
- (long long)defaultDefinitionType;
- (id)playableDefinitionsList;
- (long long)haveNextVideoSource;
- (_Bool)haveNextVideoAlbum;
- (_Bool)havePreviousVideo;
- (_Bool)haveNextVideo;
- (_Bool)isLiveVideo;
- (_Bool)isLocalVideo;
- (_Bool)isAuthenticatedVideo;
- (_Bool)isPayVideo;
- (_Bool)isVIPVideo;
- (_Bool)isPlayabelVideo;
@property(readonly, nonatomic) long long defineQuality;
@property(readonly, nonatomic) double definePosition;
@property(readonly, nonatomic) _Bool shouldLoadAdvert;
- (void)fillAlbumInfoForVideoItem:(id)arg1;
- (void)registerNotification;
- (id)initWithAlbum:(id)arg1;
- (id)initWithAlbum:(id)arg1 playerType:(long long)arg2 userInfo:(id)arg3;
- (id)init;
- (void)dealloc;
@property(retain, nonatomic) VideoAlbum *freshVideoAlbum; // @dynamic freshVideoAlbum;
@property(nonatomic) long long loadVideoType;
@property(retain, nonatomic) SHPlayerVideoItem *preloadVideoItem;
@property(nonatomic) SHPlayerVideoItem *deployedVideoItem;
- (void)haveFinishedPreloadVideoLoad;
- (_Bool)isLocalToOnlineVideoPrepared;
- (void)loadOnlineVideoAlbumForLocalVideoAlbum;
- (void)willLoadLocalToOnlineVideo;
- (void)willPreloadNextVideo;
- (void)cancelPreloadVideo;
- (void)shouldBeginToPreloadNextVideo;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

