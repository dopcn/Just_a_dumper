//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSDictionary, NSMutableDictionary;

@interface NBPhoneNumberUtil : NSObject
{
    NSMutableDictionary *_coreMetaData;
    NSMutableDictionary *_mapCCode2CN;
    NSMutableDictionary *_mapCN2CCode;
}

+ (id)stringByTrimming:(id)arg1;
+ (id)sharedInstanceForTest;
+ (id)sharedInstance;
@property(retain, nonatomic) NSMutableDictionary *mapCN2CCode; // @synthesize mapCN2CCode=_mapCN2CCode;
@property(retain, nonatomic) NSMutableDictionary *mapCCode2CN; // @synthesize mapCCode2CN=_mapCCode2CN;
@property(readonly, nonatomic) NSMutableDictionary *coreMetaData; // @synthesize coreMetaData=_coreMetaData;
- (void).cxx_destruct;
- (id)getAllMetadata;
- (_Bool)matchesEntirely:(id)arg1 string:(id)arg2;
- (_Bool)canBeInternationallyDialled:(id)arg1;
- (_Bool)canBeInternationallyDialled:(id)arg1 error:(id *)arg2;
- (_Bool)isNationalNumberSuffixOfTheOther:(id)arg1 second:(id)arg2;
- (int)isNumberMatch:(id)arg1 second:(id)arg2;
- (int)isNumberMatch:(id)arg1 second:(id)arg2 error:(id *)arg3;
- (id)extractOptionalPauseComponent:(id)arg1 numberLeftToParse:(id *)arg2;
- (void)buildNationalNumberForParsing:(id)arg1 nationalNumber:(id *)arg2;
- (id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(_Bool)arg3 checkRegion:(_Bool)arg4;
- (id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(_Bool)arg3 checkRegion:(_Bool)arg4 error:(id *)arg5;
- (id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2;
- (id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 error:(id *)arg3;
- (id)countyCodeByCarrier;
- (id)parseWithPhoneCarrierRegion:(id)arg1 error:(id *)arg2;
- (id)parse:(id)arg1 defaultRegion:(id)arg2 error:(id *)arg3;
- (id)parse:(id)arg1 defaultRegion:(id)arg2;
- (_Bool)checkRegionForParsing:(id)arg1 defaultRegion:(id)arg2;
- (id)maybeStripExtension:(id *)arg1;
- (_Bool)maybeStripNationalPrefixAndCarrierCode:(id *)arg1 metadata:(id)arg2 carrierCode:(id *)arg3;
- (_Bool)maybeStripNationalPrefixAndCarrierCode:(id *)arg1 metadata:(id)arg2 carrierCode:(id *)arg3 error:(id *)arg4;
- (int)maybeStripInternationalPrefixAndNormalize:(id *)arg1 possibleIddPrefix:(id)arg2;
- (int)maybeStripInternationalPrefixAndNormalize:(id *)arg1 possibleIddPrefix:(id)arg2 error:(id *)arg3;
- (_Bool)parsePrefixAsIdd:(id)arg1 sourceString:(id *)arg2;
- (unsigned int)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id *)arg3 keepRawInput:(_Bool)arg4 phoneNumber:(id *)arg5;
- (unsigned int)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id *)arg3 keepRawInput:(_Bool)arg4 phoneNumber:(id *)arg5 error:(id *)arg6;
- (unsigned int)extractCountryCode:(id)arg1 nationalNumber:(id *)arg2;
- (_Bool)truncateTooLongNumber:(id)arg1;
- (_Bool)truncateTooLongNumber:(id)arg1 error:(id *)arg2;
- (_Bool)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2;
- (_Bool)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 error:(id *)arg3;
- (int)isPossibleNumberWithReason:(id)arg1;
- (int)isPossibleNumberWithReason:(id)arg1 error:(id *)arg2;
- (int)testNumberLengthAgainstPattern:(id)arg1 number:(id)arg2;
- (_Bool)isPossibleNumber:(id)arg1;
- (_Bool)isPossibleNumber:(id)arg1 error:(id *)arg2;
- (_Bool)isAlphaNumber:(id)arg1;
- (_Bool)isLeadingZeroPossible:(unsigned int)arg1;
- (_Bool)isNANPACountry:(id)arg1;
- (id)getNddPrefixForRegion:(id)arg1 stripNonDigits:(_Bool)arg2;
- (unsigned int)getCountryCodeForValidRegion:(id)arg1;
- (unsigned int)getCountryCodeForValidRegion:(id)arg1 error:(id *)arg2;
- (unsigned int)getCountryCodeForRegion:(id)arg1;
- (id)getRegionCodesForCountryCode:(unsigned int)arg1;
- (id)getRegionCodeForCountryCode:(unsigned int)arg1;
- (id)getRegionCodeForNumberFromRegionList:(id)arg1 regionCodes:(id)arg2;
- (id)getRegionCodeForNumber:(id)arg1;
- (_Bool)isValidNumberForRegion:(id)arg1 regionCode:(id)arg2;
- (_Bool)isValidNumber:(id)arg1;
- (_Bool)isNumberMatchingDesc:(id)arg1 numberDesc:(id)arg2;
- (id)getMetadataForNonGeographicalRegion:(unsigned int)arg1;
- (id)getMetadataForRegion:(id)arg1;
- (int)getNumberTypeHelper:(id)arg1 metadata:(id)arg2;
- (int)getNumberType:(id)arg1;
- (id)getNumberDescByType:(id)arg1 type:(int)arg2;
- (id)maybeGetFormattedExtension:(id)arg1 metadata:(id)arg2 numberFormat:(int)arg3;
- (id)getExampleNumberForNonGeoEntity:(unsigned int)arg1;
- (id)getExampleNumberForNonGeoEntity:(unsigned int)arg1 error:(id *)arg2;
- (id)getExampleNumberForType:(id)arg1 type:(int)arg2;
- (id)getExampleNumberForType:(id)arg1 type:(int)arg2 error:(id *)arg3;
- (id)getExampleNumber:(id)arg1;
- (id)getExampleNumber:(id)arg1 error:(id *)arg2;
- (id)formatNsnUsingPattern:(id)arg1 formattingPattern:(id)arg2 numberFormat:(int)arg3 carrierCode:(id)arg4;
- (id)chooseFormattingPatternForNumber:(id)arg1 nationalNumber:(id)arg2;
- (id)formatNsn:(id)arg1 metadata:(id)arg2 phoneNumberFormat:(int)arg3 carrierCode:(id)arg4;
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2;
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;
- (_Bool)hasFormattingPatternForNumber:(id)arg1;
- (_Bool)hasUnexpectedItalianLeadingZero:(id)arg1;
- (_Bool)rawInputContainsNationalPrefix:(id)arg1 nationalPrefix:(id)arg2 regionCode:(id)arg3;
- (id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2;
- (id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;
- (id)prefixNumberWithCountryCallingCode:(unsigned int)arg1 phoneNumberFormat:(int)arg2 formattedNationalNumber:(id)arg3 formattedExtension:(id)arg4;
- (id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2;
- (id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;
- (id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(_Bool)arg3;
- (id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(_Bool)arg3 error:(id *)arg4;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 error:(id *)arg3;
- (id)getMetadataForRegionOrCallingCode:(unsigned int)arg1 regionCode:(id)arg2;
- (id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2;
- (id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 error:(id *)arg3;
- (id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3;
- (id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3 error:(id *)arg4;
- (id)format:(id)arg1 numberFormat:(int)arg2;
- (id)format:(id)arg1 numberFormat:(int)arg2 error:(id *)arg3;
- (_Bool)hasValidCountryCallingCode:(unsigned int)arg1;
- (_Bool)isValidRegionCode:(id)arg1;
- (_Bool)isNumberGeographical:(id)arg1;
- (_Bool)formattingRuleHasFirstGroupOnly:(id)arg1;
- (id)normalizeHelper:(id)arg1 normalizationReplacements:(id)arg2 removeNonMatches:(_Bool)arg3;
- (unsigned long long)getLengthOfNationalDestinationCode:(id)arg1;
- (unsigned long long)getLengthOfNationalDestinationCode:(id)arg1 error:(id *)arg2;
- (unsigned long long)getLengthOfGeographicalAreaCode:(id)arg1;
- (unsigned long long)getLengthOfGeographicalAreaCode:(id)arg1 error:(id *)arg2;
- (id)convertAlphaCharactersInNumber:(id)arg1;
- (id)normalizeDigitsOnly:(id)arg1;
- (void)normalizeSB:(id *)arg1;
- (id)normalizePhoneNumber:(id)arg1;
- (_Bool)isViablePhoneNumber:(id)arg1;
- (id)extractPossibleNumber:(id)arg1;
- (void)initCC2CN;
- (void)initNormalizationMappings;
@property(readonly, nonatomic) NSDictionary *DIGIT_MAPPINGS;
- (void)clearCN2CC;
- (void)clearCC2CN;
- (void)dealloc;
- (void)initRegularExpressionSet;
- (id)loadMetadata:(id)arg1;
- (id)initForTest;
- (id)initWithPhoneNumberMetadata:(id)arg1;
- (id)init;
- (id)countryCodeFromRegionCode:(id)arg1;
- (id)regionCodeFromCountryCode:(unsigned int)arg1;
- (id)getNationalSignificantNumber:(id)arg1;
- (_Bool)isNaN:(id)arg1;
- (id)stringByReplacingOccurrencesString:(id)arg1 withMap:(id)arg2 removeNonMatches:(_Bool)arg3;
- (_Bool)isStartingStringByRegex:(id)arg1 regex:(id)arg2;
- (id)matchedStringByRegex:(id)arg1 regex:(id)arg2;
- (id)matchesByRegex:(id)arg1 regex:(id)arg2;
- (id)matcheFirstByRegex:(id)arg1 regex:(id)arg2;
- (id)replaceStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3;
- (id)replaceFirstStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3;
- (long long)indexOfStringByString:(id)arg1 target:(id)arg2;
- (long long)stringPositionByRegex:(id)arg1 regex:(id)arg2;
- (id)componentsSeparatedByRegex:(id)arg1 regex:(id)arg2;
- (id)regularExpressionWithPattern:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (_Bool)hasValue:(id)arg1;

@end

