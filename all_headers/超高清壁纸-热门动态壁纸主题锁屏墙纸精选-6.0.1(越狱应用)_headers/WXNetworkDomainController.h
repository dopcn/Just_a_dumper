//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "WXDomainController.h"

#import "WXNetworkCommandDelegate-Protocol.h"

@class NSCache, NSMutableDictionary, NSObject, NSString, WXNetworkDomain;
@protocol OS_dispatch_queue;

@interface WXNetworkDomainController : WXDomainController <WXNetworkCommandDelegate>
{
    NSCache *_responseCache;
    NSMutableDictionary *_connectionStates;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (void)injectDidFailWithErrorIntoDelegateClass:(Class)arg1;
+ (void)injectDidFinishLoadingIntoDelegateClass:(Class)arg1;
+ (void)injectDidReceiveDataIntoDelegateClass:(Class)arg1;
+ (void)injectDidReceiveResponseIntoDelegateClass:(Class)arg1;
+ (void)injectWillSendRequestIntoDelegateClass:(Class)arg1;
+ (void)injectIntoDelegateClass:(Class)arg1;
+ (void)injectIntoAllNSURLConnectionDelegateClasses;
+ (void)_swizzleNSURLSessionClasses;
+ (void)swizzleNSURLSessionClasses;
+ (void)replaceImplementationOfSelector:(SEL)arg1 withSelector:(SEL)arg2 forClass:(Class)arg3 withMethodDescription:(struct objc_method_description)arg4 implementationBlock:(id)arg5 undefinedBlock:(id)arg6;
+ (_Bool)instanceRespondsButDoesNotImplementSelector:(SEL)arg1 class:(Class)arg2;
+ (void)sniffWithoutDuplicationForObject:(id)arg1 selector:(SEL)arg2 sniffingBlock:(CDUnknownBlockType)arg3 originalImplementationBlock:(CDUnknownBlockType)arg4;
+ (SEL)swizzledSelectorForSelector:(SEL)arg1;
+ (id)prettyStringPrinterForResponse:(id)arg1 withRequest:(id)arg2;
+ (id)prettyStringPrinterForRequest:(id)arg1;
+ (void)unregisterPrettyStringPrinter:(id)arg1;
+ (void)registerPrettyStringPrinter:(id)arg1;
+ (id)_currentPrettyStringPrinters;
+ (Class)domainClass;
+ (id)nextRequestID;
+ (id)defaultInstance;
- (void).cxx_destruct;
- (void)taskFinished:(id)arg1;
- (id)accumulatedDataForTask:(id)arg1;
- (void)addAccumulatedData:(id)arg1 forTask:(id)arg2;
- (void)setAccumulatedData:(id)arg1 forTask:(id)arg2;
- (id)requestForTask:(id)arg1;
- (void)setRequest:(id)arg1 forTask:(id)arg2;
- (id)responseForTask:(id)arg1;
- (void)setResponse:(id)arg1 forTask:(id)arg2;
- (id)requestIDForTask:(id)arg1;
- (id)requestStateForTask:(id)arg1;
- (void)connectionFinished:(id)arg1;
- (id)accumulatedDataForConnection:(id)arg1;
- (void)addAccumulatedData:(id)arg1 forConnection:(id)arg2;
- (void)setAccumulatedData:(id)arg1 forConnection:(id)arg2;
- (id)requestForConnection:(id)arg1;
- (void)setRequest:(id)arg1 forConnection:(id)arg2;
- (id)responseForConnection:(id)arg1;
- (void)setResponse:(id)arg1 forConnection:(id)arg2;
- (id)requestIDForConnection:(id)arg1;
- (id)requestStateForConnection:(id)arg1;
- (void)performBlock:(CDUnknownBlockType)arg1;
- (void)setResponse:(id)arg1 forRequestID:(id)arg2 response:(id)arg3 request:(id)arg4;
- (id)getNetWorkResponseCache;
- (void)domain:(id)arg1 getResponseBodyWithRequestId:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (void)domain:(id)arg1 clearBrowserCacheWithCallback:(CDUnknownBlockType)arg2;
- (void)domain:(id)arg1 canClearBrowserCookiesWithCallback:(CDUnknownBlockType)arg2;
- (void)domain:(id)arg1 canClearBrowserCacheWithCallback:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)init;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) WXNetworkDomain *domain; // @dynamic domain;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

