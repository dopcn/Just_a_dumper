//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "AVCaptureVideoDataOutputSampleBufferDelegate-Protocol.h"

@class AVCaptureDevice, AVCaptureDeviceInput, AVCaptureSession, NSArray, NSMutableArray, NSString;

@interface VideoSource : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate>
{
    // Error parsing type: ^{CameraImplIOS=^^?^^?{shared_ptr<EasyAR::TaskWorker>=^{TaskWorker}^{__shared_weak_count}}{LockedData<std::__1::vector<std::__1::shared_ptr<EasyAR::FrameFilter>, std::__1::allocator<std::__1::shared_ptr<EasyAR::FrameFilter> > > >={vector<std::__1::shared_ptr<EasyAR::FrameFilter>, std::__1::allocator<std::__1::shared_ptr<EasyAR::FrameFilter> > >=^{shared_ptr<EasyAR::FrameFilter>}^{shared_ptr<EasyAR::FrameFilter>}{__compressed_pair<std::__1::shared_ptr<EasyAR::FrameFilter> *, std::__1::allocator<std::__1::shared_ptr<EasyAR::FrameFilter> > >=^{shared_ptr<EasyAR::FrameFilter>}}}{shared_ptr<std::__1::mutex>=^{mutex}^{__shared_weak_count}}}{LockedData<std::__1::shared_ptr<EasyAR::FrameImpl> >={shared_ptr<EasyAR::FrameImpl>=^{FrameImpl}^{__shared_weak_count}}{shared_ptr<std::__1::mutex>=^{mutex}^{__shared_weak_count}}}i{weak_ptr<EasyAR::FrameExporter>=^{FrameExporter}^{__shared_weak_count}}^^?{shared_ptr<EasyAR::CameraCalibrationImpl>=^{CameraCalibrationImpl}^{__shared_weak_count}}{shared_ptr<EasyAR::CameraCalibrationImpl>=^{CameraCalibrationImpl}^{__shared_weak_count}}i{ConsumableData<std::__1::shared_ptr<EasyAR::ImageFrame> >={shared_ptr<EasyAR::ImageFrame>=^{ImageFrame}^{__shared_weak_count}}B{shared_ptr<std::__1::mutex>=^{mutex}^{__shared_weak_count}}{shared_ptr<std::__1::condition_variable>=^{condition_variable}^{__shared_weak_count}}}iBB{Size_<int>=ii}{atomic<int>=Ai}BB{shared_ptr<EasyAR::CameraIOS>=^{CameraIOS}^{__shared_weak_count}}{Vec<int, 2>=[2i]}fBi}, name: cameraImplIOS
    _Bool opened_;
    AVCaptureSession *_captureSession;
    AVCaptureDeviceInput *_deviceInput;
    AVCaptureDevice *_videoDevice;
    NSMutableArray *_allSupportedPreviewSize;
    NSArray *_allSupportedFPS;
    struct CGSize _previewSize;
}

@property(retain, nonatomic) NSArray *allSupportedFPS; // @synthesize allSupportedFPS=_allSupportedFPS;
@property(nonatomic) struct CGSize previewSize; // @synthesize previewSize=_previewSize;
@property(retain, nonatomic) NSMutableArray *allSupportedPreviewSize; // @synthesize allSupportedPreviewSize=_allSupportedPreviewSize;
@property(nonatomic) __weak AVCaptureDevice *videoDevice; // @synthesize videoDevice=_videoDevice;
@property(retain, nonatomic) AVCaptureDeviceInput *deviceInput; // @synthesize deviceInput=_deviceInput;
@property(retain, nonatomic) AVCaptureSession *captureSession; // @synthesize captureSession=_captureSession;
- (void).cxx_destruct;
- (void)dealloc;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(id)arg3;
- (void)addVideoDataOutput;
- (id)cameraWithPosition:(long long)arg1;
- (_Bool)setFocusMode:(long long)arg1 withRestiction:(long long)arg2;
- (_Bool)setFlashTorchMode:(_Bool)arg1;
- (float)getOptimalFrameRate:(float)arg1;
- (struct CGSize)getOptimalPreviewSize:(struct CGSize)arg1;
- (_Bool)setSize:(struct CGSize)arg1;
- (struct CGSize)getSupportedSize:(int)arg1;
- (int)getNumSupportedSize;
- (struct CGSize)getSize;
- (_Bool)setFrameRate:(float)arg1;
- (float)getSupportedFrameRate:(int)arg1;
- (int)getNumSupportedFrameRate;
- (void)updateAvailableFPS;
- (float)getFrameRate;
- (_Bool)stop;
- (_Bool)start;
- (_Bool)openCameraWithPosition:(long long)arg1;
-     // Error parsing type: @24@0:8^{CameraImplIOS=^^?^^?{shared_ptr<EasyAR::TaskWorker>=^{TaskWorker}^{__shared_weak_count}}{LockedData<std::__1::vector<std::__1::shared_ptr<EasyAR::FrameFilter>, std::__1::allocator<std::__1::shared_ptr<EasyAR::FrameFilter> > > >={vector<std::__1::shared_ptr<EasyAR::FrameFilter>, std::__1::allocator<std::__1::shared_ptr<EasyAR::FrameFilter> > >=^{shared_ptr<EasyAR::FrameFilter>}^{shared_ptr<EasyAR::FrameFilter>}{__compressed_pair<std::__1::shared_ptr<EasyAR::FrameFilter> *, std::__1::allocator<std::__1::shared_ptr<EasyAR::FrameFilter> > >=^{shared_ptr<EasyAR::FrameFilter>}}}{shared_ptr<std::__1::mutex>=^{mutex}^{__shared_weak_count}}}{LockedData<std::__1::shared_ptr<EasyAR::FrameImpl> >={shared_ptr<EasyAR::FrameImpl>=^{FrameImpl}^{__shared_weak_count}}{shared_ptr<std::__1::mutex>=^{mutex}^{__shared_weak_count}}}i{weak_ptr<EasyAR::FrameExporter>=^{FrameExporter}^{__shared_weak_count}}^^?{shared_ptr<EasyAR::CameraCalibrationImpl>=^{CameraCalibrationImpl}^{__shared_weak_count}}{shared_ptr<EasyAR::CameraCalibrationImpl>=^{CameraCalibrationImpl}^{__shared_weak_count}}i{ConsumableData<std::__1::shared_ptr<EasyAR::ImageFrame> >={shared_ptr<EasyAR::ImageFrame>=^{ImageFrame}^{__shared_weak_count}}B{shared_ptr<std::__1::mutex>=^{mutex}^{__shared_weak_count}}{shared_ptr<std::__1::condition_variable>=^{condition_variable}^{__shared_weak_count}}}iBB{Size_<int>=ii}{atomic<int>=Ai}BB{shared_ptr<EasyAR::CameraIOS>=^{CameraIOS}^{__shared_weak_count}}{Vec<int, 2>=[2i]}fBi}16, name: init:

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

