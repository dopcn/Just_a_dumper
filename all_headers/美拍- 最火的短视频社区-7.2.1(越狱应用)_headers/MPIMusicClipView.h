//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "UICollectionViewDataSource-Protocol.h"
#import "UICollectionViewDelegate-Protocol.h"

@class MPIButton, NSArray, NSLayoutConstraint, NSString, UIButton, UICollectionView, UILabel;
@protocol MPIMusicClipViewDelegate;

@interface MPIMusicClipView : UIView <UICollectionViewDelegate, UICollectionViewDataSource>
{
    _Bool _needReloadData;
    NSLayoutConstraint *_noticeLabelBottonConstraint;
    UICollectionView *_collectionView;
    UIButton *_changeMusicButton;
    MPIButton *_finishButton;
    UILabel *_timeTextLabelFirst;
    UILabel *_timeLabel;
    UILabel *_timeTextLabelSecond;
    UILabel *_noticeLabel;
    id <MPIMusicClipViewDelegate> _delegate;
    NSArray *_fakerHeightForCellArray;
    double _timeIntervalPerScreen;
    double _duration;
    double _currentTimeInterval;
    double _scrollingStartTimeInterval;
    double _timeIntervalPerCell;
    long long _totalNumberOfCell;
}

+ (id)createMPIMusicClipViewWithDuration:(double)arg1 delegate:(id)arg2;
+ (id)createMPIMusicClipViewWithDuration:(double)arg1 timeIntervalPerScreen:(double)arg2 delegate:(id)arg3;
+ (double)defaultTimeIntervalPerScreen;
@property(nonatomic) _Bool needReloadData; // @synthesize needReloadData=_needReloadData;
@property(nonatomic) long long totalNumberOfCell; // @synthesize totalNumberOfCell=_totalNumberOfCell;
@property(nonatomic) double timeIntervalPerCell; // @synthesize timeIntervalPerCell=_timeIntervalPerCell;
@property(nonatomic) double scrollingStartTimeInterval; // @synthesize scrollingStartTimeInterval=_scrollingStartTimeInterval;
@property(nonatomic) double currentTimeInterval; // @synthesize currentTimeInterval=_currentTimeInterval;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) double timeIntervalPerScreen; // @synthesize timeIntervalPerScreen=_timeIntervalPerScreen;
@property(retain, nonatomic) NSArray *fakerHeightForCellArray; // @synthesize fakerHeightForCellArray=_fakerHeightForCellArray;
@property(nonatomic) __weak id <MPIMusicClipViewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak UILabel *noticeLabel; // @synthesize noticeLabel=_noticeLabel;
@property(nonatomic) __weak UILabel *timeTextLabelSecond; // @synthesize timeTextLabelSecond=_timeTextLabelSecond;
@property(nonatomic) __weak UILabel *timeLabel; // @synthesize timeLabel=_timeLabel;
@property(nonatomic) __weak UILabel *timeTextLabelFirst; // @synthesize timeTextLabelFirst=_timeTextLabelFirst;
@property(nonatomic) __weak MPIButton *finishButton; // @synthesize finishButton=_finishButton;
@property(nonatomic) __weak UIButton *changeMusicButton; // @synthesize changeMusicButton=_changeMusicButton;
@property(nonatomic) __weak UICollectionView *collectionView; // @synthesize collectionView=_collectionView;
@property(nonatomic) __weak NSLayoutConstraint *noticeLabelBottonConstraint; // @synthesize noticeLabelBottonConstraint=_noticeLabelBottonConstraint;
- (void).cxx_destruct;
- (void)updateTimeLabel;
- (void)finishScrollingHandle;
- (double)fakerHeightForCellWithIndexPath:(id)arg1;
- (void)commonSetup;
@property(nonatomic) _Bool shouldShowChangeMusicButton;
@property(readonly, nonatomic) double scrollingEndTimeInterval;
- (void)setStartTimeInterval:(double)arg1;
- (void)reloadDataForCurrentTimeInterval:(double)arg1;
- (void)refreshMPIMusicClipViewWithDuration:(double)arg1 startTimeInterval:(double)arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)finishAction:(id)arg1;
- (void)changeMusicAction:(id)arg1;
- (void)layoutSubviews;
- (void)awakeFromNib;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

