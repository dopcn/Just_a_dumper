//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AVAudioPlayerDelegate-Protocol.h"
#import "KSPlayerManagerProtocol-Protocol.h"

@class AVAudioPlayer, KSAudioPlayInformation, KSAudioPlayerDataSourceManager, NSString, NSURL;
@protocol KSAudioPlayerDataSource, KSAudioPlayerDelegate;

@interface KSAudioPlayer : NSObject <AVAudioPlayerDelegate, KSPlayerManagerProtocol>
{
    id <KSAudioPlayerDelegate> _delegate;
    id <KSAudioPlayerDataSource> _dataSource;
    NSString *_sourceString;
    KSAudioPlayerDataSourceManager *_dataSourceManager;
    KSAudioPlayInformation *_playInformation;
    AVAudioPlayer *_audioPlayer;
    CDUnknownBlockType _willPlayBlock;
    CDUnknownBlockType _didPlayBlock;
    CDUnknownBlockType _playEnd;
    NSURL *_audioURL;
}

+ (id)audioFilePathFromURLString:(id)arg1;
+ (id)sharedAudioPlayer;
@property(copy, nonatomic) NSURL *audioURL; // @synthesize audioURL=_audioURL;
@property(copy, nonatomic) CDUnknownBlockType playEnd; // @synthesize playEnd=_playEnd;
@property(copy, nonatomic) CDUnknownBlockType didPlayBlock; // @synthesize didPlayBlock=_didPlayBlock;
@property(copy, nonatomic) CDUnknownBlockType willPlayBlock; // @synthesize willPlayBlock=_willPlayBlock;
@property(retain, nonatomic) AVAudioPlayer *audioPlayer; // @synthesize audioPlayer=_audioPlayer;
@property(retain, nonatomic) KSAudioPlayInformation *playInformation; // @synthesize playInformation=_playInformation;
@property(retain, nonatomic) KSAudioPlayerDataSourceManager *dataSourceManager; // @synthesize dataSourceManager=_dataSourceManager;
@property(copy, nonatomic) NSString *sourceString; // @synthesize sourceString=_sourceString;
@property(nonatomic) __weak id <KSAudioPlayerDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property(nonatomic) __weak id <KSAudioPlayerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (id)composeVoiceRequestUrlWithWords:(id)arg1 tts_lan:(unsigned long long)arg2;
- (id)composeSentenceVoiceRequestUrlWithWords:(id)arg1 voiceTyoe:(unsigned long long)arg2;
- (void)playVoiceWithWords:(id)arg1 voiceType:(unsigned long long)arg2;
- (void)playVoiceWithUrlString:(id)arg1;
- (void)playVoiceWithWords:(id)arg1 tts_lan:(unsigned long long)arg2;
- (void)playVoiceWithWords:(id)arg1;
- (void)handleAudioSessionInterruptionWithNotification:(id)arg1;
- (void)dealloc;
- (_Bool)playWithURLString:(id)arg1 audioFilePath:(id)arg2 saveLastPlayInformation:(_Bool)arg3;
- (void)playWithURLString:(id)arg1 saveLastPlayInformation:(_Bool)arg2;
- (void)cancelCurrentPlayerIfNeedWithSavePlayingInformation:(_Bool)arg1;
- (void)cancelCurrentPlayerIfPossible;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) double deviceCurrentTime;
@property(nonatomic) double currentTime;
- (void)reset;
- (_Bool)isCachedWithURLString:(id)arg1;
- (_Bool)isPlayingWithURLString:(id)arg1;
- (void)stop;
- (void)pause;
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
- (_Bool)play;
- (void)playWithURL:(id)arg1;
- (void)playWithURLString:(id)arg1;
- (_Bool)playAtTime:(double)arg1;
- (_Bool)prepareToPlay;
- (id)initWithFilePath:(id)arg1;
- (void)setupAudioPlayerWithURL:(id)arg1 error:(id *)arg2;
- (void)commonInitWithURL:(id)arg1 error:(id *)arg2;
- (void)confirgAudioSession;
- (void)setup;
- (void)setPlayAudioContentsOfURL:(id)arg1 fileTypeHint:(id)arg2 error:(id *)arg3;
- (void)setPlayContentsOfURL:(id)arg1 error:(id *)arg2;
- (void)setPlayContentsOfURL:(id)arg1;
- (id)currentPlayingUrl;
- (id)initWithContentsOfURL:(id)arg1 fileTypeHint:(id)arg2 error:(id *)arg3;
- (id)initWithContentsOfURL:(id)arg1 error:(id *)arg2;
- (id)initWithURL:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

