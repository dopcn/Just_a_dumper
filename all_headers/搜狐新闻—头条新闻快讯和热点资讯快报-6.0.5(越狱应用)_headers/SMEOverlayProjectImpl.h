//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "SMEOverlayProjection-Protocol.h"

@class NSString, SMEOverlay;

@interface SMEOverlayProjectImpl : NSObject <SMEOverlayProjection>
{
    // Error parsing type: ^{MapView=^^?^^?^^?i{map<int, sogoumap::engine::core::GeoUrl, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, sogoumap::engine::core::GeoUrl> > >={__tree<std::__1::__value_type<int, sogoumap::engine::core::GeoUrl>, std::__1::__map_value_compare<int, std::__1::__value_type<int, sogoumap::engine::core::GeoUrl>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, sogoumap::engine::core::GeoUrl> > >=^{__tree_node<std::__1::__value_type<int, sogoumap::engine::core::GeoUrl>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, sogoumap::engine::core::GeoUrl>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, sogoumap::engine::core::GeoUrl>, std::__1::less<int>, true> >=Q}}}{MemoryManager=^^?{map<int, mapengine::MemReUseList *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, mapengine::MemReUseList *> > >={__tree<std::__1::__value_type<int, mapengine::MemReUseList *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, mapengine::MemReUseList *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, mapengine::MemReUseList *> > >=^{__tree_node<std::__1::__value_type<int, mapengine::MemReUseList *>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, mapengine::MemReUseList *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, mapengine::MemReUseList *>, std::__1::less<int>, true> >=Q}}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{AutoPtr<sogoumap::engine::core::MapViewListener>=^^?^{MapViewListener}}{AutoPtr<sogoumap::engine::core::UIDrawNotify>=^^?^{UIDrawNotify}}BBBBBBBiBBB{Coordinate3D<double>=ddd}^{vector<std::__1::shared_ptr<mapengine::TileResult>, std::__1::allocator<std::__1::shared_ptr<mapengine::TileResult> > >}B{SwapPtr<std::__1::vector<std::__1::shared_ptr<mapengine::TileResult>, std::__1::allocator<std::__1::shared_ptr<mapengine::TileResult> > > >=^{vector<std::__1::shared_ptr<mapengine::TileResult>, std::__1::allocator<std::__1::shared_ptr<mapengine::TileResult> > >}^{vector<std::__1::shared_ptr<mapengine::TileResult>, std::__1::allocator<std::__1::shared_ptr<mapengine::TileResult> > >}B}{list<std::__1::shared_ptr<SogouMap::DownLoadTask>, std::__1::allocator<std::__1::shared_ptr<SogouMap::DownLoadTask> > >={__list_node_base<std::__1::shared_ptr<SogouMap::DownLoadTask>, void *>=^{__list_node_base<std::__1::shared_ptr<SogouMap::DownLoadTask>, void *>}^{__list_node_base<std::__1::shared_ptr<SogouMap::DownLoadTask>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SogouMap::DownLoadTask>, void *> > >=Q}}{map<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask>, std::__1::less<sogoumap::engine::model::Tile>, std::__1::allocator<std::__1::pair<const sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> > > >={__tree<std::__1::__value_type<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> >, std::__1::__map_value_compare<sogoumap::engine::model::Tile, std::__1::__value_type<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> >, std::__1::less<sogoumap::engine::model::Tile>, true>, std::__1::allocator<std::__1::__value_type<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> > > >=^{__tree_node<std::__1::__value_type<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<sogoumap::engine::model::Tile, std::__1::__value_type<sogoumap::engine::model::Tile, std::__1::shared_ptr<mapengine::RenderTask> >, std::__1::less<sogoumap::engine::model::Tile>, true> >=Q}}}{list<std::__1::shared_ptr<framework::Runnable>, std::__1::allocator<std::__1::shared_ptr<framework::Runnable> > >={__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Runnable>, void *> > >=Q}}[256C]i{ConcurrentBlockingList<mapengine::TaskMsg>=^^?{__list_node_base<mapengine::TaskMsg, void *>=^{__list_node_base<mapengine::TaskMsg, void *>}^{__list_node_base<mapengine::TaskMsg, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<mapengine::TaskMsg, void *> > >=Q}{Enumerator=^^?^{List<mapengine::TaskMsg>}{__list_iterator<mapengine::TaskMsg, void *>=^{__list_node_base<mapengine::TaskMsg, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{RefreshThread=^^?i^{_opaque_pthread_t}{_opaque_pthread_attr_t=q[56c]}^{Runnable}^v^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}qqBi{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}B{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}^{MapView}}{GpsView={Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}qdddqd{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{shared_ptr<sogoumap::engine::graphics::GLBitmap>=^{GLBitmap}^{__shared_weak_count}}B{shared_ptr<sogoumap::engine::graphics::GLBitmap>=^{GLBitmap}^{__shared_weak_count}}{shared_ptr<sogoumap::engine::graphics::GLBitmap>=^{GLBitmap}^{__shared_weak_count}}{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}B{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}ddfddffiiiiiii{Arc={Coordinate3D<double>=ddd}fiif{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}B}fiBBBBi^f^{MapView}}{Camera=^^?^{MapView}{AutoPtr<sogoumap::engine::core::CameraListener>=^^?^{CameraListener}}{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}ddddddB{Matrix=^^?[4[4d]]}iiddddddddddBidi{Plane=[4d]II}{Plane=[4d]II}ddddd{Vec3d=[3d]}{Matrixd=[4[4d]]}{Matrixd=[4[4d]]}{Matrixd=[4[4d]]}[2{Plane=[4d]II}]dddddddi{Matrix=^^?[4[4d]]}{Matrix=^^?[4[4d]]}{Matrix=^^?[4[4d]]}{GeoQuad=^^?{GeoPolygon=^^?B{Bound=^^?ffff}Iii^{PointSequence}{vector<SogouMap::PointSequence *, std::__1::allocator<SogouMap::PointSequence *> >=^^{PointSequence}^^{PointSequence}{__compressed_pair<SogouMap::PointSequence **, std::__1::allocator<SogouMap::PointSequence *> >=^^{PointSequence}}}{vector<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > > >=^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}{__compressed_pair<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > > >=^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}}}}}Bffff{BoundSet=^^?^{Node}f}^{Layer}q}{Camera=^^?^{MapView}{AutoPtr<sogoumap::engine::core::CameraListener>=^^?^{CameraListener}}{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}ddddddB{Matrix=^^?[4[4d]]}iiddddddddddBidi{Plane=[4d]II}{Plane=[4d]II}ddddd{Vec3d=[3d]}{Matrixd=[4[4d]]}{Matrixd=[4[4d]]}{Matrixd=[4[4d]]}[2{Plane=[4d]II}]dddddddi{Matrix=^^?[4[4d]]}{Matrix=^^?[4[4d]]}{Matrix=^^?[4[4d]]}{GeoQuad=^^?{GeoPolygon=^^?B{Bound=^^?ffff}Iii^{PointSequence}{vector<SogouMap::PointSequence *, std::__1::allocator<SogouMap::PointSequence *> >=^^{PointSequence}^^{PointSequence}{__compressed_pair<SogouMap::PointSequence **, std::__1::allocator<SogouMap::PointSequence *> >=^^{PointSequence}}}{vector<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > > >=^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}{__compressed_pair<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > > >=^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}}}}}Bffff{BoundSet=^^?^{Node}f}^{Layer}q}^{Pyramid}{MapController=^^?{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{?={Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}dB{_StructAnimation=qd^?{function<void (bool)>={type=[24C]}^{__base<void (bool)>}}}}{?={Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}dB{_StructAnimation=qd^?{function<void (bool)>={type=[24C]}^{__base<void (bool)>}}}}{?=ddB{_StructAnimation=qd^?{function<void (bool)>={type=[24C]}^{__base<void (bool)>}}}}{?=ddB{_StructAnimation=qd^?{function<void (bool)>={type=[24C]}^{__base<void (bool)>}}}}{?=ddB{_StructAnimation=qd^?{function<void (bool)>={type=[24C]}^{__base<void (bool)>}}}}B^{MapView}BB{AutoPtr<mapengine::MapControllerListener>=^^?^{MapControllerListener}}}{MapGesture=^^?i^{_opaque_pthread_t}{_opaque_pthread_attr_t=q[56c]}^{Runnable}^v^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}qqidqiqBBqBBidqqi{Coordinate3D<double>=ddd}{Map<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >=^^?i{__tree<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, std::__1::__map_value_compare<mapengine::FingerTrack *, std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, std::__1::less<mapengine::FingerTrack *>, true>, std::__1::allocator<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> > > >=^{__tree_node<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<mapengine::FingerTrack *, std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, std::__1::less<mapengine::FingerTrack *>, true> >=Q}}^^?^^?{Enumerator=^^?{Entry=^^?^^{FingerTrack}^{AutoPtr<mapengine::FingerTrack>}}^{Map<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >}{__map_iterator<std::__1::__tree_iterator<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, std::__1::__tree_node<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, void *> *, long> >={__tree_iterator<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, std::__1::__tree_node<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, void *> *, long>=^{__tree_node<std::__1::__value_type<mapengine::FingerTrack *, framework::AutoPtr<mapengine::FingerTrack> >, void *>}}}B}}BBBBBB{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}{AutoPtr<mapengine::GestureListener>=^^?^{GestureListener}}^{GestureValidator}^{Camera}iiii^{MapView}qqq{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}ddBBBBBB{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}dddddddBBBBB}{OverlayLayer=^^?^{MapView}{vector<framework::AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > >, std::__1::allocator<framework::AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > > > >=^{AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > >}^{AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > >}{__compressed_pair<framework::AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > > *, std::__1::allocator<framework::AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > > > >=^{AutoPtr<framework::Map<long long, framework::AutoPtr<sogoumap::engine::core::Overlay> > >}}}{map<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> > > >=^{__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<sogoumap::engine::core::Model3D> >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{AutoPtr<framework::Array<framework::AutoPtr<sogoumap::engine::core::Overlay> > >=^^?^{Array<framework::AutoPtr<sogoumap::engine::core::Overlay> >}}{vector<framework::AutoPtr<sogoumap::engine::core::Overlay>, std::__1::allocator<framework::AutoPtr<sogoumap::engine::core::Overlay> > >=^{AutoPtr<sogoumap::engine::core::Overlay>}^{AutoPtr<sogoumap::engine::core::Overlay>}{__compressed_pair<framework::AutoPtr<sogoumap::engine::core::Overlay> *, std::__1::allocator<framework::AutoPtr<sogoumap::engine::core::Overlay> > >=^{AutoPtr<sogoumap::engine::core::Overlay>}}}{vector<framework::AutoPtr<sogoumap::engine::core::Overlay>, std::__1::allocator<framework::AutoPtr<sogoumap::engine::core::Overlay> > >=^{AutoPtr<sogoumap::engine::core::Overlay>}^{AutoPtr<sogoumap::engine::core::Overlay>}{__compressed_pair<framework::AutoPtr<sogoumap::engine::core::Overlay> *, std::__1::allocator<framework::AutoPtr<sogoumap::engine::core::Overlay> > >=^{AutoPtr<sogoumap::engine::core::Overlay>}}}IB}{ECityInfo=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}{ECityConvertParam=^^?{ECityConvertParamItem=^^?ddd}{ECityConvertParamItem=^^?ddd}{ECityConvertParamItem=^^?ddd}{ECityConvertParamItem=^^?ddd}i}}[256B]Bf{GeometryPackage=^{UpdateCallBack}{HashMap<std::__1::basic_string<char>, std::__1::basic_string<char> >=II^^{_HashMapNode}^{_HashMapNode}QQ}{StylePackageNet={HashMap<std::__1::basic_string<char>, SogouMap::StyleLayer *>=II^^{_HashMapNode}^{_HashMapNode}QQ}{HashMap<std::__1::basic_string<char>, SogouMap::Symbolizer *>=II^^{_HashMapNode}^{_HashMapNode}QQ}{set<SogouMap::Symbolizer *, std::__1::less<SogouMap::Symbolizer *>, std::__1::allocator<SogouMap::Symbolizer *> >={__tree<SogouMap::Symbolizer *, std::__1::less<SogouMap::Symbolizer *>, std::__1::allocator<SogouMap::Symbolizer *> >=^{__tree_node<SogouMap::Symbolizer *, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<SogouMap::Symbolizer *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<SogouMap::Symbolizer *> >=Q}}}B}{shared_ptr<SogouMap::StylePackage>=^{StylePackage}^{__shared_weak_count}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}{_opaque_pthread_mutex_t=q[56c]}{ReadWriteLock=^^?{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{HashMap<std::__1::basic_string<char>, int>=II^^{_HashMapNode}^{_HashMapNode}QQ}{ThreadPool=^^?^^?iB{ConcurrentBlockingList<std::__1::shared_ptr<framework::Runnable> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Runnable>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Runnable> >}{__list_iterator<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{ConcurrentBlockingList<std::__1::shared_ptr<framework::Thread> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Thread>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Thread> >}{__list_iterator<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}{ThreadPool=^^?^^?iB{ConcurrentBlockingList<std::__1::shared_ptr<framework::Runnable> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Runnable>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Runnable> >}{__list_iterator<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{ConcurrentBlockingList<std::__1::shared_ptr<framework::Thread> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Thread>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Thread> >}{__list_iterator<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}}{MapRender={ThreadPool=^^?^^?iB{ConcurrentBlockingList<std::__1::shared_ptr<framework::Runnable> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Runnable>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Runnable> >}{__list_iterator<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{ConcurrentBlockingList<std::__1::shared_ptr<framework::Thread> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Thread>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Thread> >}{__list_iterator<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}{ThreadPool=^^?^^?iB{ConcurrentBlockingList<std::__1::shared_ptr<framework::Runnable> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Runnable>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Runnable> >}{__list_iterator<std::__1::shared_ptr<framework::Runnable>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Runnable>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{ConcurrentBlockingList<std::__1::shared_ptr<framework::Thread> >=^^?{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<framework::Thread>, void *> > >=Q}{Enumerator=^^?^{List<std::__1::shared_ptr<framework::Thread> >}{__list_iterator<std::__1::shared_ptr<framework::Thread>, void *>=^{__list_node_base<std::__1::shared_ptr<framework::Thread>, void *>}}}iBi{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Condition=^^?^{Lock}{_opaque_pthread_cond_t=q[40c]}}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}}}{Array<sogoumap::engine::model::Tile>=^^?^{Tile}^{Tile}{__compressed_pair<sogoumap::engine::model::Tile *, std::__1::allocator<sogoumap::engine::model::Tile> >=^{Tile}}^^?i{Enumerator=^^?^{Array<sogoumap::engine::model::Tile>}i}}{vector<std::__1::vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> >, std::__1::allocator<std::__1::vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> > > >=^{vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> >}^{vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> >}{__compressed_pair<std::__1::vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> > *, std::__1::allocator<std::__1::vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> > > >=^{vector<sogoumap::engine::model::Tile, std::__1::allocator<sogoumap::engine::model::Tile> >}}}{GLBitmap=^^?i^{MipMap}^{SkPixelRef}Qi^v^{SkColorTable}iIIICCCIBBBffiiiiiiB}iqqq{Camera=^^?^{MapView}{AutoPtr<sogoumap::engine::core::CameraListener>=^^?^{CameraListener}}{Coordinate3D<double>=ddd}{Coordinate3D<double>=ddd}ddddddB{Matrix=^^?[4[4d]]}iiddddddddddBidi{Plane=[4d]II}{Plane=[4d]II}ddddd{Vec3d=[3d]}{Matrixd=[4[4d]]}{Matrixd=[4[4d]]}{Matrixd=[4[4d]]}[2{Plane=[4d]II}]dddddddi{Matrix=^^?[4[4d]]}{Matrix=^^?[4[4d]]}{Matrix=^^?[4[4d]]}{GeoQuad=^^?{GeoPolygon=^^?B{Bound=^^?ffff}Iii^{PointSequence}{vector<SogouMap::PointSequence *, std::__1::allocator<SogouMap::PointSequence *> >=^^{PointSequence}^^{PointSequence}{__compressed_pair<SogouMap::PointSequence **, std::__1::allocator<SogouMap::PointSequence *> >=^^{PointSequence}}}{vector<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > > >=^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}{__compressed_pair<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > > > >=^{vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> >, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint> > > >}}}}}Bffff{BoundSet=^^?^{Node}f}^{Layer}q}{GLFbo=iiiiiIII}{Plane=[4d]II}{Skybox=^{MapView}{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{vector<Vec3f, std::__1::allocator<Vec3f> >=^{Vec3f}^{Vec3f}{__compressed_pair<Vec3f *, std::__1::allocator<Vec3f> >=^{Vec3f}}}{vector<Vec2f, std::__1::allocator<Vec2f> >=^{Vec2f}^{Vec2f}{__compressed_pair<Vec2f *, std::__1::allocator<Vec2f> >=^{Vec2f}}}{Vec2f=[2f]}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}^{GLBitmap}^{GLBitmap}^{GLBitmap}iBffffii}{OverFog=^{MapView}{vector<Vec3f, std::__1::allocator<Vec3f> >=^{Vec3f}^{Vec3f}{__compressed_pair<Vec3f *, std::__1::allocator<Vec3f> >=^{Vec3f}}}{vector<Vec2f, std::__1::allocator<Vec2f> >=^{Vec2f}^{Vec2f}{__compressed_pair<Vec2f *, std::__1::allocator<Vec2f> >=^{Vec2f}}}{Vec2f=[2f]}{Lock=^^?{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_mutexattr_t=q[8c]}}^{GLBitmap}iffff}BBi{atomic<int>=Ai}{shared_ptr<std::__1::vector<std::__1::shared_ptr<mapengine::PackedTexture>, std::__1::allocator<std::__1::shared_ptr<mapengine::PackedTexture> > > >=^{vector<std::__1::shared_ptr<mapengine::PackedTexture>, std::__1::allocator<std::__1::shared_ptr<mapengine::PackedTexture> > >}^{__shared_weak_count}}qBqqB}, name: _mapView
    SMEOverlay *overlay;
}

@property SMEOverlay *overlay; // @synthesize overlay;
- (CDStruct_c3b9c2ee)toMapPoint:(struct CGPoint)arg1;
- (struct CGPoint)toPixel:(CDStruct_c3b9c2ee)arg1;
- (id)initWithNativeMapView:(void *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

