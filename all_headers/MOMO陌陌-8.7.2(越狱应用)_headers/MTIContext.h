//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class CIContext, MTICVMetalTextureCache, MTITexturePool, MTKTextureLoader, NSMapTable, NSMutableDictionary;
@protocol MTILocking, MTLCommandQueue, MTLDevice, MTLLibrary;

@interface MTIContext : NSObject
{
    _Bool _isRenderGraphOptimizationEnabled;
    _Bool _isMetalPerformanceShadersSupported;
    unsigned long long _workingPixelFormat;
    id <MTLDevice> _device;
    id <MTLLibrary> _defaultLibrary;
    id <MTLCommandQueue> _commandQueue;
    MTKTextureLoader *_textureLoader;
    CIContext *_coreImageContext;
    MTICVMetalTextureCache *_coreVideoTextureCache;
    NSMutableDictionary *_libraryCache;
    NSMutableDictionary *_functionCache;
    NSMutableDictionary *_renderPipelineCache;
    NSMutableDictionary *_computePipelineCache;
    NSMutableDictionary *_samplerStateCache;
    MTITexturePool *_texturePool;
    NSMapTable *_kernelStateMap;
    NSMutableDictionary *_promiseKeyValueTables;
    NSMutableDictionary *_imageKeyValueTables;
    id <MTILocking> _renderingLock;
    id <MTILocking> _imageKeyValueTablesLock;
    id <MTILocking> _promiseKeyValueTablesLock;
}

+ (_Bool)defaultMetalDeviceSupportsMPS;
+ (id)passthroughKernel;
+ (id)premultiplyAlphaKernel;
@property(readonly, nonatomic) id <MTILocking> promiseKeyValueTablesLock; // @synthesize promiseKeyValueTablesLock=_promiseKeyValueTablesLock;
@property(readonly, nonatomic) id <MTILocking> imageKeyValueTablesLock; // @synthesize imageKeyValueTablesLock=_imageKeyValueTablesLock;
@property(readonly, nonatomic) id <MTILocking> renderingLock; // @synthesize renderingLock=_renderingLock;
@property(readonly, nonatomic) NSMutableDictionary *imageKeyValueTables; // @synthesize imageKeyValueTables=_imageKeyValueTables;
@property(readonly, nonatomic) NSMutableDictionary *promiseKeyValueTables; // @synthesize promiseKeyValueTables=_promiseKeyValueTables;
@property(readonly, nonatomic) NSMapTable *kernelStateMap; // @synthesize kernelStateMap=_kernelStateMap;
@property(readonly, nonatomic) MTITexturePool *texturePool; // @synthesize texturePool=_texturePool;
@property(readonly, nonatomic) NSMutableDictionary *samplerStateCache; // @synthesize samplerStateCache=_samplerStateCache;
@property(readonly, nonatomic) NSMutableDictionary *computePipelineCache; // @synthesize computePipelineCache=_computePipelineCache;
@property(readonly, nonatomic) NSMutableDictionary *renderPipelineCache; // @synthesize renderPipelineCache=_renderPipelineCache;
@property(readonly, nonatomic) NSMutableDictionary *functionCache; // @synthesize functionCache=_functionCache;
@property(readonly, nonatomic) NSMutableDictionary *libraryCache; // @synthesize libraryCache=_libraryCache;
@property(readonly, nonatomic) MTICVMetalTextureCache *coreVideoTextureCache; // @synthesize coreVideoTextureCache=_coreVideoTextureCache;
@property(readonly, nonatomic) CIContext *coreImageContext; // @synthesize coreImageContext=_coreImageContext;
@property(readonly, nonatomic) MTKTextureLoader *textureLoader; // @synthesize textureLoader=_textureLoader;
@property(readonly, nonatomic) id <MTLCommandQueue> commandQueue; // @synthesize commandQueue=_commandQueue;
@property(readonly, nonatomic) id <MTLLibrary> defaultLibrary; // @synthesize defaultLibrary=_defaultLibrary;
@property(readonly, nonatomic) id <MTLDevice> device; // @synthesize device=_device;
@property(readonly, nonatomic) _Bool isMetalPerformanceShadersSupported; // @synthesize isMetalPerformanceShadersSupported=_isMetalPerformanceShadersSupported;
@property(readonly, nonatomic) _Bool isRenderGraphOptimizationEnabled; // @synthesize isRenderGraphOptimizationEnabled=_isRenderGraphOptimizationEnabled;
@property(readonly, nonatomic) unsigned long long workingPixelFormat; // @synthesize workingPixelFormat=_workingPixelFormat;
- (void).cxx_destruct;
- (void)reclaimResources;
- (id)initWithDevice:(id)arg1 error:(id *)arg2;
- (id)initWithDevice:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (void)setValue:(id)arg1 forImage:(id)arg2 inTable:(id)arg3;
- (id)valueForImage:(id)arg1 inTable:(id)arg2;
- (void)setValue:(id)arg1 forPromise:(id)arg2 inTable:(id)arg3;
- (id)valueForPromise:(id)arg1 inTable:(id)arg2;
- (id)samplerStateWithDescriptor:(id)arg1;
- (id)kernelStateForKernel:(id)arg1 configuration:(id)arg2 error:(id *)arg3;
- (id)computePipelineWithDescriptor:(id)arg1 error:(id *)arg2;
- (id)renderPipelineWithDescriptor:(id)arg1 error:(id *)arg2;
- (id)functionWithDescriptor:(id)arg1 error:(id *)arg2;
- (id)libraryWithURL:(id)arg1 error:(id *)arg2;
- (void)unlockForRendering;
- (void)lockForRendering;
- (id)newRenderTargetWithResuableTextureDescriptor:(id)arg1;
- (id)newRenderTargetWithTexture:(id)arg1;
- (struct CGImage *)createCGImageFromImage:(id)arg1 error:(id *)arg2;
- (_Bool)renderImage:(id)arg1 toCVPixelBuffer:(struct __CVBuffer *)arg2 error:(id *)arg3;
- (id)createCIImageFromImage:(id)arg1 error:(id *)arg2;
- (_Bool)renderImage:(id)arg1 toDrawableWithRequest:(id)arg2 error:(id *)arg3;

@end

