//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "TTWebViewBaseController.h"

#import "SAKPortalable-Protocol.h"
#import "UIWebViewDelegate-Protocol.h"
#import "WKNavigationDelegate-Protocol.h"
#import "WKScriptMessageHandler-Protocol.h"
#import "WKUIDelegate-Protocol.h"

@class NSDictionary, NSString, SAKWebErrorClewViewProxy, SAKWebViewControllerProgressProxy, UIActivityIndicatorView, WKWebViewConfiguration;
@protocol SAKWebViewControllerDelegate;

@interface SAKWebViewController : TTWebViewBaseController <WKNavigationDelegate, WKUIDelegate, WKScriptMessageHandler, UIWebViewDelegate, SAKPortalable>
{
    _Bool _showTitleFromWebContent;
    _Bool _shouldHaveLeftBarButtonItem;
    _Bool _enableMTNBBridge;
    _Bool _activityViewHidden;
    _Bool _progressHidden;
    _Bool _alwaysShowErrorView;
    _Bool _errorClewViewHidden;
    _Bool _showBackAndCloseButtonItem;
    _Bool _shouldPortalFromSelf;
    _Bool _needUseWKWebView;
    _Bool __webPageBacking;
    double _webViewContentWidth;
    double _webViewContentHeight;
    NSString *_HTTPMethod;
    NSDictionary *_iMeituanContent;
    id <SAKWebViewControllerDelegate> _delegate;
    CDUnknownBlockType _exitBlock;
    CDUnknownBlockType _removeMTNBRefreshHeaderBlock;
    UIActivityIndicatorView *_activityView;
    SAKWebViewControllerProgressProxy *_progressProxy;
    SAKWebErrorClewViewProxy *_errorClewViewProxy;
    WKWebViewConfiguration *_configuration;
}

+ (void)addWKWebViewURLHandler:(CDUnknownBlockType)arg1;
+ (void)setConfigCenterHandler:(CDUnknownBlockType)arg1;
+ (id)instanceWithURL:(id)arg1 shouldTransfer:(_Bool)arg2 fromViewController:(id)arg3;
+ (void)initialize;
+ (id)spk_webViewController;
+ (id)spk_webViewControllerWithURL:(id)arg1;
+ (void)enableErrorClewView:(_Bool)arg1;
+ (_Bool)ErrorClewViewEnabled;
+ (void)enableProgress:(_Bool)arg1;
+ (_Bool)progressEnabled;
@property(nonatomic) _Bool _webPageBacking; // @synthesize _webPageBacking=__webPageBacking;
@property(nonatomic) _Bool needUseWKWebView; // @synthesize needUseWKWebView=_needUseWKWebView;
@property(retain, nonatomic) WKWebViewConfiguration *configuration; // @synthesize configuration=_configuration;
@property(retain, nonatomic) SAKWebErrorClewViewProxy *errorClewViewProxy; // @synthesize errorClewViewProxy=_errorClewViewProxy;
@property(retain, nonatomic) SAKWebViewControllerProgressProxy *progressProxy; // @synthesize progressProxy=_progressProxy;
@property(retain, nonatomic) UIActivityIndicatorView *activityView; // @synthesize activityView=_activityView;
@property(copy, nonatomic) CDUnknownBlockType removeMTNBRefreshHeaderBlock; // @synthesize removeMTNBRefreshHeaderBlock=_removeMTNBRefreshHeaderBlock;
@property(nonatomic) _Bool shouldPortalFromSelf; // @synthesize shouldPortalFromSelf=_shouldPortalFromSelf;
@property(nonatomic) _Bool showBackAndCloseButtonItem; // @synthesize showBackAndCloseButtonItem=_showBackAndCloseButtonItem;
@property(nonatomic) _Bool errorClewViewHidden; // @synthesize errorClewViewHidden=_errorClewViewHidden;
@property(nonatomic) _Bool alwaysShowErrorView; // @synthesize alwaysShowErrorView=_alwaysShowErrorView;
@property(copy, nonatomic) CDUnknownBlockType exitBlock; // @synthesize exitBlock=_exitBlock;
@property(nonatomic) _Bool progressHidden; // @synthesize progressHidden=_progressHidden;
@property(nonatomic) _Bool activityViewHidden; // @synthesize activityViewHidden=_activityViewHidden;
@property(nonatomic) _Bool enableMTNBBridge; // @synthesize enableMTNBBridge=_enableMTNBBridge;
@property(nonatomic) _Bool shouldHaveLeftBarButtonItem; // @synthesize shouldHaveLeftBarButtonItem=_shouldHaveLeftBarButtonItem;
@property(nonatomic) _Bool showTitleFromWebContent; // @synthesize showTitleFromWebContent=_showTitleFromWebContent;
@property(nonatomic) __weak id <SAKWebViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSDictionary *iMeituanContent; // @synthesize iMeituanContent=_iMeituanContent;
@property(copy, nonatomic) NSString *HTTPMethod; // @synthesize HTTPMethod=_HTTPMethod;
@property(nonatomic) double webViewContentHeight; // @synthesize webViewContentHeight=_webViewContentHeight;
@property(nonatomic) double webViewContentWidth; // @synthesize webViewContentWidth=_webViewContentWidth;
- (void).cxx_destruct;
- (void)clearWebsiteData;
- (void)fetchAndClearWebsiteData;
- (void)fetchWebsiteData;
- (id)pageDescription;
- (void)stopActivity;
- (_Bool)isShortURLService:(id)arg1;
- (_Bool)isPermissiveHostURL:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)setH5WebGLFeatureEnable:(_Bool)arg1;
- (void)webViewWebProcessDidCrash;
- (void)_webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)recordWebViewContentSize;
- (void)_webViewDidFinishLoad:(id)arg1;
- (void)_webViewDidStartLoad:(id)arg1;
- (void)tt_webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)tt_webViewDidFinishLoad:(id)arg1;
- (void)webViewDidFinishLoad:(id)arg1;
- (void)tt_webViewDidStartLoad:(id)arg1;
- (void)webViewDidStartLoad:(id)arg1;
- (_Bool)tt_webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2;
- (_Bool)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(long long)arg3;
- (_Bool)handleURLRequest:(id)arg1;
- (void)didSetupUI;
- (void)setupUI;
- (void)viewDidLoad;
- (id)defaultBackgroundColor;
- (id)pageParameter;
- (void)dealloc;
- (void)_setupWKConfiguration;
- (id)initWithURL:(id)arg1 needUseWKWebView:(_Bool)arg2 forced:(_Bool)arg3;
- (id)initWithURL:(id)arg1 needUseWKWebView:(_Bool)arg2;
- (id)initWithURL:(id)arg1;
- (id)navigatorItem;
- (void)reloadWebView;
- (id)errorView;
- (void)addProgressBar;
- (void)extraInjectContext:(id)arg1;
- (void)loadURLRequest:(id)arg1;
- (id)urlRequest;
- (void)handleWithURL:(id)arg1;
- (id)init;
- (void)userContentController:(id)arg1 didReceiveScriptMessage:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

