//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

#import "ASIHTTPRequestHelperDelegate-Protocol.h"
#import "NSURLSessionDelegate-Protocol.h"
#import "NSURLSessionDownloadDelegate-Protocol.h"
#import "NSURLSessionTaskDelegate-Protocol.h"

@class NSMutableArray, NSMutableDictionary, NSString;
@protocol QZDLConfigDelegate, QZDLLoggerDelegate, QZDLReportDelegate, QZDLSSLHelperDelegate;

@interface QZURLCache : NSObject <NSURLSessionDownloadDelegate, NSURLSessionTaskDelegate, NSURLSessionDelegate, ASIHTTPRequestHelperDelegate>
{
    NSMutableDictionary *waitDict_;
    NSMutableDictionary *sendDict_;
    NSMutableDictionary *cacheDict_;
    NSMutableDictionary *routeDict_;
    NSMutableDictionary *strategyDict_;
    NSMutableDictionary *httpDict_;
    _Bool deriveIgnArchive;
    NSMutableArray *kpDomainList_;
    NSMutableArray *sptRangeList_;
    NSMutableDictionary *_downloadInfoDictionary;
    NSMutableDictionary *_completionHandlerDictionary;
    id <QZDLConfigDelegate> _configDelegate;
    id <QZDLReportDelegate> _reportDelegate;
    id <QZDLLoggerDelegate> _loggerDelegate;
    id <QZDLSSLHelperDelegate> _sslHelperDelegate;
    NSString *_backgroundSessionConfigurationIdentifier;
    NSString *_sharedGroupIdentifier;
    _Bool _isExtensionMode;
}

+ (id)getInstance;
+ (_Bool)isNotReachable;
+ (id)DocPath;
+ (id)urlRefer:(int)arg1;
+ (void)runRequests;
+ (id)threadForURLCache:(id)arg1;
@property(nonatomic) _Bool isExtensionMode; // @synthesize isExtensionMode=_isExtensionMode;
@property(retain, nonatomic) NSString *backgroundSessionConfigurationIdentifier; // @synthesize backgroundSessionConfigurationIdentifier=_backgroundSessionConfigurationIdentifier;
@property(retain, nonatomic) NSString *sharedGroupIdentifier; // @synthesize sharedGroupIdentifier=_sharedGroupIdentifier;
@property(nonatomic) __weak id <QZDLLoggerDelegate> loggerDelegate; // @synthesize loggerDelegate=_loggerDelegate;
@property(nonatomic) __weak id <QZDLReportDelegate> reportDelegate; // @synthesize reportDelegate=_reportDelegate;
@property(nonatomic) __weak id <QZDLConfigDelegate> configDelegate; // @synthesize configDelegate=_configDelegate;
@property(retain) NSMutableDictionary *completionHandlerDictionary; // @synthesize completionHandlerDictionary=_completionHandlerDictionary;
@property(retain) NSMutableDictionary *downloadInfoDictionary; // @synthesize downloadInfoDictionary=_downloadInfoDictionary;
@property(retain) NSMutableDictionary *httpDict_; // @synthesize httpDict_;
- (void).cxx_destruct;
- (_Bool)isTaskQueueEmpty;
- (void)addCompletionHandler:(CDUnknownBlockType)arg1 forSession:(id)arg2;
- (_Bool)backgroundSessionHasExist;
- (_Bool)checkOutFile;
- (void)resetStrategy;
- (void)copyCacheFrom:(id)arg1 toURL:(id)arg2;
- (_Bool)expireDataForURL:(id)arg1 withDate:(id)arg2;
- (void)cancelRequestForTarget:(id)arg1;
- (void)cancelRequestForURL:(id)arg1;
- (void)clearWithTarget:(id)arg1;
- (void)clearWithURL:(id)arg1 target:(id)arg2;
- (void)raiseRequestsWithURLs:(id)arg1;
- (void)raiseRequestWithURL:(id)arg1;
- (void)requestWithURL:(id)arg1 target:(id)arg2 succBlock:(CDUnknownBlockType)arg3 param:(id)arg4;
- (void)requestWithURL:(id)arg1 target:(id)arg2 succBlock:(CDUnknownBlockType)arg3 failBlock:(CDUnknownBlockType)arg4 param:(id)arg5;
- (void)requestWithURL:(id)arg1 target:(id)arg2 succBlock:(CDUnknownBlockType)arg3 failBlock:(CDUnknownBlockType)arg4 progressBlock:(CDUnknownBlockType)arg5 param:(id)arg6;
- (void)requestWithURL:(id)arg1 target:(id)arg2 succBlock:(CDUnknownBlockType)arg3;
- (void)requestWithURL:(id)arg1 target:(id)arg2 succBlock:(CDUnknownBlockType)arg3 failBlock:(CDUnknownBlockType)arg4;
- (void)requestWithURL:(id)arg1 target:(id)arg2 succBlock:(CDUnknownBlockType)arg3 failBlock:(CDUnknownBlockType)arg4 progressBlock:(CDUnknownBlockType)arg5;
- (void)requestWithURL:(id)arg1;
- (void)hasRequestForURL:(id)arg1 reqExistBlock:(CDUnknownBlockType)arg2;
- (void)reportHitRateIsSuccess:(_Bool)arg1;
- (void)clearAll;
- (void)clearWithURL:(id)arg1;
- (void)updateImage:(id)arg1 forUrl:(id)arg2;
- (void)updateData:(id)arg1 forUrl:(id)arg2;
- (void)saveImage:(id)arg1 forUrl:(id)arg2;
- (void)saveData:(id)arg1 forUrl:(id)arg2;
- (id)imageWithURL:(id)arg1;
- (id)dataWithRoundImageURL:(id)arg1;
- (id)dataWithURL:(id)arg1;
- (id)pathNameWithURL:(id)arg1;
- (id)pathWithURL:(id)arg1;
- (_Bool)hasDataWithURL:(id)arg1;
- (void)applicationEnterBackground;
- (_Bool)shouldValidateSSLCertificatesExceptPeerName;
- (_Bool)shouldNotValidateSSLCertificates;
- (_Bool)shouldValidateSSLCertificates;
- (void)printLogStr:(id)arg1 param:(id)arg2;
- (void)printLogStr:(id)arg1;
- (id)atsWhiteList;
- (_Bool)isEnforceHttps;
- (void)setupLoggerPath:(id)arg1;
- (void)setupIsExtensionMode:(_Bool)arg1;
- (void)setupSharedContainerIdentifier:(id)arg1;
- (void)setupBackgroundSessionConfigurationIdentifier:(id)arg1;
- (void)setupRangeCacheDir:(id)arg1;
- (void)setupResourceCacheDir:(id)arg1;
- (void)setupImageCacheDir:(id)arg1;
- (_Bool)getIsExtensionMode;
- (id)getLoggerDelegate;
- (void)setupSSLHelperDelegate:(id)arg1;
- (void)setupLoggerDelegate:(id)arg1;
- (void)setupReportDelegate:(id)arg1;
- (void)setupConfigDelegate:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (_Bool)shouldRetryEncounterError:(long long)arg1;
- (_Bool)checkFile:(id)arg1 fileData:(id)arg2;
- (id)generalNSURLSessionURLRequest:(id)arg1;
- (void)callCompletionHandlerForSession:(id)arg1;
- (unsigned long long)downloadWithUrl:(id)arg1 target:(id)arg2 blockHelper:(id)arg3;
- (void)requestWithSession:(id)arg1 target:(id)arg2 blockHelper:(id)arg3 param:(id)arg4;
- (_Bool)backgroundSessionExist;
- (id)backgroundSession;
- (void)reportToCompassWithRequest:(id)arg1 isSuccess:(_Bool)arg2;
- (long long)retCodeForCompress:(id)arg1;
- (void)reportToMTAWithRequest:(id)arg1 isSuccess:(_Bool)arg2;
- (id)contentTypeForImageData:(id)arg1;
- (void)didRequestFailNext:(id)arg1;
- (void)didRequestFail:(id)arg1;
- (void)didRequestFinishNext:(id)arg1;
- (void)downloadSuccessReport:(id)arg1 brokenImage2Success:(_Bool)arg2;
- (id)strategyType:(long long)arg1;
- (id)getReportExtendInfo:(id)arg1;
- (id)attachInfo:(id)arg1 image:(id)arg2;
- (void)outputFinishLog:(id)arg1 image:(id)arg2;
- (void)checkFileIntegrity:(id)arg1 fileData:(id)arg2 dataLength:(unsigned long long)arg3 image:(id)arg4;
- (_Bool)contentLengthCheck:(id)arg1;
- (void)didRequestFinish:(id)arg1;
- (void)didRequestStart:(id)arg1;
- (void)request:(id)arg1 willPerformRedirectToURL:(id)arg2;
- (void)request:(id)arg1 didReceiveResponseHeaders:(id)arg2;
- (void)request:(id)arg1 didReceiveData:(id)arg2;
- (void)checkStrategy;
- (void)unarchiveStrategy;
- (void)archiveStrategy;
- (_Bool)checkOutDateFile;
- (id)filePath;
- (id)outDateFile;
- (void)updateInvalidHost:(id)arg1 forRegex:(id)arg2 forAPN:(int)arg3;
- (void)updateValidHost:(id)arg1 forRegex:(id)arg2 forAPN:(int)arg3;
- (void)updateInvalidIP:(id)arg1 andPort:(id)arg2 forRegex:(id)arg3 forAPN:(int)arg4;
- (void)updateValidIP:(id)arg1 andPort:(id)arg2 forRegex:(id)arg3 forAPN:(int)arg4;
- (id)nextPortWithStrategy:(id)arg1 inDict:(id)arg2 forHost:(id)arg3 forAPN:(int)arg4;
- (id)nextIPWithStrategy:(id)arg1 inDict:(id)arg2 forHost:(id)arg3 forAPN:(int)arg4;
- (id)nextIPItemForHost:(id)arg1 forAPN:(int)arg2 inStatus:(long long *)arg3 byRegex:(id *)arg4;
- (double)getTimeoutSeconds;
- (_Bool)isMatchServerIpList:(id)arg1 key:(id)arg2 ip:(id)arg3;
- (void)cancelRequestForTargetInThread:(id)arg1;
- (void)cancelRequestForURLInThread:(id)arg1;
- (void)removeRequest:(id)arg1;
- (void)removeRequestForTargetValue:(id)arg1;
- (void)removeRequestForURL:(id)arg1 targetValue:(id)arg2;
- (id)getStorageAdapter:(id)arg1;
- (id)createDefaultAdapterHelper:(id)arg1;
- (void)updateRequestForURL:(id)arg1 blockHelper:(id)arg2;
- (void)addRequestForURL:(id)arg1 blockHelper:(id)arg2 param:(id)arg3;
- (void)addRequestForURL:(id)arg1 blockHelper:(id)arg2;
- (void)addRequestForURL:(id)arg1;
- (_Bool)hasRequestForURL:(id)arg1;
- (id)createASIHttpRequest:(id)arg1 param:(id)arg2 action:(id)arg3 adapter:(id)arg4;
- (id)getKpDomainList;
- (void)continueRequestOnMainThread:(id)arg1;
- (_Bool)retryRequestWhenCheckFail:(id)arg1 errorCode:(long long)arg2;
- (_Bool)retryRequest:(id)arg1;
- (long long)getWnsConfigRetryTimes;
- (void)raiseRequest:(id)arg1;
- (void)continueRequest:(long long)arg1;
- (void)startRequest:(id)arg1;
- (void)calculateQueueTime:(id)arg1;
- (id)getNetQueue:(long long)arg1;
- (id)getLocalQueue:(long long)arg1;
- (void)addCompletionHandlerOnThread:(id)arg1;
- (void)dispatchThread2URLCacheThread:(id)arg1;
- (void)didRequestFinishNextOnThread:(id)arg1;
- (void)resetStrategyOnThread;
- (void)archiveCacheOnThread;
- (void)clearWithTargetOnThread:(id)arg1;
- (void)clearWithURLOnThread:(id)arg1;
- (void)raiseRequestsWithURLsOnThread:(id)arg1;
- (void)raiseRequestWithURLOnThread:(id)arg1;
- (void)requestWithURLOnThread:(id)arg1;
- (void)hasRequestForURLOnThread:(id)arg1;
- (id)roundHeadIconImageWithURL:(id)arg1;
- (void)saveHeadIcon:(id)arg1 forUin:(long long)arg2;
- (id)roundHeadIconForUin:(long long)arg1;
- (id)headIconForUin:(long long)arg1;
- (void)clearHeadIconThumbCacheForUin:(long long)arg1;
- (void)clearHeadIconForUin:(long long)arg1;
- (void)removeHttpHelperForKey:(id)arg1;
- (void)setHttpHelper:(id)arg1 forKey:(id)arg2;
- (id)httpHelperForKey:(id)arg1;
- (_Bool)supportContentRange:(id)arg1;
- (_Bool)parseRangeInfo:(id)arg1 result:(id)arg2;
- (void)unarchiveHttpCache;
- (void)archiveHttpCache;
- (id)httpCachePath;
- (void)checkRoute;
- (void)clearRoute;
- (void)updateInvalidRoute:(id)arg1;
- (void)updateValidRoute:(id)arg1;
- (void)retryRoute:(id)arg1;
- (void)startRoute:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

