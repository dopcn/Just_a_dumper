//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "PPQ_CameraModeViewDelegate-Protocol.h"
#import "PPao_FilterListViewDelegate-Protocol.h"
#import "UIAlertViewDelegate-Protocol.h"
#import "UIScrollViewDelegate-Protocol.h"

@class GPUBridgeFilter, GPUImageCropFilter, GPUImageMovieWriter, GPUImageVideoCamera, GPUImageView, NSMutableArray, NSObject, NSString, NSTimer, PPQ_CameraModeView, PPQ_CameraProgressView, PPQ_CameraSlider, PPao_FilterListView, UIImageView, UILabel, UIScrollView;
@protocol OS_dispatch_queue, PPQ_FilterControlViewDelegate;

@interface PPQ_FilterControlView : UIView <UIScrollViewDelegate, UIAlertViewDelegate, PPao_FilterListViewDelegate, PPQ_CameraModeViewDelegate>
{
    GPUImageView *_GPUView;
    GPUImageMovieWriter *_movieWrite;
    GPUImageVideoCamera *_videoCamera;
    GPUImageCropFilter *_cropFilter;
    GPUBridgeFilter *_bridgeFilter;
    UIScrollView *_pageScrollView;
    PPao_FilterListView *_filterListView;
    UILabel *_timeView;
    PPQ_CameraModeView *_modeView;
    PPQ_CameraSlider *_modeSlider;
    PPQ_CameraProgressView *_progressView;
    UIImageView *_focusImageView;
    long long _cameraPosition;
    NSMutableArray *appFilters;
    long long _currentFilterIndex;
    long long _secondFilterIndex;
    double _currentVideoDur;
    long long _index;
    long long _filterCount;
    NSObject<OS_dispatch_queue> *_cameraChangeQueue;
    _Bool _isChangingCameraPosition;
    _Bool _didSelectAtFilterListView;
    _Bool _isCameraStarted;
    UIImageView *_sliderBackgroundView;
    _Bool _shooting;
    id <PPQ_FilterControlViewDelegate> _delegate;
    UIView *_backgroundView;
    NSTimer *_whriteTimer;
}

@property(retain, nonatomic) NSTimer *whriteTimer; // @synthesize whriteTimer=_whriteTimer;
@property(retain, nonatomic) UIView *backgroundView; // @synthesize backgroundView=_backgroundView;
@property(nonatomic) _Bool shooting; // @synthesize shooting=_shooting;
@property(nonatomic) id <PPQ_FilterControlViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)cameraModeViewDidFinish:(id)arg1;
- (void)cameraModeViewWillFinish:(id)arg1;
- (void)filterListView:(id)arg1 didSelectAtIndex:(long long)arg2;
- (void)touchMe:(id)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (int)getPageInFilterScrollView:(id)arg1;
- (void)initScrollViewOffset:(id)arg1;
- (void)recoardTime;
- (void)stopRecordTimer;
- (void)startRecordTimer;
- (void)stopRecording;
- (void)resumeRecording;
- (void)pauseRecording;
- (void)startRecording;
- (void)prepareRecording;
- (void)makeTorchOff;
- (void)makeTorchOn;
- (void)changeTorchMode;
- (_Bool)isTorchModeOn;
- (_Bool)isTorchSuppored;
- (void)focusAndExposeAtPoint:(struct CGPoint)arg1;
- (struct CGPoint)convertToPointOfInterestFromViewCoordinates:(struct CGPoint)arg1;
- (void)focusAndExposeTap:(id)arg1;
- (void)subjectAreaDidChange:(id)arg1;
- (void)stopCamera;
- (void)startCamera;
- (void)setCameraPosition:(long long)arg1;
- (void)changeCameraPositionBack;
- (void)changeCameraPositionFront;
- (void)changeCameraPosition;
- (void)setupBeautyFilters;
- (void)setupNormalFilters;
- (void)setupFilterList;
- (_Bool)setMovieWriter;
- (void)modelSliderStopAction:(id)arg1;
- (void)modeSliderAction:(id)arg1;
- (void)pingbackForSelectFilter;
- (void)hideFilterList;
- (void)setFilterHidden:(_Bool)arg1;
- (id)currentPath;
- (id)fileURLArray;
- (double)recordProgress;
- (void)hideGuide;
- (void)tapAction:(id)arg1;
- (id)focusImageView;
- (id)tapGesture;
- (id)modeSlider;
- (id)modeView;
- (id)timeView;
- (id)filterListView;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)removeCamera;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

