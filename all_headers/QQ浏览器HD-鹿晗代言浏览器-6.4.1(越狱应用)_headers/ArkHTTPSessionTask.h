//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class ArkHTTPFlowStat, ArkHTTPSession, ArkHTTPStatInfo, HTTPProxy, NSData, NSHTTPURLResponse, NSMutableData, NSOperationQueue, NSString, NSURLRequest;
@protocol ArkHTTPSessionDelegate, OS_dispatch_queue;

@interface ArkHTTPSessionTask : NSObject
{
    ArkHTTPSession *_session;
    int _retryCount;
    struct HARKHTTP__ *_http;
    _Bool _completed;
    _Bool _canceled;
    int _result;
    int _ark_error;
    int _internal_error;
    HTTPProxy *_proxy;
    NSHTTPURLResponse *_response;
    NSMutableData *_responseData;
    NSString *_downloadFilepath;
    NSString *_uploadFilePath;
    NSData *_uploadData;
    NSString *_serverIP;
    ArkHTTPStatInfo *_stat;
    ArkHTTPFlowStat *_flowStat;
    NSOperationQueue *_delegateQueue;
    NSObject<OS_dispatch_queue> *_delegateDispatchQueue;
    id <ArkHTTPSessionDelegate> _delegate;
    CDUnknownBlockType _cbDataComplete;
    CDUnknownBlockType _cbFileComplete;
    _Bool _noRedirected;
    _Bool _noRetry;
    _Bool _noTaskQueue;
    _Bool _taskQueueFIFO;
    _Bool _noInternalCache;
    int _maxRetryCount;
    unsigned long long _taskIdentifier;
    NSURLRequest *_request;
    double _timeoutIntervalForResource;
}

+ (int)arkHTTPErrorCodeToNSError:(int)arg1 status:(int)arg2;
+ (id)arkHTTPErrorCodeToString:(int)arg1 status:(int)arg2;
+ (int)getMethodFromString:(id)arg1;
+ (id)getEncodedURL:(id)arg1;
+ (_Bool)needURLEncode:(id)arg1;
+ (id)getDownloadFilePath;
@property(readonly) NSString *downloadFilepath; // @synthesize downloadFilepath=_downloadFilepath;
@property _Bool noInternalCache; // @synthesize noInternalCache=_noInternalCache;
@property double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property _Bool taskQueueFIFO; // @synthesize taskQueueFIFO=_taskQueueFIFO;
@property _Bool noTaskQueue; // @synthesize noTaskQueue=_noTaskQueue;
@property int maxRetryCount; // @synthesize maxRetryCount=_maxRetryCount;
@property _Bool noRetry; // @synthesize noRetry=_noRetry;
@property _Bool noRedirected; // @synthesize noRedirected=_noRedirected;
@property(readonly) NSURLRequest *request; // @synthesize request=_request;
@property(readonly) unsigned long long taskIdentifier; // @synthesize taskIdentifier=_taskIdentifier;
- (void).cxx_destruct;
- (id)getAllResponseHeaders;
- (int)getStatusCode;
- (void)onCompleteMainThread:(int)arg1;
- (void)onCompleteLogicThread:(int)arg1;
- (void)onRecvBodyLogicThread:(unsigned long long)arg1 buffer:(const void *)arg2 bufferLen:(int)arg3 totalLen:(unsigned long long)arg4;
- (void)onUploadCallback:(unsigned long long)arg1 bufLen:(int)arg2 totalLen:(unsigned long long)arg3;
- (void)onRedirectLogicThread:(id)arg1 referer:(id)arg2;
- (void)onConnectedLogicThread:(id)arg1;
- (void)onConnectingLogicThread:(id)arg1;
- (void)doCallback:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;
- (void)cancelWithError:(int)arg1;
- (void)cancel;
- (void)notifyFail:(int)arg1;
- (_Bool)getProxy:(struct tagArkHTTPProxy *)arg1;
- (void)setEventMask:(struct HARKHTTP__ *)arg1;
- (void)setRequestHeaders:(struct HARKHTTP__ *)arg1 headers:(id)arg2;
- (void)start;
- (_Bool)retry;
- (void)reset;
- (void)resume;
- (void)setDelegateQueue:(id)arg1 dispatchQueue:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDownloadCompleteCallback:(CDUnknownBlockType)arg1;
- (void)setDataCompleteCallback:(CDUnknownBlockType)arg1;
@property(readonly) unsigned long long expectedBytes; // @dynamic expectedBytes;
@property(readonly) NSString *serverIP; // @dynamic serverIP;
@property(readonly) NSString *URL; // @dynamic URL;
@property(readonly) ArkHTTPFlowStat *flowStat; // @dynamic flowStat;
@property(readonly) ArkHTTPStatInfo *statInfo; // @dynamic statInfo;
@property(readonly) NSHTTPURLResponse *response; // @dynamic response;
- (id)getResponseData;
- (int)getResultCode;
- (_Bool)isCanceled;
- (_Bool)isCompleted;
- (void)dealloc;
- (id)initWithUploadFileRequest:(id)arg1 request:(id)arg2 uploadFile:(id)arg3;
- (id)initWithDownloadRequest:(id)arg1 request:(id)arg2;
- (id)initWithDataRequest:(id)arg1 request:(id)arg2;

@end

